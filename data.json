{
    "feed": {
        "id": "tag:blogger.com,1999:blog-7135654868651822449.archive",
        "updated": "2016-01-25T10:53:06.894-08:00",
        "title": {
            "_type": "text",
            "__text": "MograBlog"
        },
        "link": [
            {
                "_rel": "http://schemas.google.com/g/2005#feed",
                "_type": "application/atom+xml",
                "_href": "https://www.blogger.com/feeds/7135654868651822449/archive"
            },
            {
                "_rel": "self",
                "_type": "application/atom+xml",
                "_href": "https://www.blogger.com/feeds/7135654868651822449/archive"
            },
            {
                "_rel": "http://schemas.google.com/g/2005#post",
                "_type": "application/atom+xml",
                "_href": "https://www.blogger.com/feeds/7135654868651822449/archive"
            },
            {
                "_rel": "alternate",
                "_type": "text/html",
                "_href": "http://www.mograblog.com/"
            }
        ],
        "author": {
            "name": "guy mograbi",
            "email": "noreply@blogger.com",
            "image": {
                "_rel": "http://schemas.google.com/g/2005#thumbnail",
                "_width": "32",
                "_height": "32",
                "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                "__prefix": "gd"
            }
        },
        "generator": {
            "_version": "7.00",
            "_uri": "https://www.blogger.com",
            "__text": "Blogger"
        },
        "entry": [
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.layout",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#template"
                },
                "title": {
                    "_type": "text",
                    "__text": "Template: MograBlog"
                },
                "content": {
                    "_type": "text",
                    "__text": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>\n  <head>\n     <meta content='6675CCB31AC6FE34B8126853066271F5' name='msvalidate.01'/>\n    <meta content='6675CCB31AC6FE34B8126853066271F5' name='msvalidate.01'/>\n    <meta content='bawVYoLIq_DuAWDtX2dq1mlPfi5G4caWvQWt6D9VMm' name='globalsign-domain-verification'/>\n    <meta content='h3GEFX_ELYZf8PtscElo9ywOE3_SP8iXvRr5EliMk_8' name='google-site-verification'/>\n    <meta content='Mograblog, Java, JavaScript, Play, Spring, Hibernate' name='keywords'/>\n    <b:include data='blog' name='all-head-content'/>\n    <title>\n      <data:blog.pageTitle/>\n    </title>\n    <link href='//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.no-icons.min.css' rel='stylesheet'/>\n    <link href='//netdna.bootstrapcdn.com/font-awesome/3.1.1/css/font-awesome.css' rel='stylesheet'/>\n    <b:skin><![CDATA[\n      /*\n-----------------------------------------------\nBlogger Template Style\nName:     Stretch Denim\nDesigner: Darren Delaye\nURL:      www.DarrenDelaye.com\nDate:     11 Jul 2006\n-----------------------------------------------\n*/\n/* Variable definitions\n====================\n<Variable name=\"bgColor\" description=\"Page Background Color\"\ntype=\"color\" default=\"#efefef\" value=\"#ffffff\">\n<Variable name=\"textColor\" description=\"Text Color\"\ntype=\"color\" default=\"#333333\" value=\"#333333\">\n<Variable name=\"linkColor\" description=\"Link Color\"\ntype=\"color\" default=\"#336699\" value=\"#336699\">\n<Variable name=\"headerBgColor\" description=\"Page Header Background Color\"\ntype=\"color\" default=\"#336699\" value=\"transparent\">\n<Variable name=\"headerTextColor\" description=\"Page Header Text Color\"\ntype=\"color\" default=\"#ffffff\" value=\"#ffffff\"> \n<Variable name=\"headerCornersColor\" description=\"Page Header Corners Color\"\ntype=\"color\" default=\"#528bc5\" value=\"transparent\">\n<Variable name=\"mainBgColor\" description=\"Main Background Color\"\ntype=\"color\" default=\"#ffffff\" value=\"#ffffff\">\n<Variable name=\"borderColor\" description=\"Border Color\"\ntype=\"color\" default=\"#cccccc\" value=\"#ffffff\">\n<Variable name=\"dateHeaderColor\" description=\"Date Header Color\"\ntype=\"color\" default=\"#999999\" value=\"#999999\">\n<Variable name=\"sidebarTitleBgColor\" description=\"Sidebar Title Background Color\"\ntype=\"color\" default=\"#ffd595\" value=\"#FFEEFF\">\n<Variable name=\"sidebarTitleTextColor\" description=\"Sidebar Title Text Color\"\ntype=\"color\" default=\"#333333\" value=\"#333333\">\n<Variable name=\"bodyFont\" description=\"Text Font\"\ntype=\"font\" default=\"normal normal 100% Verdana, Arial, Sans-serif;\" value=\"normal normal 100% Verdana, Arial, Sans-serif;\">\n<Variable name=\"headerFont\" description=\"Page Header Font\"\ntype=\"font\" default=\"normal normal 210% Verdana, Arial, Sans-serif;\" value=\"normal normal 210% Verdana, Arial, Sans-serif;\">\n<Variable name=\"startSide\" description=\"Start side in blog language\"\ntype=\"automatic\" default=\"left\" value=\"left\">\n<Variable name=\"endSide\" description=\"End side in blog language\"\ntype=\"automatic\" default=\"right\" value=\"right\">\n*/\nbody {\nbackground: $bgColor;\nmargin: 0;\npadding: 0px;\nfont: Verdana, Arial;\ntext-align: center;\ncolor: $textColor;\n\n}\na:link {\ncolor: $linkColor;\n}\na:visited {\ncolor: $linkColor;\n}\na img {\nborder-width: 0;\n}\n#outer-wrapper { \nfont: $bodyFont;\n}\n/* Header\n----------------------------------------------- */\n#header-wrapper {\nmargin:0;\npadding: 0;\nbackground-color: $headerCornersColor;\ntext-align: $startSide;\n}\n#header {\nmargin: 0 2%;\nbackground-color: $headerBgColor;\ncolor: $headerTextColor;\npadding: 0;\nfont: $headerFont;\nposition: relative;\n}\nh1.title {\npadding-top: 38px;\nmargin: 0 1% .1em;\nline-height: 1.2em;\nfont-size: 100%;\n}\nh1.title a, h1.title a:visited {\ncolor: $headerTextColor;\ntext-decoration: none;\n}\n.mograblog pre, .mograblog pre.prettyprint{\nbackground: #FFEEFF;\npadding:15px; \nborder-radius:5px;\nborder:none;\n}\n\n.mograblog .warning{\n    background-color:#fcf8e3;\npadding:20px 80px; color:#c09853;\n}\n\n.mograblog .warning:before{\ncontent: \"\\f071\";\nfont-family: FontAwesome;\ndisplay: inline-block;\nposition: absolute;\nmargin-left: -40px;\nfont-size: 20px;\nmargin-top: 10px;\n\n}\n\n\n.mograblog .info{\n    background-color:#d9edf7;\npadding:20px 80px; color:#337ab7;\n}\n\n.mograblog .info:before{\ncontent: \"\\f05a\";\nfont-family: FontAwesome;\ndisplay: inline-block;\nposition: absolute;\nmargin-left: -40px;\nfont-size: 20px;\nmargin-top: 10px;\n\n}\n\n.mograblog .info a, .mograblog .warning a {\n    text-decoration:underline;\n}\n\n.mograblog .highlight{\n    background-color:yellow;\n}\n\n.mograblog .gist-file .highlight{\nbackground-color:transparent;\n}\n\n#header .description {\ndisplay: block;\nmargin: 0 1%;\npadding: 0 0 40px;\nline-height: 1.4em;\nfont-size: 50%;\n}\n/* Content\n----------------------------------------------- */\n.clear { \nclear: both;\n}\n#content-wrapper {\nmargin: 0 2%;\npadding: 0 0 15px;\ntext-align: $startSide;\nbackground-color: $mainBgColor;\nborder: 1px solid $borderColor;\nborder-top: 0;\n}\n#main-wrapper {\nmargin-$startSide: 1%;\nwidth: 64%;\nfloat: $startSide;\nbackground-color: $mainBgColor;\ndisplay: inline;       /* fix for doubling margin in IE */\nword-wrap: break-word; /* fix for long text breaking sidebar float in IE */\noverflow: hidden;      /* fix for long non-text content breaking IE sidebar float */\n}\n#sidebar-wrapper {\nmargin-$endSide: 1%;\nwidth: 29%;\nfloat: $endSide;\nbackground-color: $mainBgColor;\ndisplay: inline;       /* fix for doubling margin in IE */\nword-wrap: break-word; /* fix for long text breaking sidebar float in IE */\noverflow: hidden;      /* fix for long non-text content breaking IE sidebar float */\n}\n/* Headings\n----------------------------------------------- */\nh2, h3 {\nmargin: 0;\n}\n/* Posts\n----------------------------------------------- */\n.date-header {\nmargin: 1.5em 0 0;\nfont-weight: normal;\ncolor: $dateHeaderColor;\nfont-size: 100%;\n}\n.post {\nmargin: 0 0 1.5em;\npadding-bottom: 1.5em;\n}\n.post-title {\nmargin: 0;\npadding: 0;\nfont-size: 125%;\nfont-weight: bold;\nline-height: 1.1em;\n}\n.post-title a, .post-title a:visited, .post-title strong {\ntext-decoration: none;\ncolor: $textColor;\nfont-weight: bold;\n}\n.post div {\nmargin: 0 0 .75em;\nline-height: 1.3em;\n}\n.post h1, .post h2, .post h3, .post h4 { line-height:1em; }\n.post-footer {\nmargin: -.25em 0 0;\ncolor: $textColor;\nfont-size: 87%;\n}\n.post-footer .span {\nmargin-$endSide: .3em;\n}\n.post img, table.tr-caption-container {\npadding: 4px;\nborder: 1px solid $borderColor;\n}\n.tr-caption-container img {\nborder: none;\npadding: 0;\n}\n.post blockquote {\nmargin: 1em 20px;\n}\n.post blockquote p {\nmargin: .75em 0;\n}\n/* Comments\n----------------------------------------------- */\n#comments h4 {\nmargin: 1em 0;\ncolor: $dateHeaderColor;\n}\n#comments h4 strong {\nfont-size: 110%;\n}\n#comments-block {\nmargin: 1em 0 1.5em;\nline-height: 1.3em;\n}\n#comments-block dt {\nmargin: .5em 0;\n}\n#comments-block dd {\nmargin: .25em 0 0;\n}\n#comments-block dd.comment-footer {\nmargin: -.25em 0 2em;\nline-height: 1.4em;\nfont-size: 78%;\n}\n#comments-block dd p {\nmargin: 0 0 .75em;\n}\n.deleted-comment {\nfont-style:italic;\ncolor:gray;\n}\n.feed-links {\nclear: both;\nline-height: 2.5em;\n}\n#blog-pager-newer-link {\nfloat: $startSide;\n}\n#blog-pager-older-link {\nfloat: $endSide;\n}\n#blog-pager {   \ntext-align: center; \n}\n/* Sidebar Content\n----------------------------------------------- */\n.sidebar h2 {\nmargin: 1.6em 0 .5em;\npadding: 4px 5px;\nbackground-color: $sidebarTitleBgColor;\nfont-size: 100%;\ncolor: $sidebarTitleTextColor;\n}\n.sidebar ul {\nmargin: 0;\npadding: 0;\nlist-style: none;\n}\n.sidebar li {\nmargin: 0;\npadding-top: 0;\npadding-$endSide: 0;\npadding-bottom: .5em;\npadding-$startSide: 15px;\ntext-indent: -15px;\nline-height: 1.5em;\n}\n.sidebar {\ncolor: $textColor;\nline-height:1.3em; \n}\n.sidebar .widget { \nmargin-bottom: 1em;\n}\n.sidebar .widget-content {\nmargin: 0 5px;\n}\n/* Profile \n----------------------------------------------- */\n.profile-img { \nfloat: $startSide;\nmargin-top: 0;\nmargin-$endSide: 5px;\nmargin-bottom: 5px;\nmargin-$startSide: 0;\npadding: 4px;\nborder: 1px solid $borderColor;\n}\n.profile-data {\nmargin:0;\ntext-transform:uppercase;\nletter-spacing:.1em;\nfont-weight: bold;\nline-height: 1.6em;\nfont-size: 78%;\n}\n.profile-datablock {\nmargin:.5em 0 .5em;\n}\n.profile-textblock {\nmargin: 0.5em 0;\nline-height: 1.6em;\n}\n/* Footer\n----------------------------------------------- */\n#footer {\nclear: both;\ntext-align: center;\ncolor: $textColor;\n}\n#footer .widget {\nmargin:.5em;\npadding-top: 20px;\nfont-size: 85%;\nline-height: 1.5em;\ntext-align: $startSide;\n}\n/** Page structure tweaks for layout editor wireframe */\nbody#layout #header { \nwidth: 750px;\n}\n/** Guy - for highlight **/\n.dp-highlighter\n{\nfont-family: \"Consolas\", \"Monaco\", \"Courier New\", Courier, monospace;\nfont-size: 12px;\nbackground-color: #E7E5DC;\nwidth: 99%;\noverflow: auto;\nmargin: 18px 0 18px 0 !important;\npadding-top: 1px; /* adds a little border on top when controls are hidden */\n}\n/* clear styles */\n.dp-highlighter ol,\n.dp-highlighter ol li,\n.dp-highlighter ol li span \n{\nmargin: 0;\npadding: 0;\nborder: none;\n}\n.dp-highlighter a,\n.dp-highlighter a:hover\n{\nbackground: none;\nborder: none;\npadding: 0;\nmargin: 0;\n}\n.dp-highlighter .bar\n{\npadding-left: 45px;\n}\n.dp-highlighter.collapsed .bar,\n.dp-highlighter.nogutter .bar\n{\npadding-left: 0px;\n}\n.dp-highlighter ol\n{\nlist-style: decimal; /* for ie */\nbackground-color: #fff;\nmargin: 0px 0px 1px 45px !important; /* 1px bottom margin seems to fix occasional Firefox scrolling */\npadding: 0px;\ncolor: #5C5C5C;\n}\n.dp-highlighter.nogutter ol,\n.dp-highlighter.nogutter ol li\n{\nlist-style: none !important;\nmargin-left: 0px !important;\n}\n.dp-highlighter ol li,\n.dp-highlighter .columns div\n{\nlist-style: decimal-leading-zero; /* better look for others, override cascade from OL */\nlist-style-position: outside !important;\nborder-left: 3px solid #6CE26C;\nbackground-color: #F8F8F8;\ncolor: #5C5C5C;\npadding: 0 3px 0 10px !important;\nmargin: 0 !important;\nline-height: 14px;\n}\n.dp-highlighter.nogutter ol li,\n.dp-highlighter.nogutter .columns div\n{\nborder: 0;\n}\n.dp-highlighter .columns\n{\nbackground-color: #F8F8F8;\ncolor: gray;\noverflow: hidden;\nwidth: 100%;\n}\n.dp-highlighter .columns div\n{\npadding-bottom: 5px;\n}\n.dp-highlighter ol li.alt\n{\nbackground-color: #FFF;\ncolor: inherit;\n}\n.dp-highlighter ol li span\n{\ncolor: black;\nbackground-color: inherit;\n}\n/* Adjust some properties when collapsed */\n.dp-highlighter.collapsed ol\n{\nmargin: 0px;\n}\n.dp-highlighter.collapsed ol li\n{\ndisplay: none;\n}\n/* Additional modifications when in print-view */\n.dp-highlighter.printing\n{\nborder: none;\n}\n.dp-highlighter.printing .tools\n{\ndisplay: none !important;\n}\n.dp-highlighter.printing li\n{\ndisplay: list-item !important;\n}\n/* Styles for the tools */\n.dp-highlighter .tools\n{\npadding: 3px 8px 3px 10px;\nfont: 9px Verdana, Geneva, Arial, Helvetica, sans-serif;\ncolor: silver;\nbackground-color: #f8f8f8;\npadding-bottom: 10px;\nborder-left: 3px solid #6CE26C;\n}\n.dp-highlighter.nogutter .tools\n{\nborder-left: 0;\n}\n.dp-highlighter.collapsed .tools\n{\nborder-bottom: 0;\n}\n.dp-highlighter .tools a\n{\nfont-size: 9px;\ncolor: #a0a0a0;\nbackground-color: inherit;\ntext-decoration: none;\nmargin-right: 10px;\n}\n.dp-highlighter .tools a:hover\n{\ncolor: red;\nbackground-color: inherit;\ntext-decoration: underline;\n}\n/* About dialog styles */\n.dp-about { background-color: #fff; color: #333; margin: 0px; padding: 0px; }\n.dp-about table { width: 100%; height: 100%; font-size: 11px; font-family: Tahoma, Verdana, Arial, sans-serif !important; }\n.dp-about td { padding: 10px; vertical-align: top; }\n.dp-about .copy { border-bottom: 1px solid #ACA899; height: 95%; }\n.dp-about .title { color: red; background-color: inherit; font-weight: bold; }\n.dp-about .para { margin: 0 0 4px 0; }\n.dp-about .footer { background-color: #ECEADB; color: #333; border-top: 1px solid #fff; text-align: right; }\n.dp-about .close { font-size: 11px; font-family: Tahoma, Verdana, Arial, sans-serif !important; background-color: #ECEADB; color: #333; width: 60px; height: 22px; }\n/* Language specific styles */\n.dp-highlighter .comment, .dp-highlighter .comments { color: #008200; background-color: inherit; }\n.dp-highlighter .string { color: blue; background-color: inherit; }\n.dp-highlighter .keyword { color: #069; font-weight: bold; background-color: inherit; }\n.dp-highlighter .preprocessor { color: gray; background-color: inherit; }\n\n.PopularPosts .widget-content ul li { text-indent:0; }\n#navbar.navbar.section{ margin-bottom:0;}\n\n#header-inner{\nheight:100px;\n}\n#header-inner img{\n\tmargin: 0 auto;\n\theight: 100px;\n\twidth: 500px;\n\tfloat: none;\n\n}\n\n\n\n@media screen and (min-width: 1400px) {\n\t#AdSense1 { \n\t\tposition: absolute;\ntop:0;\nright:0;\n\t}\n  \n     #header-inner img{\n\t      margin: 0 auto;\n\t      height: 100px;\n\t      width: 500px;\n\t      float: left;\n\n     }\n\n}\n\n@media screen and (max-width: 1000px) {\n    #AdSense1{ display:none; }\n\t#main-wrapper{ width:100% }\n\t#sidebar-wrapper{ width:0; display:none; }\n}\n\n#lergoPromotion a{  \nbackground: #f26300;\nwidth:400px;\ndisplay:block;\nheight:100px;\nborder-radius:10px;\ntext-align:center;\npadding-top:30px;\nmargin:30px auto 0 auto;\nfont-size:20px;\ncolor:white;\n\n   \n}\n\n\n    ]]></b:skin>\n    <link href='http://1.bp.blogspot.com/_J3A8WqpdCX0/S82n8yrt2VI/AAAAAAAAAbo/FFO5Ulfn7OQ/s1600/mogi_on_blogger.png' rel='shortcut icon'/>\n    <link href='http://1.bp.blogspot.com/_J3A8WqpdCX0/S82n8yrt2VI/AAAAAAAAAbo/FFO5Ulfn7OQ/s1600/mogi_on_blogger.png' rel='icon'/>\n    <script type='text/javascript'>\n      var _gaq = _gaq || [];\n      _gaq.push([&#39;_setAccount&#39;, &#39;UA-17259014-2&#39;]);\n                 _gaq.push([&#39;_trackPageview&#39;]);\n                 (function() {\n                 var ga = document.createElement(&#39;script&#39;); ga.type = &#39;text/javascript&#39;; ga.async = true;\n                 ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;;\n                 var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(ga, s);\n                 })();\n    </script>\n    <script type='text/javascript'>\n      var _gaq = _gaq || [];\n      _gaq.push([&#39;_setAccount&#39;, &#39;UA-17259014-1&#39;]);\n                 _gaq.push([&#39;_setDomainName&#39;, &#39;.blogspot.com&#39;]);\n                 _gaq.push([&#39;_trackPageview&#39;]);\n                 (function() {\n                 var ga = document.createElement(&#39;script&#39;); ga.type = &#39;text/javascript&#39;; ga.async = true;\n                 ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;;\n                 var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(ga, s);\n                 })();\n    </script>\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAYzliUGUyYmJlVmM' type='text/javascript'/>\n    <!-- lang-apollo.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAdGo4Vkw1c0txeEE' type='text/javascript'/>\n    <!-- lang-clj.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAVkUzOXoyUmRTRW8' type='text/javascript'/>\n    <!-- lang-css.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcARDZleTJhMHNQNzQ' type='text/javascript'/>\n    <!-- lang-go.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAdDJidGlTa0t0UDA' type='text/javascript'/>\n    <!-- lang-hs.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcANzBvaVpEa2hzYVE' type='text/javascript'/>\n    <!-- lang-lisp.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAZ3hSRFpyOWpneFk' type='text/javascript'/>\n    <!-- lang-lua.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAd2hfdFJwNC1TODQ' type='text/javascript'/>\n    <!-- lang-ml.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAOXlNWElEQnFmRzA' type='text/javascript'/>\n    <!-- lang-n.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAbm9sdnRaSWk0RXM' type='text/javascript'/>\n    <!-- lang-proto.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcATm9QTFZvRnJIeHc' type='text/javascript'/>\n    <!-- lang-scala.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcATERSU3ZBRU5lLW8' type='text/javascript'/>\n    <!-- lang-sql.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAZDJFa01UbXkxbWM' type='text/javascript'/>\n    <!-- lang-tex.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAaXBzTHYtNDVFV2M' type='text/javascript'/>\n    <!-- lang-vb.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAdHVFWkpHMU9HZHM' type='text/javascript'/>\n    <!-- lang-vhdl.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAaFVyUHhjLW00N2M' type='text/javascript'/>\n    <!-- lang-wiki.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAYWItTmlsT1MyS2c' type='text/javascript'/>\n    <!-- lang-xq.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAa0pvNDZNSTBreGc' type='text/javascript'/>\n    <!-- lang-yaml.js -->\n    <script src='https://googledrive.com/host/0BzBTj4P1uKcAUDNjYnRFQXNfN3M' type='text/javascript'/>\n    <!-- prettify.js -->\n    <link href='https://googledrive.com/host/0BzBTj4P1uKcASXJVVkhkWjlRX2M' rel='stylesheet' type='text/css'/>\n    <!-- prettify.css -->\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shCore.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushBash.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushCpp.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushCSharp.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushCss.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushDelphi.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushJava.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushJScript.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushPhp.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushPython.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushRuby.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushSql.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushVb.js' type='text/javascript'/>\n    <script src='http://syntaxhighlighter.googlecode.com/svn/trunk/Scripts/shBrushXml.js' type='text/javascript'/>\n    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js' type='text/javascript'/>\n    <script>\n      $(function(){\n        try{\n          $(\".autopre pre\").addClass(\"prettyprint\");\n          prettyPrint();\n        }catch(e){ console.log([\"problems with pretty print\",e])}\n      });\n    </script>\n  </head>\n  <body>\n    <!--<b:section class='navbar' id='navbar' maxwidgets='1' showaddelement='no'>\n      <b:widget id='Navbar1' locked='true' title='Navbar' type='Navbar'>\n        <b:includable id='main'><script type=\"text/javascript\">\n    function setAttributeOnload(object, attribute, val) {\n      if(window.addEventListener) {\n        window.addEventListener(&#39;load&#39;,\n          function(){ object[attribute] = val; }, false);\n      } else {\n        window.attachEvent(&#39;onload&#39;, function(){ object[attribute] = val; });\n      }\n    }\n  </script>\n<div id=\"navbar-iframe-container\"></div>\n<script type=\"text/javascript\" src=\"https://apis.google.com/js/plusone.js\"></script>\n<script type=\"text/javascript\">\n        gapi.load(\"iframes-styles-bubble\", function() {\n          if (window.iframes && iframes.open) {\n            iframes.open(\n                &#39;//draft.blogger.com/navbar.g?targetBlogID\\0757135654868651822449\\46blogName\\75MograBlog\\46publishMode\\75PUBLISH_MODE_HOSTED\\46navbarType\\75BLACK\\46layoutType\\75LAYOUTS\\46searchRoot\\75http://www.mograblog.com/search\\46blogLocale\\75en\\46v\\0752\\46homepageUrl\\75http://www.mograblog.com/\\46blogFollowUrl\\75https://plus.google.com/114700847172950883306\\46vt\\75-6371536238095187259&#39;,\n                {\n                  container: \"navbar-iframe-container\",\n                  id: \"navbar-iframe\"\n                },\n                {\n                });\n          }\n        });\n      </script><script type=\"text/javascript\">\n(function() {\nvar script = document.createElement(&#39;script&#39;);\nscript.type = &#39;text/javascript&#39;;\nscript.src = &#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js&#39;;\nvar head = document.getElementsByTagName(&#39;head&#39;)[0];\nif (head) {\nhead.appendChild(script);\n}})();\n</script>\n</b:includable>\n      </b:widget>\n    </b:section>-->\n    <div id='outer-wrapper'>\n      <div id='wrap2'>\n        <!-- skip links for text browsers -->\n        <span id='skiplinks' style='display:none;'>\n          <a href='#main'>\n            skip to main \n          </a>\n          |\n          <a href='#sidebar'>\n            skip to sidebar\n          </a>\n        </span>\n        <div id='header-wrapper'>\n          <b:section class='header' id='header' maxwidgets='1' showaddelement='no'>\n            <b:widget id='Header1' locked='true' title='MograBlog (Header)' type='Header'>\n              <b:includable id='main'>\n                <b:if cond='data:useImage'>\n                  <b:if cond='data:imagePlacement == \"BEHIND\"'>\n                    <!--\nShow image as background to text. You can't really calculate the width\nreliably in JS because margins are not taken into account by any of\nclientWidth, offsetWidth or scrollWidth, so we don't force a minimum\nwidth if the user is using shrink to fit.\nThis results in a margin-width's worth of pixels being cropped. If the\nuser is not using shrink to fit then we expand the header.\n-->\n                    <b:if cond='data:mobile'>\n                      <div id='header-inner'>\n                        <div class='titlewrapper' style='background: transparent'>\n                          <h1 class='title' style='background: transparent; border-width: 0px'>\n                            <b:include name='title'/>\n                          </h1>\n                        </div>\n                        <b:include name='description'/>\n                      </div>\n                      <b:else/>\n                      <div expr:style='\"background-image: url(\\\"\" + data:sourceUrl + \"\\\"); \"                        + \"background-position: \"                        + data:backgroundPositionStyleStr + \"; \"                        + data:widthStyleStr                        + \"min-height: \" + data:height                        + \"_height: \" + data:height                        + \"background-repeat: no-repeat; \"' id='header-inner'>\n                        <div class='titlewrapper' style='background: transparent'>\n                          <h1 class='title' style='background: transparent; border-width: 0px'>\n                            <b:include name='title'/>\n                          </h1>\n                        </div>\n                        <b:include name='description'/>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <!--Show the image only-->\n                    <div id='header-inner'>\n                      <a expr:href='data:blog.homepageUrl' style='display: block'>\n                        <img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + \"_headerimg\"' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/>\n                      </a>\n                      <!--Show the description-->\n                      <b:if cond='data:imagePlacement == \"BEFORE_DESCRIPTION\"'>\n                        <b:include name='description'/>\n                      </b:if>\n                    </div>\n                  </b:if>\n                  <b:else/>\n                  <!--No header image -->\n                  <div id='header-inner'>\n                    <div class='titlewrapper'>\n                      <h1 class='title'>\n                        <b:include name='title'/>\n                      </h1>\n                    </div>\n                    <b:include name='description'/>\n                  </div>\n                </b:if>\n              </b:includable>\n              <b:includable id='description'>\n                <div class='descriptionwrapper'>\n                  <p class='description'>\n                    <span>\n                      <data:description/>\n                    </span>\n                  </p>\n                </div>\n              </b:includable>\n              <b:includable id='title'>\n                <b:if cond='data:blog.url == data:blog.homepageUrl'>\n                  <data:title/>\n                  <b:else/>\n                  <a expr:href='data:blog.homepageUrl'>\n                    <data:title/>\n                  </a>\n                </b:if>\n              </b:includable>\n            </b:widget>\n          </b:section>\n        </div>\n        <div id='content-wrapper'>\n          <div id='crosscol-wrapper' style='text-align:center'>\n            <b:section class='crosscol' id='crosscol'>\n              <b:widget id='AdSense1' locked='false' title='' type='AdSense'>\n                <b:includable id='main'>\n                  <div class='widget-content'>\n                    <b:if cond='data:blog.disableAdSenseWidget != \"true\"'>\n                      <data:adCode/>\n                    </b:if>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n              </b:widget>\n            </b:section>\n          </div>\n         <!--<div id='lergoPromotion'>\n           <a href='http://igg.me/at/LerGO-Free-Kids-Education' target='_blank'>\n             LerGO - Free Kids&#39; Education<br/>\n             Help us give all kids free access to animated & interactive lessons!\n           </a>\n          </div>-->\n          <div id='main-wrapper'>\n            \n            <b:section class='main' id='main' showaddelement='no'>\n              <b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'>\n                <b:includable id='main' var='top'>\n                  <b:if cond='data:mobile == \"false\"'>\n                    <!-- posts -->\n                    <div class='blog-posts hfeed'>\n                      <b:include data='top' name='status-message'/>\n                      <data:defaultAdStart/>\n                      <b:loop values='data:posts' var='post'>\n                        <b:if cond='data:post.isDateStart'>\n                          <b:if cond='data:post.isFirstPost == \"false\"'>\n                            </div></div>\n                          </b:if>\n                        </b:if>\n                        <b:if cond='data:post.isDateStart'>\n                          <div class=\"date-outer\">\n                        </b:if>\n                        <b:if cond='data:post.dateHeader'>\n                          <h2 class='date-header'>\n                            <span>\n                              <data:post.dateHeader/>\n                            </span>\n                          </h2>\n                        </b:if>\n                        <b:if cond='data:post.isDateStart'>\n                          <div class=\"date-posts\">\n                        </b:if>\n                        <div class='post-outer'>\n                          <b:include data='post' name='post'/>\n                          <b:if cond='data:blog.pageType == \"static_page\"'>\n                            <b:include data='post' name='comment_picker'/>\n                          </b:if>\n                          <b:if cond='data:blog.pageType == \"item\"'>\n                            <b:include data='post' name='comment_picker'/>\n                          </b:if>\n                        </div>\n                        <b:if cond='data:post.includeAd'>\n                          <b:if cond='data:post.isFirstPost'>\n                            <data:defaultAdEnd/>\n                            <b:else/>\n                            <data:adEnd/>\n                          </b:if>\n                          <div class='inline-ad'>\n                            <data:adCode/>\n                          </div>\n                          <data:adStart/>\n                        </b:if>\n                      </b:loop>\n                      <b:if cond='data:numPosts != 0'>\n                        </div></div>\n                      </b:if>\n                      <data:adEnd/>\n                    </div>\n                    <!-- navigation -->\n                    <b:include name='nextprev'/>\n                    <!-- feed links -->\n                    <b:include name='feedLinks'/>\n                    <b:if cond='data:top.showStars'>\n                      <script src='//www.google.com/jsapi' type='text/javascript'/>\n                      <script type='text/javascript'>\n                        google.load(\"annotations\", \"1\", {\"locale\": \"<data:top.languageCode/>\"});\n                        function initialize() {\n                          google.annotations.setApplicationId(<data:top.blogspotReviews/>);\n                          google.annotations.createAll();\n                          google.annotations.fetch();\n                        }\n                        google.setOnLoadCallback(initialize);\n                      </script>\n                    </b:if>\n                    <b:else/>\n                    <b:include name='mobile-main'/>\n                  </b:if>\n                  <b:if cond='data:top.showDummy'>\n                    <data:top.dummyBootstrap/>\n                  </b:if>\n                </b:includable>\n                <b:includable id='backlinkDeleteIcon' var='backlink'>\n                  <span expr:class='\"item-control \" + data:backlink.adminClass'>\n                    <a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'>\n                      <img src='//www.blogger.com/img/icon_delete13.gif'/>\n                    </a>\n                  </span>\n                </b:includable>\n                <b:includable id='backlinks' var='post'>\n                  <a name='links'/>\n                  <h4>\n                    <data:post.backlinksLabel/>\n                  </h4>\n                  <b:if cond='data:post.numBacklinks != 0'>\n                    <dl class='comments-block' id='comments-block'>\n                      <b:loop values='data:post.backlinks' var='backlink'>\n                        <div class='collapsed-backlink backlink-control'>\n                          <dt class='comment-title'>\n                            <span class='backlink-toggle-zippy'>\n                              &#160;\n                            </span>\n                            <a expr:href='data:backlink.url' rel='nofollow'>\n                              <data:backlink.title/>\n                            </a>\n                            <b:include data='backlink' name='backlinkDeleteIcon'/>\n                          </dt>\n                          <dd class='comment-body collapseable'>\n                            <data:backlink.snippet/>\n                          </dd>\n                          <dd class='comment-footer collapseable'>\n                            <span class='comment-author'>\n                              <data:post.authorLabel/>\n                              <data:backlink.author/>\n                            </span>\n                            <span class='comment-timestamp'>\n                              <data:post.timestampLabel/>\n                              <data:backlink.timestamp/>\n                            </span>\n                          </dd>\n                        </div>\n                      </b:loop>\n                    </dl>\n                  </b:if>\n                  <p class='comment-footer'>\n                    <a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + \"_backlinks-create-link\"' target='_blank'>\n                      <data:post.createLinkLabel/>\n                    </a>\n                  </p>\n                </b:includable>\n                <b:includable id='comment-form' var='post'>\n                  <div class='comment-form'>\n                    <a name='comment-form'/>\n                    <b:if cond='data:mobile'>\n                      <h4 id='comment-post-message'>\n                        <a expr:id='data:widget.instanceId + \"_comment-editor-toggle-link\"' href='javascript:void(0)'>\n                          <data:postCommentMsg/>\n                        </a>\n                      </h4>\n                      <p>\n                        <data:blogCommentMessage/>\n                      </p>\n                      <data:blogTeamBlogMessage/>\n                      <a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/>\n                      <iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/>\n                      <b:else/>\n                      <h4 id='comment-post-message'>\n                        <data:postCommentMsg/>\n                      </h4>\n                      <p>\n                        <data:blogCommentMessage/>\n                      </p>\n                      <data:blogTeamBlogMessage/>\n                      <a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/>\n                      <iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/>\n                    </b:if>\n                    <data:post.friendConnectJs/>\n                    <data:post.cmtfpIframe/>\n                    <script type='text/javascript'>\n                      BLOG_CMT_createIframe(&#39;<data:post.appRpcRelayPath/>&#39;, &#39;<data:post.communityId/>&#39;);\n                    </script>\n                  </div>\n                </b:includable>\n                <b:includable id='commentDeleteIcon' var='comment'>\n                  <span expr:class='\"item-control \" + data:comment.adminClass'>\n                    <b:if cond='data:showCmtPopup'>\n                      <div class='goog-toggle-button'>\n                        <div class='goog-inline-block comment-action-icon'/>\n                      </div>\n                      <b:else/>\n                      <a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'>\n                        <img src='//www.blogger.com/img/icon_delete13.gif'/>\n                      </a>\n                    </b:if>\n                  </span>\n                </b:includable>\n                <b:includable id='comment_count_picker' var='post'>\n                  <b:if cond='data:post.commentSource == 1'>\n                    <span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.canonicalUrl'>\n                    </span>\n                    <b:else/>\n                    <a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'>\n                      <data:post.commentLabelFull/>\n                      :\n                    </a>\n                  </b:if>\n                </b:includable>\n                <b:includable id='comment_picker' var='post'>\n                  <b:if cond='data:post.commentSource == 1'>\n                    <b:include data='post' name='iframe_comments'/>\n                    <b:else/>\n                    <b:if cond='data:post.showThreadedComments'>\n                      <b:include data='post' name='threaded_comments'/>\n                      <b:else/>\n                      <b:include data='post' name='comments'/>\n                    </b:if>\n                  </b:if>\n                </b:includable>\n                <b:includable id='comments' var='post'>\n                  <div class='comments' id='comments'>\n                    <a name='comments'/>\n                    <b:if cond='data:post.allowComments'>\n                      <h4>\n                        <data:post.commentLabelFull/>\n                        :\n                      </h4>\n                      <b:if cond='data:post.commentPagingRequired'>\n                        <span class='paging-control-container'>\n                          <b:if cond='data:post.hasOlderLinks'>\n                            <a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'>\n                              <data:post.oldestLinkText/>\n                            </a>\n                            &#160;\n                            <a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'>\n                              <data:post.olderLinkText/>\n                            </a>\n                            &#160;\n                          </b:if>\n                          <data:post.commentRangeText/>\n                          <b:if cond='data:post.hasNewerLinks'>\n                            &#160;\n                            <a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'>\n                              <data:post.newerLinkText/>\n                            </a>\n                            &#160;\n                            <a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'>\n                              <data:post.newestLinkText/>\n                            </a>\n                          </b:if>\n                        </span>\n                      </b:if>\n                      <div expr:id='data:widget.instanceId + \"_comments-block-wrapper\"'>\n                        <dl expr:class='data:post.avatarIndentClass' id='comments-block'>\n                          <b:loop values='data:post.comments' var='comment'>\n                            <dt expr:class='\"comment-author \" + data:comment.authorClass' expr:id='data:comment.anchorName'>\n                              <b:if cond='data:comment.favicon'>\n                                <img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/>\n                              </b:if>\n                              <a expr:name='data:comment.anchorName'/>\n                              <b:if cond='data:blog.enabledCommentProfileImages'>\n                                <data:comment.authorAvatarImage/>\n                              </b:if>\n                              <b:if cond='data:comment.authorUrl'>\n                                <a expr:href='data:comment.authorUrl' rel='nofollow'>\n                                  <data:comment.author/>\n                                </a>\n                                <b:else/>\n                                <data:comment.author/>\n                              </b:if>\n                              <data:commentPostedByMsg/>\n                            </dt>\n                            <dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'>\n                              <b:if cond='data:comment.isDeleted'>\n                                <span class='deleted-comment'>\n                                  <data:comment.body/>\n                                </span>\n                                <b:else/>\n                                <p>\n                                  <data:comment.body/>\n                                </p>\n                              </b:if>\n                            </dd>\n                            <dd class='comment-footer'>\n                              <span class='comment-timestamp'>\n                                <a expr:href='data:comment.url' title='comment permalink'>\n                                  <data:comment.timestamp/>\n                                </a>\n                                <b:include data='comment' name='commentDeleteIcon'/>\n                              </span>\n                            </dd>\n                          </b:loop>\n                        </dl>\n                      </div>\n                      <b:if cond='data:post.commentPagingRequired'>\n                        <span class='paging-control-container'>\n                          <a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'>\n                            <data:post.oldestLinkText/>\n                          </a>\n                          <a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'>\n                            <data:post.olderLinkText/>\n                          </a>\n                          &#160;\n                          <data:post.commentRangeText/>\n                          &#160;\n                          <a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'>\n                            <data:post.newerLinkText/>\n                          </a>\n                          <a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'>\n                            <data:post.newestLinkText/>\n                          </a>\n                        </span>\n                      </b:if>\n                      <p class='comment-footer'>\n                        <b:if cond='data:post.embedCommentForm'>\n                          <b:if cond='data:post.allowNewComments'>\n                            <b:include data='post' name='comment-form'/>\n                            <b:else/>\n                            <data:post.noNewCommentsText/>\n                          </b:if>\n                          <b:else/>\n                          <b:if cond='data:post.allowComments'>\n                            <a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'>\n                              <data:postCommentMsg/>\n                            </a>\n                          </b:if>\n                        </b:if>\n                      </p>\n                    </b:if>\n                    <b:if cond='data:showCmtPopup'>\n                      <div id='comment-popup'>\n                        <iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'>\n                        </iframe>\n                      </div>\n                    </b:if>\n                    <div id='backlinks-container'>\n                      <div expr:id='data:widget.instanceId + \"_backlinks-container\"'>\n                        <b:if cond='data:post.showBacklinks'>\n                          <b:include data='post' name='backlinks'/>\n                        </b:if>\n                      </div>\n                    </div>\n                  </div>\n                </b:includable>\n                <b:includable id='feedLinks'>\n                  <b:if cond='data:blog.pageType != \"item\"'>\n                    <!-- Blog feed links -->\n                    <b:if cond='data:feedLinks'>\n                      <div class='blog-feeds'>\n                        <b:include data='feedLinks' name='feedLinksBody'/>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <!--Post feed links -->\n                    <div class='post-feeds'>\n                      <b:loop values='data:posts' var='post'>\n                        <b:if cond='data:post.allowComments'>\n                          <b:if cond='data:post.feedLinks'>\n                            <b:include data='post.feedLinks' name='feedLinksBody'/>\n                          </b:if>\n                        </b:if>\n                      </b:loop>\n                    </div>\n                  </b:if>\n                </b:includable>\n                <b:includable id='feedLinksBody' var='links'>\n                  <div class='feed-links'>\n                    <data:feedLinksMsg/>\n                    <b:loop values='data:links' var='f'>\n                      <a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'>\n                        <data:f.name/>\n                        (\n                        <data:f.feedType/>\n                        )\n                      </a>\n                    </b:loop>\n                  </div>\n                </b:includable>\n                <b:includable id='iframe_comments' var='post'>\n                  <b:if cond='data:post.allowIframeComments'>\n                    <script expr:src='data:post.iframeCommentSrc' type='text/javascript'/>\n                    <div class='cmt_iframe_holder' expr:data-href='data:post.canonicalUrl' expr:data-viewtype='data:post.viewType'/>\n                    <b:if cond='data:post.embedCommentForm == \"false\"'>\n                      <a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'>\n                        <data:postCommentMsg/>\n                      </a>\n                    </b:if>\n                  </b:if>\n                </b:includable>\n                <b:includable id='mobile-index-post' var='post'>\n                  <div class='mobile-date-outer date-outer'>\n                    <b:if cond='data:post.dateHeader'>\n                      <div class='date-header'>\n                        <span>\n                          <data:post.dateHeader/>\n                        </span>\n                      </div>\n                    </b:if>\n                    <div class='mobile-post-outer'>\n                      <a expr:href='data:post.url'>\n                        <h3 class='mobile-index-title entry-title' itemprop='name'>\n                          <data:post.title/>\n                        </h3>\n                        <div class='mobile-index-arrow'>\n                          &rsaquo;\n                        </div>\n                        <div class='mobile-index-contents'>\n                          <b:if cond='data:post.thumbnailUrl'>\n                            <div class='mobile-index-thumbnail'>\n                              <div class='Image'>\n                                <img expr:src='data:post.thumbnailUrl'/>\n                              </div>\n                            </div>\n                          </b:if>\n                          <div class='post-body'>\n                            <b:if cond='data:post.snippet'>\n                              <data:post.snippet/>\n                            </b:if>\n                          </div>\n                        </div>\n                        <div style='clear: both;'/>\n                      </a>\n                      <div class='mobile-index-comment'>\n                        <b:if cond='data:blog.pageType != \"static_page\"'>\n                          <b:if cond='data:post.allowComments'>\n                            <b:if cond='data:post.numComments != 0'>\n                              <b:include data='post' name='comment_count_picker'/>\n                            </b:if>\n                          </b:if>\n                        </b:if>\n                      </div>\n                    </div>\n                  </div>\n                </b:includable>\n                <b:includable id='mobile-main' var='top'>\n                  <!-- posts -->\n                  <div class='blog-posts hfeed'>\n                    <b:include data='top' name='status-message'/>\n                    <b:if cond='data:blog.pageType == \"index\"'>\n                      <b:loop values='data:posts' var='post'>\n                        <b:include data='post' name='mobile-index-post'/>\n                      </b:loop>\n                      <b:else/>\n                      <b:loop values='data:posts' var='post'>\n                        <b:include data='post' name='mobile-post'/>\n                      </b:loop>\n                    </b:if>\n                  </div>\n                  <b:include name='mobile-nextprev'/>\n                </b:includable>\n                <b:includable id='mobile-nextprev'>\n                  <div class='blog-pager' id='blog-pager'>\n                    <b:if cond='data:newerPageUrl'>\n                      <div class='mobile-link-button' id='blog-pager-newer-link'>\n                        <a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + \"_blog-pager-newer-link\"' expr:title='data:newerPageTitle'>\n                          &lsaquo;\n                        </a>\n                      </div>\n                    </b:if>\n                    <b:if cond='data:olderPageUrl'>\n                      <div class='mobile-link-button' id='blog-pager-older-link'>\n                        <a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + \"_blog-pager-older-link\"' expr:title='data:olderPageTitle'>\n                          &rsaquo;\n                        </a>\n                      </div>\n                    </b:if>\n                    <div class='mobile-link-button' id='blog-pager-home-link'>\n                      <a class='home-link' expr:href='data:blog.homepageUrl'>\n                        <data:homeMsg/>\n                      </a>\n                    </div>\n                    <div class='mobile-desktop-link'>\n                      <a class='home-link' expr:href='data:desktopLinkUrl'>\n                        <data:desktopLinkMsg/>\n                      </a>\n                    </div>\n                  </div>\n                  <div class='clear'/>\n                </b:includable>\n                <b:includable id='mobile-post' var='post'>\n                  <div class='date-outer'>\n                    <b:if cond='data:post.dateHeader'>\n                      <h2 class='date-header'>\n                        <span>\n                          <data:post.dateHeader/>\n                        </span>\n                      </h2>\n                    </b:if>\n                    <div class='date-posts'>\n                      <div class='post-outer'>\n                        <div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'>\n                          <b:if cond='data:post.thumbnailUrl'>\n                            <meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/>\n                          </b:if>\n                          <meta expr:content='data:blog.blogId' itemprop='blogId'/>\n                          <meta expr:content='data:post.id' itemprop='postId'/>\n                          <a expr:name='data:post.id'/>\n                          <b:if cond='data:post.title'>\n                            <h3 class='post-title entry-title' itemprop='name'>\n                              <b:if cond='data:post.link'>\n                                <a expr:href='data:post.link'>\n                                  <data:post.title/>\n                                </a>\n                                <b:else/>\n                                <b:if cond='data:post.url'>\n                                  <b:if cond='data:blog.url != data:post.url'>\n                                    <a expr:href='data:post.url'>\n                                      <data:post.title/>\n                                    </a>\n                                    <b:else/>\n                                    <data:post.title/>\n                                  </b:if>\n                                  <b:else/>\n                                  <data:post.title/>\n                                </b:if>\n                              </b:if>\n                            </h3>\n                          </b:if>\n                          <div class='post-header'>\n                            <div class='post-header-line-1'/>\n                          </div>\n                          <div class='post-body entry-content' expr:id='\"post-body-\" + data:post.id' itemprop='articleBody'>\n                            <data:post.body/>\n                            <div style='clear: both;'/>\n                            <!-- clear for photos floats -->\n                          </div>\n                          <div class='post-footer'>\n                            <div class='post-footer-line post-footer-line-1'>\n                              <span class='post-author vcard'>\n                                <b:if cond='data:top.showAuthor'>\n                                  <b:if cond='data:post.authorProfileUrl'>\n                                    <span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'>\n                                      <meta expr:content='data:post.authorProfileUrl' itemprop='url'/>\n                                      <a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'>\n                                        <span itemprop='name'>\n                                          <data:post.author/>\n                                        </span>\n                                      </a>\n                                    </span>\n                                    <b:else/>\n                                    <span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'>\n                                      <span itemprop='name'>\n                                        <data:post.author/>\n                                      </span>\n                                    </span>\n                                  </b:if>\n                                </b:if>\n                              </span>\n                              <span class='post-timestamp'>\n                                <b:if cond='data:top.showTimestamp'>\n                                  <data:top.timestampLabel/>\n                                  <b:if cond='data:post.url'>\n                                    <meta expr:content='data:post.canonicalUrl' itemprop='url'/>\n                                    <a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'>\n                                      <abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'>\n                                        <data:post.timestamp/>\n                                      </abbr>\n                                    </a>\n                                  </b:if>\n                                </b:if>\n                              </span>\n                              <span class='post-comment-link'>\n                                <b:if cond='data:blog.pageType != \"item\"'>\n                                  <b:if cond='data:blog.pageType != \"static_page\"'>\n                                    <b:if cond='data:post.allowComments'>\n                                      <b:include data='post' name='comment_count_picker'/>\n                                    </b:if>\n                                  </b:if>\n                                </b:if>\n                              </span>\n                            </div>\n                            <div class='post-footer-line post-footer-line-2'>\n                              <b:if cond='data:top.showMobileShare'>\n                                <div class='mobile-link-button goog-inline-block' id='mobile-share-button'>\n                                  <a href='javascript:void(0);'>\n                                    <data:shareMsg/>\n                                  </a>\n                                </div>\n                              </b:if>\n                              <b:if cond='data:top.showDummy'>\n                                <div class='goog-inline-block dummy-container'>\n                                  <data:post.dummyTag/>\n                                </div>\n                              </b:if>\n                            </div>\n                          </div>\n                        </div>\n                        <b:if cond='data:blog.pageType == \"static_page\"'>\n                          <b:include data='post' name='comment_picker'/>\n                        </b:if>\n                        <b:if cond='data:blog.pageType == \"item\"'>\n                          <b:include data='post' name='comment_picker'/>\n                        </b:if>\n                      </div>\n                    </div>\n                  </div>\n                </b:includable>\n                <b:includable id='nextprev'>\n                  <div class='blog-pager' id='blog-pager'>\n                    <b:if cond='data:newerPageUrl'>\n                      <span id='blog-pager-newer-link'>\n                        <a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + \"_blog-pager-newer-link\"' expr:title='data:newerPageTitle'>\n                          <data:newerPageTitle/>\n                        </a>\n                      </span>\n                    </b:if>\n                    <b:if cond='data:olderPageUrl'>\n                      <span id='blog-pager-older-link'>\n                        <a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + \"_blog-pager-older-link\"' expr:title='data:olderPageTitle'>\n                          <data:olderPageTitle/>\n                        </a>\n                      </span>\n                    </b:if>\n                    <a class='home-link' expr:href='data:blog.homepageUrl'>\n                      <data:homeMsg/>\n                    </a>\n                    <b:if cond='data:mobileLinkUrl'>\n                      <div class='blog-mobile-link'>\n                        <a expr:href='data:mobileLinkUrl'>\n                          <data:mobileLinkMsg/>\n                        </a>\n                      </div>\n                    </b:if>\n                  </div>\n                  <div class='clear'/>\n                </b:includable>\n                <b:includable id='post' var='post'>\n                  <div class='post hentry uncustomized-post-template'>\n                    <a expr:name='data:post.id'/>\n                    <b:if cond='data:post.title'>\n                      <h3 class='post-title entry-title'>\n                        <b:if cond='data:post.link'>\n                          <a expr:href='data:post.link'>\n                            <data:post.title/>\n                          </a>\n                          <b:else/>\n                          <b:if cond='data:post.url'>\n                            <a expr:href='data:post.url'>\n                              <data:post.title/>\n                            </a>\n                            <b:else/>\n                            <data:post.title/>\n                          </b:if>\n                        </b:if>\n                      </h3>\n                    </b:if>\n                    <div class='post-header'>\n                      <div class='post-header-line-1'/>\n                    </div>\n                    <div class='post-body entry-content'>\n                      <b:if cond='data:blog.pageType == \"item\"'>\n                        <iframe allowTransparency='true' expr:src='\"http://www.facebook.com/plugins/like.php?href=\" + data:post.url + \"&layout=standard&show_faces=false&width=100&action=like&font=arial&colorscheme=light\"' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:450px; height:40px;'/>\n                      </b:if>\n                      <data:post.body/>\n                      <b:if cond='data:blog.pageType == \"item\"'>\n                        <iframe allowTransparency='true' expr:src='\"http://www.facebook.com/plugins/like.php?href=\" + data:post.url + \"&layout=standard&show_faces=false&width=100&action=like&font=arial&colorscheme=light\"' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:450px; height:40px;'/>\n                      </b:if>\n                      <div style='clear: both;'/>\n                      <!-- clear for photos floats -->\n                    </div>\n                    <b:if cond='data:post.hasJumpLink'>\n                      <div class='jump-link'>\n                        <a expr:href='data:post.url + \"#more\"' expr:title='data:post.title'>\n                          <data:post.jumpText/>\n                        </a>\n                      </div>\n                    </b:if>\n                    <div class='post-footer'>\n                      <div class='post-footer-line post-footer-line-1'>\n                        <span class='post-author vcard'>\n                          <b:if cond='data:top.showAuthor'>\n                            <data:top.authorLabel/>\n                            <span class='fn'>\n                              <data:post.author/>\n                            </span>\n                          </b:if>\n                        </span>\n                        <span class='post-timestamp'>\n                          <b:if cond='data:top.showTimestamp'>\n                            <data:top.timestampLabel/>\n                            <b:if cond='data:post.url'>\n                              <a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'>\n                                <abbr class='published' expr:title='data:post.timestampISO8601'>\n                                  <data:post.timestamp/>\n                                </abbr>\n                              </a>\n                            </b:if>\n                          </b:if>\n                        </span>\n                        <span class='reaction-buttons'>\n                          <b:if cond='data:top.showReactions'>\n                            <table border='0' cellpadding='0' cellspacing='0' width='100%'>\n                              <tr>\n                                <td class='reactions-label-cell' nowrap='nowrap' valign='top' width='1%'>\n                                  <span class='reactions-label'>\n                                    <data:top.reactionsLabel/>\n                                  </span>\n                                  &#160;\n                                </td>\n                                <td>\n                                  <iframe allowtransparency='true' class='reactions-iframe' expr:src='data:post.reactionsUrl' frameborder='0' name='reactions' scrolling='no'/>\n                                </td>\n                              </tr>\n                            </table>\n                          </b:if>\n                        </span>\n                        <span class='star-ratings'>\n                          <b:if cond='data:top.showStars'>\n                            <div expr:g:background-color='data:backgroundColor' expr:g:text-color='data:textColor' expr:g:url='data:post.absoluteUrl' g:height='42' g:type='RatingPanel' g:width='280'/>\n                          </b:if>\n                        </span>\n                        <span class='post-comment-link'>\n                          <b:if cond='data:blog.pageType != \"item\"'>\n                            <b:if cond='data:blog.pageType != \"static_page\"'>\n                              <b:if cond='data:post.allowComments'>\n                                <a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'>\n                                  <b:if cond='data:post.numComments == 1'>\n                                    1 \n                                    <data:top.commentLabel/>\n                                    <b:else/>\n                                    <data:post.numComments/>\n                                    <data:top.commentLabelPlural/>\n                                  </b:if>\n                                </a>\n                              </b:if>\n                            </b:if>\n                          </b:if>\n                        </span>\n                        <!-- backlinks -->\n                        <span class='post-backlinks post-comment-link'>\n                          <b:if cond='data:blog.pageType != \"item\"'>\n                            <b:if cond='data:blog.pageType != \"static_page\"'>\n                              <b:if cond='data:post.showBacklinks'>\n                                <a class='comment-link' expr:href='data:post.url + \"#links\"'>\n                                  <data:top.backlinkLabel/>\n                                </a>\n                              </b:if>\n                            </b:if>\n                          </b:if>\n                        </span>\n                        <span class='post-icons'>\n                          <!-- email post links -->\n                          <b:if cond='data:post.emailPostUrl'>\n                            <span class='item-action'>\n                              <a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'>\n                                <img alt='' class='icon-action' height='13' src='http://img1.blogblog.com/img/icon18_email.gif' width='18'/>\n                              </a>\n                            </span>\n                          </b:if>\n                          <!-- quickedit pencil -->\n                          <b:include data='post' name='postQuickEdit'/>\n                        </span>\n                        <!-- share buttons -->\n                        <div class='post-share-buttons'>\n                          <b:include data='post' name='shareButtons'/>\n                        </div>\n                      </div>\n                      <div class='post-footer-line post-footer-line-2'>\n                        <span class='post-labels'>\n                          <b:if cond='data:post.labels'>\n                            <data:postLabelsLabel/>\n                            <b:loop values='data:post.labels' var='label'>\n                              <a expr:href='data:label.url' rel='tag'>\n                                <data:label.name/>\n                              </a>\n                              <b:if cond='data:label.isLast != \"true\"'>\n                                ,\n                              </b:if>\n                            </b:loop>\n                          </b:if>\n                        </span>\n                      </div>\n                      <div class='post-footer-line post-footer-line-3'>\n                        <span class='post-location'>\n                          <b:if cond='data:top.showLocation'>\n                            <b:if cond='data:post.location'>\n                              <data:postLocationLabel/>\n                              <a expr:href='data:post.location.mapsUrl' target='_blank'>\n                                <data:post.location.name/>\n                              </a>\n                            </b:if>\n                          </b:if>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </b:includable>\n                <b:includable id='postQuickEdit' var='post'>\n                  <b:if cond='data:post.editUrl'>\n                    <span expr:class='\"item-control \" + data:post.adminClass'>\n                      <a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'>\n                        <img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>\n                      </a>\n                    </span>\n                  </b:if>\n                </b:includable>\n                <b:includable id='shareButtons' var='post'>\n                  <b:if cond='data:top.showEmailButton'>\n                    <a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + \"&target=email\"' expr:title='data:top.emailThisMsg' target='_blank'>\n                      <span class='share-button-link-text'>\n                        <data:top.emailThisMsg/>\n                      </span>\n                    </a>\n                  </b:if>\n                  <b:if cond='data:top.showBlogThisButton'>\n                    <a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + \"&target=blog\"' expr:onclick='\"window.open(this.href, \\\"_blank\\\", \\\"height=270,width=475\\\"); return false;\"' expr:title='data:top.blogThisMsg' target='_blank'>\n                      <span class='share-button-link-text'>\n                        <data:top.blogThisMsg/>\n                      </span>\n                    </a>\n                  </b:if>\n                  <b:if cond='data:top.showTwitterButton'>\n                    <a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + \"&target=twitter\"' expr:title='data:top.shareToTwitterMsg' target='_blank'>\n                      <span class='share-button-link-text'>\n                        <data:top.shareToTwitterMsg/>\n                      </span>\n                    </a>\n                  </b:if>\n                  <b:if cond='data:top.showFacebookButton'>\n                    <a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + \"&target=facebook\"' expr:onclick='\"window.open(this.href, \\\"_blank\\\", \\\"height=430,width=640\\\"); return false;\"' expr:title='data:top.shareToFacebookMsg' target='_blank'>\n                      <span class='share-button-link-text'>\n                        <data:top.shareToFacebookMsg/>\n                      </span>\n                    </a>\n                  </b:if>\n                  <b:if cond='data:top.showOrkutButton'>\n                    <a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + \"&target=orkut\"' expr:title='data:top.shareToOrkutMsg' target='_blank'>\n                      <span class='share-button-link-text'>\n                        <data:top.shareToOrkutMsg/>\n                      </span>\n                    </a>\n                  </b:if>\n                  <b:if cond='data:top.showDummy'>\n                    <div class='goog-inline-block dummy-container'>\n                      <data:post.dummyTag/>\n                    </div>\n                  </b:if>\n                </b:includable>\n                <b:includable id='status-message'>\n                  <b:if cond='data:navMessage'>\n                    <div class='status-msg-wrap'>\n                      <div class='status-msg-body'>\n                        <data:navMessage/>\n                      </div>\n                      <div class='status-msg-border'>\n                        <div class='status-msg-bg'>\n                          <div class='status-msg-hidden'>\n                            <data:navMessage/>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div style='clear: both;'/>\n                  </b:if>\n                </b:includable>\n                <b:includable id='threaded-comment-form' var='post'>\n                  <div class='comment-form'>\n                    <a name='comment-form'/>\n                    <b:if cond='data:mobile'>\n                      <p>\n                        <data:blogCommentMessage/>\n                      </p>\n                      <data:blogTeamBlogMessage/>\n                      <a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/>\n                      <iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/>\n                      <b:else/>\n                      <p>\n                        <data:blogCommentMessage/>\n                      </p>\n                      <data:blogTeamBlogMessage/>\n                      <a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/>\n                      <iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/>\n                    </b:if>\n                    <data:post.friendConnectJs/>\n                    <data:post.cmtfpIframe/>\n                    <script type='text/javascript'>\n                      BLOG_CMT_createIframe(&#39;<data:post.appRpcRelayPath/>&#39;, &#39;<data:post.communityId/>&#39;);\n                    </script>\n                  </div>\n                </b:includable>\n                <b:includable id='threaded_comment_js' var='post'>\n                  <script async='async' expr:src='data:post.commentSrc' type='text/javascript'/>\n                  <script type='text/javascript'>\n                    (function() {\n                      var items = <data:post.commentJso/>;\n                      var msgs = <data:post.commentMsgs/>;\n                      var config = <data:post.commentConfig/>;\n                      // <![CDATA[\n                      var cursor = null;\n                      if (items && items.length > 0) {\n                        cursor = parseInt(items[items.length - 1].timestamp) + 1;\n                      }\n                      var bodyFromEntry = function(entry) {\n                        if (entry.gd$extendedProperty) {\n                          for (var k in entry.gd$extendedProperty) {\n                            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {\n                              return '<span class=\"deleted-comment\">' + entry.content.$t + '</span>';\n                            }\n                          }\n                        }\n                        return entry.content.$t;\n                      }\n                      var parse = function(data) {\n                        cursor = null;\n                        var comments = [];\n                        if (data && data.feed && data.feed.entry) {\n                          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {\n                            var comment = {};\n                            // comment ID, parsed out of the original id format\n                            var id = /blog-(\\d+).post-(\\d+)/.exec(entry.id.$t);\n                            comment.id = id ? id[2] : null;\n                            comment.body = bodyFromEntry(entry);\n                            comment.timestamp = Date.parse(entry.published.$t) + '';\n                            if (entry.author && entry.author.constructor === Array) {\n                              var auth = entry.author[0];\n                              if (auth) {\n                                comment.author = {\n                                  name: (auth.name ? auth.name.$t : undefined),\n                                  profileUrl: (auth.uri ? auth.uri.$t : undefined),\n                                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)\n                                };\n                              }\n                            }\n                            if (entry.link) {\n                              if (entry.link[2]) {\n                                comment.link = comment.permalink = entry.link[2].href;\n                              }\n                              if (entry.link[3]) {\n                                var pid = /.*comments\\/default\\/(\\d+)\\?.*/.exec(entry.link[3].href);\n                                if (pid && pid[1]) {\n                                  comment.parentId = pid[1];\n                                }\n                              }\n                            }\n                            comment.deleteclass = 'item-control blog-admin';\n                            if (entry.gd$extendedProperty) {\n                              for (var k in entry.gd$extendedProperty) {\n                                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {\n                                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;\n                                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {\n                                  comment.displayTime = entry.gd$extendedProperty[k].value;\n                                }\n                              }\n                            }\n                            comments.push(comment);\n                          }\n                        }\n                        return comments;\n                      };\n                      var paginator = function(callback) {\n                        if (hasMore()) {\n                          var url = config.feed + '?alt=json&v=2&orderby=published&reverse=false&max-results=50';\n                          if (cursor) {\n                            url += '&published-min=' + new Date(cursor).toISOString();\n                          }\n                          window.bloggercomments = function(data) {\n                            var parsed = parse(data);\n                            cursor = parsed.length < 50 ? null\n                            : parseInt(parsed[parsed.length - 1].timestamp) + 1\n                            callback(parsed);\n                            window.bloggercomments = null;\n                          }\n                          url += '&callback=bloggercomments';\n                          var script = document.createElement('script');\n                          script.type = 'text/javascript';\n                          script.src = url;\n                          document.getElementsByTagName('head')[0].appendChild(script);\n                        }\n                      };\n                      var hasMore = function() {\n                        return !!cursor;\n                      };\n                      var getMeta = function(key, comment) {\n                        if ('iswriter' == key) {\n                          var matches = !!comment.author\n                          && comment.author.name == config.authorName\n                          && comment.author.profileUrl == config.authorUrl;\n                          return matches ? 'true' : '';\n                        } else if ('deletelink' == key) {\n                          return config.baseUri + '/delete-comment.g?blogID='\n                          + config.blogId + '&postID=' + comment.id;\n                        } else if ('deleteclass' == key) {\n                          return comment.deleteclass;\n                        }\n                        return '';\n                      };\n                      var replybox = null;\n                      var replyUrlParts = null;\n                      var replyParent = undefined;\n                      var onReply = function(commentId, domId) {\n                        if (replybox == null) {\n                          // lazily cache replybox, and adjust to suit this style:\n                          replybox = document.getElementById('comment-editor');\n                          if (replybox != null) {\n                            replybox.height = '250px';\n                            replybox.style.display = 'block';\n                            replyUrlParts = replybox.src.split('#');\n                          }\n                        }\n                        if (replybox && (commentId !== replyParent)) {\n                          document.getElementById(domId).insertBefore(replybox, null);\n                          replybox.src = replyUrlParts[0]\n                          + (commentId ? '&parentID=' + commentId : '')\n                          + '#' + replyUrlParts[1];\n                          replyParent = commentId;\n                        }\n                      };\n                      var hash = (window.location.hash || '#').substring(1);\n                      var startThread, targetComment;\n                      if (/^comment-form_/.test(hash)) {\n                        startThread = hash.substring('comment-form_'.length);\n                      } else if (/^c[0-9]+$/.test(hash)) {\n                        targetComment = hash.substring(1);\n                      }\n                      // Configure commenting API:\n                      var configJso = {\n                        'maxDepth': config.maxThreadDepth\n                      };\n                      var provider = {\n                        'id': config.postId,\n                        'data': items,\n                        'loadNext': paginator,\n                        'hasMore': hasMore,\n                        'getMeta': getMeta,\n                        'onReply': onReply,\n                        'rendered': true,\n                        'initComment': targetComment,\n                        'initReplyThread': startThread,\n                        'config': configJso,\n                        'messages': msgs\n                      };\n                      var render = function() {\n                        if (window.goog && window.goog.comments) {\n                          var holder = document.getElementById('comment-holder');\n                          window.goog.comments.render(holder, provider);\n                        }\n                      };\n                      // render now, or queue to render when library loads:\n                      if (window.goog && window.goog.comments) {\n                        render();\n                      } else {\n                        window.goog = window.goog || {};\n                        window.goog.comments = window.goog.comments || {};\n                        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];\n                        window.goog.comments.loadQueue.push(render);\n                      }\n                    })();\n                    // ]]>\n                  </script>\n                </b:includable>\n                <b:includable id='threaded_comments' var='post'>\n                  <div class='comments' id='comments'>\n                    <a name='comments'/>\n                    <h4>\n                      <data:post.commentLabelFull/>\n                      :\n                    </h4>\n                    <div class='comments-content'>\n                      <b:if cond='data:post.embedCommentForm'>\n                        <b:include data='post' name='threaded_comment_js'/>\n                      </b:if>\n                      <div id='comment-holder'>\n                        <data:post.commentHtml/>\n                      </div>\n                    </div>\n                    <p class='comment-footer'>\n                      <b:if cond='data:post.allowNewComments'>\n                        <b:include data='post' name='threaded-comment-form'/>\n                        <b:else/>\n                        <data:post.noNewCommentsText/>\n                      </b:if>\n                    </p>\n                    <b:if cond='data:showCmtPopup'>\n                      <div id='comment-popup'>\n                        <iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'>\n                        </iframe>\n                      </div>\n                    </b:if>\n                    <div id='backlinks-container'>\n                      <div expr:id='data:widget.instanceId + \"_backlinks-container\"'>\n                        <b:if cond='data:post.showBacklinks'>\n                          <b:include data='post' name='backlinks'/>\n                        </b:if>\n                      </div>\n                    </div>\n                  </div>\n                </b:includable>\n              </b:widget>\n            </b:section>\n          </div>\n          <div id='sidebar-backup' style='display:none'>\n<b:section class='sidebar106' id='sidebar106' preferred='yes'>\n  <b:widget id='HTML1' locked='false' title='Donate Mograblog' type='HTML'>\n    <b:includable id='main'>\n  <!-- only display title if it's non-empty -->\n  <b:if cond='data:title != \"\"'>\n    <h2 class='title'><data:title/></h2>\n  </b:if>\n  <div class='widget-content'>\n    <data:content/>\n  </div>\n\n  <b:include name='quickedit'/>\n</b:includable>\n  </b:widget>\n  <b:widget id='PlusOne1' locked='false' title='+1 Button' type='PlusOne'>\n    <b:includable id='main'>\n                  <div class='widget-content'>\n                    <g:plusone expr:annotation='data:annotation' expr:href='data:blog.canonicalHomepageUrl' expr:size='data:size' source='blogger:blog:plusone' width='250'/>\n                    <script type='text/javascript'>\n                      window.___gcfg = {\"lang\": \"<data:language/>\"};\n                    </script>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='PlusFollowers1' locked='false' title='Google+ Followers' type='PlusFollowers'>\n    <b:includable id='main'>\n                  <b:if cond='data:title != \"\"'>\n                    <h2 class='title'>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <b:if cond='data:profileUrl != \"\"'>\n                      <div class='g-plus' data-action='followers' data-source='blogger:blog:followers' expr:data-height='data:height' expr:data-href='data:profileUrl' expr:data-theme='data:theme' expr:data-width='data:width'/>\n                      <script type='text/javascript'>\n                        window.___gcfg = {&#39;lang&#39;: &#39;<data:language/>&#39;};\n                      </script>\n                    </b:if>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='AdSense2' locked='false' title='' type='AdSense'>\n    <b:includable id='main'>\n                  <div class='widget-content'>\n                    <b:if cond='data:blog.disableAdSenseWidget != \"true\"'>\n                      <data:adCode/>\n                    </b:if>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='PageList1' locked='false' title='Pages' type='PageList'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <b:if cond='data:mobile'>\n                      <select expr:id='data:widget.instanceId + \"_select\"'>\n                        <b:loop values='data:links' var='link'>\n                          <b:if cond='data:link.isCurrentPage'>\n                            <option expr:value='data:link.href' selected='selected'>\n                              <data:link.title/>\n                            </option>\n                            <b:else/>\n                            <option expr:value='data:link.href'>\n                              <data:link.title/>\n                            </option>\n                          </b:if>\n                        </b:loop>\n                      </select>\n                      <span class='pagelist-arrow'>\n                        &#9660;\n                      </span>\n                      <b:else/>\n                      <ul>\n                        <b:loop values='data:links' var='link'>\n                          <b:if cond='data:link.isCurrentPage'>\n                            <li class='selected'>\n                              <a expr:href='data:link.href'>\n                                <data:link.title/>\n                              </a>\n                            </li>\n                            <b:else/>\n                            <li>\n                              <a expr:href='data:link.href'>\n                                <data:link.title/>\n                              </a>\n                            </li>\n                          </b:if>\n                        </b:loop>\n                      </ul>\n                    </b:if>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Label99' locked='false' title='Labels' type='Label'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <script src='http://sites.google.com/site/bloggerustemplatus/code/swfobject.js' type='text/javascript'/>\n                    <div id='flashcontent'>\n                      Blogumulus by \n                      <a href='http://www.roytanck.com/'>\n                        Roy Tanck\n                      </a>\n                      and \n                      <a href='http://www.bloggerbuster.com'>\n                        Amanda Fazani\n                      </a>\n                    </div>\n                    <script type='text/javascript'>\n                      var so = new SWFObject(\"http://sites.google.com/site/bloggerustemplatus/code/tagcloud.swf\", \"tagcloud\", \"240\", \"300\", \"7\", \"#ffffff\");\n                                             // uncomment next line to enable transparency\n                                             so.addParam(\"wmode\", \"transparent\");\n                      so.addVariable(\"tcolor\", \"0x333333\");\n                      so.addVariable(\"mode\", \"tags\");\n                      so.addVariable(\"distr\", \"true\");\n                      so.addVariable(\"tspeed\", \"100\");\n                      so.addVariable(\"tagcloud\", \"<tags><b:loop values='data:labels' var='label'><a expr:href='data:label.url' style='12'><data:label.name/></a></b:loop></tags>\");\n                                     so.addParam(\"allowScriptAccess\", \"always\");\n                      so.write(\"flashcontent\");\n                    </script>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Stats1' locked='false' title='Pageviews last month' type='Stats'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <!-- Content is going to be visible when data will be fetched from server. -->\n                    <div expr:id='data:widget.instanceId + \"_content\"' style='display: none;'>\n                      <!-- Counter and image will be injected later via AJAX call. -->\n                      <b:if cond='data:showSparkline'>\n                        <img alt='Sparkline' expr:id='data:widget.instanceId + \"_sparkline\"' height='30' width='75'/>\n                      </b:if>\n                      <b:if cond='data:showGraphicalCounter'>\n                        <span class='counter-wrapper graph-counter-wrapper' expr:id='data:widget.instanceId + \"_totalCount\"'/>\n                        <b:else/>\n                        <span class='counter-wrapper text-counter-wrapper' expr:id='data:widget.instanceId + \"_totalCount\"'/>\n                      </b:if>\n                      <b:include name='quickedit'/>\n                    </div>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='PopularPosts2' locked='false' title='Popular Posts' type='PopularPosts'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content popular-posts'>\n                    <ul>\n                      <b:loop values='data:posts' var='post'>\n                        <li>\n                          <b:if cond='data:showThumbnails == \"false\"'>\n                            <b:if cond='data:showSnippets == \"false\"'>\n                              <!-- (1) No snippet/thumbnail -->\n                              <a expr:href='data:post.href'>\n                                <data:post.title/>\n                              </a>\n                              <b:else/>\n                              <!-- (2) Show only snippets -->\n                              <div class='item-title'>\n                                <a expr:href='data:post.href'>\n                                  <data:post.title/>\n                                </a>\n                              </div>\n                              <div class='item-snippet'>\n                                <data:post.snippet/>\n                              </div>\n                            </b:if>\n                            <b:else/>\n                            <b:if cond='data:showSnippets == \"false\"'>\n                              <!-- (3) Show only thumbnails -->\n                              <div class='item-thumbnail-only'>\n                                <b:if cond='data:post.thumbnail'>\n                                  <div class='item-thumbnail'>\n                                    <a expr:href='data:post.href' target='_blank'>\n                                      <img alt='' border='0' expr:height='data:thumbnailSize' expr:src='data:post.thumbnail' expr:width='data:thumbnailSize'/>\n                                    </a>\n                                  </div>\n                                </b:if>\n                                <div class='item-title'>\n                                  <a expr:href='data:post.href'>\n                                    <data:post.title/>\n                                  </a>\n                                </div>\n                              </div>\n                              <div style='clear: both;'/>\n                              <b:else/>\n                              <!-- (4) Show snippets and thumbnails -->\n                              <div class='item-content'>\n                                <b:if cond='data:post.thumbnail'>\n                                  <div class='item-thumbnail'>\n                                    <a expr:href='data:post.href' target='_blank'>\n                                      <img alt='' border='0' expr:height='data:thumbnailSize' expr:src='data:post.thumbnail' expr:width='data:thumbnailSize'/>\n                                    </a>\n                                  </div>\n                                </b:if>\n                                <div class='item-title'>\n                                  <a expr:href='data:post.href'>\n                                    <data:post.title/>\n                                  </a>\n                                </div>\n                                <div class='item-snippet'>\n                                  <data:post.snippet/>\n                                </div>\n                              </div>\n                              <div style='clear: both;'/>\n                            </b:if>\n                          </b:if>\n                        </li>\n                      </b:loop>\n                    </ul>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Label1' locked='false' title='Labels' type='Label'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div expr:class='\"widget-content \" + data:display + \"-label-widget-content\"'>\n                    <b:if cond='data:display == \"list\"'>\n                      <ul>\n                        <b:loop values='data:labels' var='label'>\n                          <li>\n                            <b:if cond='data:blog.url == data:label.url'>\n                              <span expr:dir='data:blog.languageDirection'>\n                                <data:label.name/>\n                              </span>\n                              <b:else/>\n                              <a expr:dir='data:blog.languageDirection' expr:href='data:label.url'>\n                                <data:label.name/>\n                              </a>\n                            </b:if>\n                            <b:if cond='data:showFreqNumbers'>\n                              <span dir='ltr'>\n                                (\n                                <data:label.count/>\n                                )\n                              </span>\n                            </b:if>\n                          </li>\n                        </b:loop>\n                      </ul>\n                      <b:else/>\n                      <b:loop values='data:labels' var='label'>\n                        <span expr:class='\"label-size label-size-\" + data:label.cssSize'>\n                          <b:if cond='data:blog.url == data:label.url'>\n                            <span expr:dir='data:blog.languageDirection'>\n                              <data:label.name/>\n                            </span>\n                            <b:else/>\n                            <a expr:dir='data:blog.languageDirection' expr:href='data:label.url'>\n                              <data:label.name/>\n                            </a>\n                          </b:if>\n                          <b:if cond='data:showFreqNumbers'>\n                            <span class='label-count' dir='ltr'>\n                              (\n                              <data:label.count/>\n                              )\n                            </span>\n                          </b:if>\n                        </span>\n                      </b:loop>\n                    </b:if>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Gadget4' locked='false' title='Recent Posts' type='Gadget'>\n    <b:includable id='main'>\n                  <!-- only display title if it's non-empty -->\n                  <b:if cond='data:renderingUrl != \"\"'>\n                    <b:if cond='data:title != \"\"'>\n                      <h2 class='title'>\n                        <data:title/>\n                      </h2>\n                    </b:if>\n                    <b:if cond='data:gadgetSnippet != \"\"'>\n                      <data:gadgetSnippet/>\n                      <b:else/>\n                      <div class='widget-content'>\n                        <b:if cond='data:nonSocialFragment != \"\"'>\n                          <data:nonSocialFragment/>\n                        </b:if>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <data:errorMessage/>\n                  </b:if>\n                  <b:include name='quickedit'/>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Gadget3' locked='false' title='Share it' type='Gadget'>\n    <b:includable id='main'>\n                  <!-- only display title if it's non-empty -->\n                  <b:if cond='data:renderingUrl != \"\"'>\n                    <b:if cond='data:title != \"\"'>\n                      <h2 class='title'>\n                        <data:title/>\n                      </h2>\n                    </b:if>\n                    <b:if cond='data:gadgetSnippet != \"\"'>\n                      <data:gadgetSnippet/>\n                      <b:else/>\n                      <div class='widget-content'>\n                        <b:if cond='data:nonSocialFragment != \"\"'>\n                          <data:nonSocialFragment/>\n                        </b:if>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <data:errorMessage/>\n                  </b:if>\n                  <b:include name='quickedit'/>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Gadget2' locked='false' title='Twitter Updates' type='Gadget'>\n    <b:includable id='main'>\n                  <!-- only display title if it's non-empty -->\n                  <b:if cond='data:renderingUrl != \"\"'>\n                    <b:if cond='data:title != \"\"'>\n                      <h2 class='title'>\n                        <data:title/>\n                      </h2>\n                    </b:if>\n                    <b:if cond='data:gadgetSnippet != \"\"'>\n                      <data:gadgetSnippet/>\n                      <b:else/>\n                      <div class='widget-content'>\n                        <b:if cond='data:nonSocialFragment != \"\"'>\n                          <data:nonSocialFragment/>\n                        </b:if>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <data:errorMessage/>\n                  </b:if>\n                  <b:include name='quickedit'/>\n                </b:includable>\n  </b:widget>\n  <b:widget id='LinkList2' locked='false' title='Links' type='LinkList'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <ul>\n                      <b:loop values='data:links' var='link'>\n                        <li>\n                          <a expr:href='data:link.target'>\n                            <data:link.name/>\n                          </a>\n                        </li>\n                      </b:loop>\n                    </ul>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Profile1' locked='false' title='About Me' type='Profile'>\n    <b:includable id='main'>\n                  <b:if cond='data:title != \"\"'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <b:if cond='data:team == \"true\"'>\n                      <!-- team blog profile -->\n                      <ul>\n                        <b:loop values='data:authors' var='i'>\n                          <li>\n                            <a class='profile-name-link g-profile' expr:href='data:i.userUrl' expr:style='\"background-image: url(\" + data:i.profileLogo + \");\"'>\n                              <data:i.display-name/>\n                            </a>\n                          </li>\n                        </b:loop>\n                      </ul>\n                      <b:else/>\n                      <!-- normal blog profile -->\n                      <b:if cond='data:photo.url != \"\"'>\n                        <a expr:href='data:userUrl'>\n                          <img class='profile-img' expr:alt='data:photo.alt' expr:height='data:photo.height' expr:src='data:photo.url' expr:width='data:photo.width'/>\n                        </a>\n                      </b:if>\n                      <dl class='profile-datablock'>\n                        <dt class='profile-data'>\n                          <a class='profile-name-link g-profile' expr:href='data:userUrl' expr:style='\"background-image: url(\" + data:profileLogo + \");\"' rel='author'>\n                            <data:displayname/>\n                          </a>\n                          <b:if cond='data:hasgoogleprofile'>\n                            <br/>\n                            <div class='g-follow' data-annotation='bubble' data-height='20' expr:data-href='data:userUrl'/>\n                          </b:if>\n                        </dt>\n                        <b:if cond='data:showlocation == \"true\"'>\n                          <dd class='profile-data'>\n                            <data:location/>\n                          </dd>\n                        </b:if>\n                        <b:if cond='data:aboutme != \"\"'>\n                          <dd class='profile-textblock'>\n                            <data:aboutme/>\n                          </dd>\n                        </b:if>\n                      </dl>\n                      <a class='profile-link' expr:href='data:userUrl' rel='author'>\n                        <data:viewProfileMsg/>\n                      </a>\n                    </b:if>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'>\n    <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content'>\n                    <div id='ArchiveList'>\n                      <div expr:id='data:widget.instanceId + \"_ArchiveList\"'>\n                        <b:if cond='data:style == \"HIERARCHY\"'>\n                          <b:include data='data' name='interval'/>\n                        </b:if>\n                        <b:if cond='data:style == \"FLAT\"'>\n                          <b:include data='data' name='flat'/>\n                        </b:if>\n                        <b:if cond='data:style == \"MENU\"'>\n                          <b:include data='data' name='menu'/>\n                        </b:if>\n                      </div>\n                    </div>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n    <b:includable id='flat' var='data'>\n                  <ul class='flat'>\n                    <b:loop values='data:data' var='i'>\n                      <li class='archivedate'>\n                        <a expr:href='data:i.url'>\n                          <data:i.name/>\n                        </a>\n                        (\n                        <data:i.post-count/>\n                        )\n                      </li>\n                    </b:loop>\n                  </ul>\n                </b:includable>\n    <b:includable id='interval' var='intervalData'>\n                  <b:loop values='data:intervalData' var='i'>\n                    <ul class='hierarchy'>\n                      <li expr:class='\"archivedate \" + data:i.expclass'>\n                        <b:include data='i' name='toggle'/>\n                        <a class='post-count-link' expr:href='data:i.url'>\n                          <data:i.name/>\n                        </a>\n                        <span class='post-count' dir='ltr'>\n                          (\n                          <data:i.post-count/>\n                          )\n                        </span>\n                        <b:if cond='data:i.data'>\n                          <b:include data='i.data' name='interval'/>\n                        </b:if>\n                        <b:if cond='data:i.posts'>\n                          <b:include data='i.posts' name='posts'/>\n                        </b:if>\n                      </li>\n                    </ul>\n                  </b:loop>\n                </b:includable>\n    <b:includable id='menu' var='data'>\n                  <select expr:id='data:widget.instanceId + \"_ArchiveMenu\"'>\n                    <option value=''>\n                      <data:title/>\n                    </option>\n                    <b:loop values='data:data' var='i'>\n                      <option expr:value='data:i.url'>\n                        <data:i.name/>\n                        (\n                        <data:i.post-count/>\n                        )\n                      </option>\n                    </b:loop>\n                  </select>\n                </b:includable>\n    <b:includable id='posts' var='posts'>\n                  <ul class='posts'>\n                    <b:loop values='data:posts' var='i'>\n                      <li>\n                        <a expr:href='data:i.url'>\n                          <data:i.title/>\n                        </a>\n                      </li>\n                    </b:loop>\n                  </ul>\n                </b:includable>\n    <b:includable id='toggle' var='interval'>\n                  <b:if cond='data:interval.toggleId'>\n                    <b:if cond='data:interval.expclass == \"expanded\"'>\n                      <a class='toggle' href='javascript:void(0)'>\n                        <span class='zippy toggle-open'>\n                          &#9660;&#160;\n                        </span>\n                      </a>\n                      <b:else/>\n                      <a class='toggle' href='javascript:void(0)'>\n                        <span class='zippy'>\n                          <b:if cond='data:blog.languageDirection == \"rtl\"'>\n                            &#9668;&#160;\n                            <b:else/>\n                            &#9658;&#160;\n                          </b:if>\n                        </span>\n                      </a>\n                    </b:if>\n                  </b:if>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Gadget1' locked='false' title='Recent Comments' type='Gadget'>\n    <b:includable id='main'>\n                  <!-- only display title if it's non-empty -->\n                  <b:if cond='data:renderingUrl != \"\"'>\n                    <b:if cond='data:title != \"\"'>\n                      <h2 class='title'>\n                        <data:title/>\n                      </h2>\n                    </b:if>\n                    <b:if cond='data:gadgetSnippet != \"\"'>\n                      <data:gadgetSnippet/>\n                      <b:else/>\n                      <div class='widget-content'>\n                        <b:if cond='data:nonSocialFragment != \"\"'>\n                          <data:nonSocialFragment/>\n                        </b:if>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <data:errorMessage/>\n                  </b:if>\n                  <b:include name='quickedit'/>\n                </b:includable>\n  </b:widget>\n  <b:widget id='AdSense4' locked='false' title='' type='AdSense'>\n    <b:includable id='main'>\n                  <div class='widget-content'>\n                    <b:if cond='data:blog.disableAdSenseWidget != \"true\"'>\n                      <data:adCode/>\n                    </b:if>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n  </b:widget>\n  <b:widget id='Gadget5' locked='false' title='References' type='Gadget'>\n    <b:includable id='main'>\n                  <!-- only display title if it's non-empty -->\n                  <b:if cond='data:renderingUrl != \"\"'>\n                    <b:if cond='data:title != \"\"'>\n                      <h2 class='title'>\n                        <data:title/>\n                      </h2>\n                    </b:if>\n                    <b:if cond='data:gadgetSnippet != \"\"'>\n                      <data:gadgetSnippet/>\n                      <b:else/>\n                      <div class='widget-content'>\n                        <b:if cond='data:nonSocialFragment != \"\"'>\n                          <data:nonSocialFragment/>\n                        </b:if>\n                      </div>\n                    </b:if>\n                    <b:else/>\n                    <data:errorMessage/>\n                  </b:if>\n                  <b:include name='quickedit'/>\n                </b:includable>\n  </b:widget>\n</b:section>\n          </div>\n          <div id='sidebar-wrapper'>\n            <b:section class='sidebar' id='sidebar' preferred='yes'>\n              <b:widget id='PopularPosts1' locked='false' title='Popular Posts' type='PopularPosts'>\n                <b:includable id='main'>\n                  <b:if cond='data:title'>\n                    <h2>\n                      <data:title/>\n                    </h2>\n                  </b:if>\n                  <div class='widget-content popular-posts'>\n                    <ul>\n                      <b:loop values='data:posts' var='post'>\n                        <li>\n                          <b:if cond='data:showThumbnails == \"false\"'>\n                            <b:if cond='data:showSnippets == \"false\"'>\n                              <!-- (1) No snippet/thumbnail -->\n                              <a expr:href='data:post.href'>\n                                <data:post.title/>\n                              </a>\n                              <b:else/>\n                              <!-- (2) Show only snippets -->\n                              <div class='item-title'>\n                                <a expr:href='data:post.href'>\n                                  <data:post.title/>\n                                </a>\n                              </div>\n                              <div class='item-snippet'>\n                                <data:post.snippet/>\n                              </div>\n                            </b:if>\n                            <b:else/>\n                            <b:if cond='data:showSnippets == \"false\"'>\n                              <!-- (3) Show only thumbnails -->\n                              <div class='item-thumbnail-only'>\n                                <b:if cond='data:post.thumbnail'>\n                                  <div class='item-thumbnail'>\n                                    <a expr:href='data:post.href' target='_blank'>\n                                      <img alt='' border='0' expr:height='data:thumbnailSize' expr:src='data:post.thumbnail' expr:width='data:thumbnailSize'/>\n                                    </a>\n                                  </div>\n                                </b:if>\n                                <div class='item-title'>\n                                  <a expr:href='data:post.href'>\n                                    <data:post.title/>\n                                  </a>\n                                </div>\n                              </div>\n                              <div style='clear: both;'/>\n                              <b:else/>\n                              <!-- (4) Show snippets and thumbnails -->\n                              <div class='item-content'>\n                                <b:if cond='data:post.thumbnail'>\n                                  <div class='item-thumbnail'>\n                                    <a expr:href='data:post.href' target='_blank'>\n                                      <img alt='' border='0' expr:height='data:thumbnailSize' expr:src='data:post.thumbnail' expr:width='data:thumbnailSize'/>\n                                    </a>\n                                  </div>\n                                </b:if>\n                                <div class='item-title'>\n                                  <a expr:href='data:post.href'>\n                                    <data:post.title/>\n                                  </a>\n                                </div>\n                                <div class='item-snippet'>\n                                  <data:post.snippet/>\n                                </div>\n                              </div>\n                              <div style='clear: both;'/>\n                            </b:if>\n                          </b:if>\n                        </li>\n                      </b:loop>\n                    </ul>\n                    <b:include name='quickedit'/>\n                  </div>\n                </b:includable>\n              </b:widget>\n            </b:section>\n          </div>\n          <!-- spacer for skins that want sidebar and main to be the same height-->\n          <div class='clear'>\n            &#160;\n          </div>\n        </div>\n        <!-- end content-wrapper -->\n        <div id='footer-wrapper'>\n          <b:section class='footer' id='footer'>\n            <b:widget id='HTML2' locked='false' title='Disqus for mograblog.com' type='HTML'>\n              <b:includable id='main'>\n            <script type='text/javascript'>\n                var disqus_shortname = &#39;mograblogcom&#39;;\n                var disqus_blogger_current_url = \"<data:blog.canonicalUrl/>\";\n                if (!disqus_blogger_current_url.length) {\n                    disqus_blogger_current_url = \"<data:blog.url/>\";\n                }\n                var disqus_blogger_homepage_url = \"<data:blog.homepageUrl/>\";\n                var disqus_blogger_canonical_homepage_url = \"<data:blog.canonicalHomepageUrl/>\";\n            </script>\n            <b:if cond='data:blog.pageType == \"item\"'>\n                <style type='text/css'>\n                    #comments {display:none;}\n                </style>\n                <script type='text/javascript'>\n                    (function() {\n                        var bloggerjs = document.createElement(&#39;script&#39;);\n                        bloggerjs.type = &#39;text/javascript&#39;;\n                        bloggerjs.async = true;\n                        bloggerjs.src = &#39;http://&#39;+disqus_shortname+&#39;.disqus.com/blogger_item.js&#39;;\n                        (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(bloggerjs);\n                    })();\n                </script>\n            </b:if>\n                <style type='text/css'>\n                    .post-comment-link { visibility: hidden; }\n                </style>\n                <script type='text/javascript'>\n                (function() {\n                    var bloggerjs = document.createElement(&#39;script&#39;);\n                    bloggerjs.type = &#39;text/javascript&#39;;\n                    bloggerjs.async = true;\n                    bloggerjs.src = &#39;http://&#39;+disqus_shortname+&#39;.disqus.com/blogger_index.js&#39;;\n                    (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(bloggerjs);\n                })();\n                </script>\n        </b:includable>\n            </b:widget>\n          </b:section>\n        </div>\n      </div>\n    </div>\n    <!-- end outer-wrapper -->\n    <script language='javascript'>\n      dp.SyntaxHighlighter.BloggerMode();  \n      dp.SyntaxHighlighter.HighlightAll(&#39;code&#39;);  \n                                        $(\"pre\").each(function(index,item){ try{\n        $(item).html($(item).html().trim())} catch(e){ console.log(e)}\n                                                                                    });\n    </script>\n</body>\n</html>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/template/default"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/template/default"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_PUBLISHING_MODE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The type of publishing done for this blog."
                },
                "content": {
                    "_type": "text",
                    "__text": "PUBLISH_MODE_HOSTED"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_PUBLISHING_MODE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_PUBLISHING_MODE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_ADMIN_PERMISSION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The list of administrators' emails for the blog."
                },
                "content": {
                    "_type": "text",
                    "__text": "guy.mograbi@gmail.com"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ADMIN_PERMISSION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ADMIN_PERMISSION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_ADULT_CONTENT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether this blog contains adult content"
                },
                "content": {
                    "_type": "text",
                    "__text": "false"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ADULT_CONTENT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ADULT_CONTENT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether alternate JS renderings are allowed"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Blog's Google Analytics account number"
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_ARCHIVE_DATE_FORMAT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The number of the archive index date format"
                },
                "content": {
                    "_type": "text",
                    "__text": "9"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ARCHIVE_DATE_FORMAT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ARCHIVE_DATE_FORMAT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_ARCHIVE_FREQUENCY",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "How frequently this blog should be archived"
                },
                "content": {
                    "_type": "text",
                    "__text": "MONTHLY"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ARCHIVE_FREQUENCY"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_ARCHIVE_FREQUENCY"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_AUTHOR_PERMISSION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The list of authors' emails who have permission to publish."
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_AUTHOR_PERMISSION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_AUTHOR_PERMISSION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_BACKLINKS_ALLOWED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show comment backlinks on the blog"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_BACKLINKS_ALLOWED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_BACKLINKS_ALLOWED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_BY_POST_ARCHIVING",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to provide an archive page for each post"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_BY_POST_ARCHIVING"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_BY_POST_ARCHIVING"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_ACCESS",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Who can comment"
                },
                "content": {
                    "_type": "text",
                    "__text": "ANYONE"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_ACCESS"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_ACCESS"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_CAPTCHA",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to require commenters to complete a Captcha"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_CAPTCHA"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_CAPTCHA"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_EMAIL",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "List of e-mail addresses to send notifications of new comments to"
                },
                "content": {
                    "_type": "text",
                    "__text": "guy.mograbi@gmail.com"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_EMAIL"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_EMAIL"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_FEED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The type of feed to provide for blog comments"
                },
                "content": {
                    "_type": "text",
                    "__text": "FULL"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_FEED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_FEED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_FORM_LOCATION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Blog comment form location"
                },
                "content": {
                    "_type": "text",
                    "__text": "EMBEDDED_IFRAME"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_FORM_LOCATION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_FORM_LOCATION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_MESSAGE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Blog comment message"
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MESSAGE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MESSAGE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_MODERATION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to enable comment moderation"
                },
                "content": {
                    "_type": "text",
                    "__text": "DISABLED"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MODERATION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MODERATION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_MODERATION_DELAY",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Number of days after which new comments are subject to moderation"
                },
                "content": {
                    "_type": "text",
                    "__text": "14"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MODERATION_DELAY"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MODERATION_DELAY"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_MODERATION_EMAIL",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Email address to send notifications of new comments needing moderation to"
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MODERATION_EMAIL"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_MODERATION_EMAIL"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENT_PROFILE_IMAGES",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show profile images in comments"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_PROFILE_IMAGES"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENT_PROFILE_IMAGES"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENTS_ALLOWED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show comments"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENTS_ALLOWED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENTS_ALLOWED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Comment time stamp format number"
                },
                "content": {
                    "_type": "text",
                    "__text": "29"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_CONVERT_LINE_BREAKS",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to convert line breaks into <br /> tags in post editor"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CONVERT_LINE_BREAKS"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CONVERT_LINE_BREAKS"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_CUSTOM_PAGE_NOT_FOUND",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The content served when the requested post or page is not found."
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CUSTOM_PAGE_NOT_FOUND"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CUSTOM_PAGE_NOT_FOUND"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_CUSTOM_ROBOTS_TXT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The custom robots.txt content of the blog served to search engines."
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CUSTOM_ROBOTS_TXT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CUSTOM_ROBOTS_TXT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether this blog serves custom robots.txt content to search engines."
                },
                "content": {
                    "_type": "text",
                    "__text": "false"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_DATE_FORMAT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The number of the date header format"
                },
                "content": {
                    "_type": "text",
                    "__text": "26"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DATE_FORMAT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DATE_FORMAT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_DEFAULT_BACKLINKS_MODE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Default backlinks mode for posts"
                },
                "content": {
                    "_type": "text",
                    "__text": "DEFAULT_HAVE_BACKLINKS"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DEFAULT_BACKLINKS_MODE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DEFAULT_BACKLINKS_MODE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_DEFAULT_COMMENTS_MODE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Default comment mode for posts"
                },
                "content": {
                    "_type": "text",
                    "__text": "DEFAULT_HAVE_COMMENTS"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DEFAULT_COMMENTS_MODE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DEFAULT_COMMENTS_MODE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_DESCRIPTION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "A description of the blog"
                },
                "content": {
                    "_type": "text",
                    "__text": "Making it work..."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DESCRIPTION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_DESCRIPTION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_EMAIL_POST_LINKS",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show a link for users to e-mail posts"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_EMAIL_POST_LINKS"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_EMAIL_POST_LINKS"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_FEED_REDIRECT_URL",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "URL to redirect post feed requests to"
                },
                "content": {
                    "_type": "text",
                    "__text": "http://feeds.feedburner.com/Mograblog"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_FEED_REDIRECT_URL"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_FEED_REDIRECT_URL"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_FLOAT_ALIGNMENT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether float alignment is enabled for the blog"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_FLOAT_ALIGNMENT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_FLOAT_ALIGNMENT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_LOCALE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Language for this blog"
                },
                "content": {
                    "_type": "text",
                    "__text": "en"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_LOCALE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_LOCALE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_M2B_WHITELIST_EMAIL",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "List of email addresses that can post to the blog via email."
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_M2B_WHITELIST_EMAIL"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_M2B_WHITELIST_EMAIL"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_MAX_NUM",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Maximum number of things to show on the main page\""
                },
                "content": {
                    "_type": "text",
                    "__text": "7"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_MAX_NUM"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_MAX_NUM"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_MAX_UNIT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Unit of things to show on the main page"
                },
                "content": {
                    "_type": "text",
                    "__text": "POSTS"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_MAX_UNIT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_MAX_UNIT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_META_DESCRIPTION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The meta description of the blog served to search engines."
                },
                "content": {
                    "_type": "text",
                    "__text": "Mograblog - Programming is fun and interesting. Lets make it work!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_META_DESCRIPTION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_META_DESCRIPTION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_META_DESCRIPTION_ENABLED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether this blog is served with meta descriptions."
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_META_DESCRIPTION_ENABLED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_META_DESCRIPTION_ENABLED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_NAME",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The name of the blog"
                },
                "content": {
                    "_type": "text",
                    "__text": "MograBlog"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_NAME"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_NAME"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_PER_POST_FEED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The type of feed to provide for per-post comments"
                },
                "content": {
                    "_type": "text",
                    "__text": "FULL"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_PER_POST_FEED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_PER_POST_FEED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_POST_FEED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The type of feed to provide for blog posts"
                },
                "content": {
                    "_type": "text",
                    "__text": "FULL"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_POST_FEED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_POST_FEED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_POST_FEED_FOOTER",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Footer to append to the end of each entry in the post feed"
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_POST_FEED_FOOTER"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_POST_FEED_FOOTER"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_POST_TEMPLATE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The template for blog posts"
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_POST_TEMPLATE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_POST_TEMPLATE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_PROMOTED",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether this blog can be promoted on Blogger"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_PROMOTED"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_PROMOTED"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_QUICK_EDITING",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether Quick Editing is enabled"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_QUICK_EDITING"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_QUICK_EDITING"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_READ_ACCESS_MODE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The access type for the readers of the blog."
                },
                "content": {
                    "_type": "text",
                    "__text": "PUBLIC"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_READ_ACCESS_MODE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_READ_ACCESS_MODE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_READER_PERMISSION",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The list of emails for users who have permission to read the blog."
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_READER_PERMISSION"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_READER_PERMISSION"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_SEARCHABLE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether this blog should be indexed by search engines"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SEARCHABLE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SEARCHABLE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_SEND_EMAIL",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Comma separated list of emails to send new blog posts to"
                },
                "content": {
                    "_type": "text"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SEND_EMAIL"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SEND_EMAIL"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_SHOW_TITLE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show the title field"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SHOW_TITLE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SHOW_TITLE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_SHOW_URL",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show a related link box in the post composer"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SHOW_URL"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_SHOW_URL"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_TIME_STAMP_FORMAT",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The number of the time stamp format"
                },
                "content": {
                    "_type": "text",
                    "__text": "27"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_TIME_STAMP_FORMAT"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_TIME_STAMP_FORMAT"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_TIME_ZONE",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "The time zone for this blog"
                },
                "content": {
                    "_type": "text",
                    "__text": "America/Los_Angeles"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_TIME_ZONE"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_TIME_ZONE"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.settings.BLOG_USE_LIGHTBOX",
                "published": "2009-10-20T08:41:22.011-07:00",
                "updated": "2016-01-25T10:53:06.894-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#settings"
                },
                "title": {
                    "_type": "text",
                    "__text": "Whether to show images in the Lightbox when clicked"
                },
                "content": {
                    "_type": "text",
                    "__text": "true"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_USE_LIGHTBOX"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/settings/BLOG_USE_LIGHTBOX"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1972343739150731699",
                "published": "2015-10-11T22:30:00.001-07:00",
                "updated": "2015-10-11T22:30:15.347-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Angular: improve website performance with 5 lines of code.. "
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\">Programmers usually miss it, but if you use `$timeout` or `$interval`, or even `$http` - the promise lives beyond the scope. <br/><br/> and then upsetting things can happen. imagine a simple redirect after an ajax request success: <br/><br/> <pre><br />$http.get( .. ) .then( function(){ $location.path(.. ) }<br /></pre> or polling every second?  <pre><br />$interval( func, 1000);<br /></pre> what most people don't know is that you have to cancel them with scope destruction.. <br/><br/> Here is first result in google: <a href=\"http://www.bennadel.com/blog/2548-don-t-forget-to-cancel-timeout-timers-in-your-destroy-events-in-angularjs.htm\" target=\"_top\"> Ben Nadel's - Don't Forget To Destroy Events </a> You probably missed that, or missed something somewhere and there are leaking pollings and stuff in your code that you are unaware of.   That's a shame because with probably 5 lines of code you can improve the behavior and performance of your code.   <h2> How to destroy events the ugly way? </h2>   simply(?) do <code>$scope.$on('$destroy', .. )</code>. <br/> Some people will do `$onLocationChange` or something nasty, just so they won't have to work hard.. but that's uuuuuglly... don't you agree?  just for a single scenario.. not a complete solution  <h2> How to destroy events the pretty way? </h2> Since I want events to exist only with scope, wouldn't that be most intuitive to have <code> $scope.$interval </code> for example? or even <code> $scope.$http </code> so that if the scope is destroyed, the event is cancelled.   Well, here is how you do that   <pre class=\"prettyprint\"><br /><br />angular.module('mograblog', [])<br />    .run(function($rootScope, $interval) {<br />        // add the register task to the rootScope. This will allow for autoUnregister when the<br />        // scope is destroyed to prevent tasks from leaking.<br /><br />        var ScopeProt = Object.getPrototypeOf($rootScope);<br />        ScopeProt.$interval = function(func, time){<br />             var timer = $interval(func,time);<br />             this.on('$destroy', function(){ $timeout.cancel(timer); });<br />             return timer;<br />        };<br />    });<br /></pre> This solution uses the fact that scopes has a prototypical inheritance and adds a function to all scopes (including isolated).    This function will simply cancel the interval.   Same thing can be done for the rest.   and that's it! </div>    "
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1972343739150731699/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2015/10/angular-improve-website-performance.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1972343739150731699"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1972343739150731699"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2015/10/angular-improve-website-performance.html",
                        "_title": "Angular: improve website performance with 5 lines of code.. "
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1356603989448252720",
                "published": "2014-12-20T00:00:00.000-08:00",
                "updated": "2014-12-20T00:00:05.816-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "build"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "grunt-aws CERT_UNTRUSTED quick fix"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"><h1>grunt-aws CERT_UNTRUSTED quick fix</h1> <div> If there's anything I hate in the programming world, is when something that worked well suddenly breaks.<br/> Unfortunately, today it happens a lot since everything is a \"service\" that is upgraded under your feet. <br/>    My build process broke so many times, I lost count. <br/>    Even if you keep it simple like      <ul>     <li>Register to cloudbees</li>     <li>Run script on machine</li>    </ul>     There could be many things going wrong. Here are just some examples<br/>    <ul>     <li>Cloudbees changed fedora images? or a jenkins plugin? (see images below)</li>     <li>script is using <a href=\"http://stackoverflow.com/questions/9626990/receiving-error-error-ssl-error-self-signed-cert-in-chain-while-using-npm\" target=\"_blank\">npm</a> or <a href=\"https://help.github.com/articles/error-ssl-certificate-problem-verify-that-the-ca-cert-is-ok/\" target=\"_blank\">github</a> or <a href=\"http://shlomoswidler.com/2009/08/amazon-s3-gotcha-using-virtual-host.html\" target=\"_blank\"> s3</a> or <a href=\"http://forums.technicpack.net/topic/61977-dropbox-changes-break-technic-platform-links/\" target=\"_blank\">dropbox</a>? perhaps there is a certificate issue?</li>     <li>There's always <a href=\"http://stackoverflow.com/questions/26945290/how-to-resolve-the-difference-between-these-2-similar-npm-install-logs\" target=\"_blank\">the unexplained error</a>... :(</li>    </ul> <a href=\"http://4.bp.blogspot.com/-i4h6Bfd3llQ/VJUanZv8qeI/AAAAAAAApj8/Op_Kcm19OaI/s1600/cloudbees_error_1.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://4.bp.blogspot.com/-i4h6Bfd3llQ/VJUanZv8qeI/AAAAAAAApj8/Op_Kcm19OaI/s320/cloudbees_error_1.png\" /></a><a href=\"http://4.bp.blogspot.com/-A9tqtWx4lds/VJUanbzxTOI/AAAAAAAApj4/-nNlJyeDwI8/s1600/cloudbees_error_2.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://4.bp.blogspot.com/-A9tqtWx4lds/VJUanbzxTOI/AAAAAAAApj4/-nNlJyeDwI8/s320/cloudbees_error_2.png\" /></a>     <p>And then perhaps, you decide to go on for a <strong>sure thing..</strong> as if there is such a thing. <br/>    You decide to use vagrant(!) to run your builds. Since vagrant means the build runs the same each and every time right? <strong>wrong!</strong></p>    <ul>     <li><a href=\"https://cloudbees.zendesk.com/hc/en-us/requests/23164\" target=\"_blank\">not supported?</a></li>     <li><a href=\"http://stackoverflow.com/questions/26945985/which-centos-image-can-i-use-on-aws-with-vagrant\" target=\"_blank\">vagrant plugins issue?</a></li>     <li><a href=\"http://stackoverflow.com/questions/26972837/how-to-fix-vagrant-install-plugins-which-suddenly-started-to-fail-due-to-fog-ver\" target=\"_blank\">Some more vagrant plugin issues?</a></li>    </ul>     <strong>What happened to <a href=\"http://programming-motherfucker.com/\" target=\"_blank\">Just Programming..</a>?</strong><br/>    Why do I spend my time in forums, support and such?<br/></div> <h2>And to the problem...</h2> <div> So I started getting <strong>CERT UNTRUSTED</strong> when I was using <a href=\"https://github.com/jpillora/grunt-aws\" target=\"_blank\">grunt-aws</a> after <a href=\"https://github.com/pifantastic/grunt-s3\" target=\"_blank\"> this plugin was no longer maintained..</a><br/> <br/> I was able to resolve my problem by switching of <code>cacheTTL</code> and <code>sslEnabled</code> <pre><br /> s3:{<br />    uploadCoverage: {<br />        options: {<br />            accessKeyId: s3Config.accessKey,<br />            secretAccessKey: s3Config.secretAccessKey,<br />            bucket: s3Config.bucket,<br />            cacheTTL: 0,<br />            sslEnabled: false,<br />            enableWeb:true,<br />            gzip:true<br />        },<br />        cwd: 'coverage/',<br />        src: '**',<br />        dest: 'ui-coverage/'<br /><br />    }<br />},<br /> </pre> I haven't tried any other combination. Perhaps only one is needed (probably the TTL one) but since I don't require either, I switched them both off. perhaps you do need them, so please try using only one according to your needs.  </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1356603989448252720/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html#comment-form",
                        "_title": "4 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1356603989448252720"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1356603989448252720"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html",
                        "_title": "grunt-aws CERT_UNTRUSTED quick fix"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-i4h6Bfd3llQ/VJUanZv8qeI/AAAAAAAApj8/Op_Kcm19OaI/s72-c/cloudbees_error_1.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "4"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2310956454970016873",
                "published": "2014-12-10T15:05:00.002-08:00",
                "updated": "2014-12-10T15:10:12.803-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "cloudify"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Cloudify3 Blueprint + Plugin for dummies - 3 minutes, 7 steps"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\" class=\"mograblog\"> <div class=\"info\">  <a href=\"http://getcloudify.org\" title=\"Cloudify 3\" alt=\"Cloudify 3\" target=\"_blank\">cloudify 3</a> is out for a while now, and it is creating a lot of buzz.<br/>  I decided to give it a go and write my first blueprint and plugin. <br/>  Cloudify has a <a href=\"http://getcloudify.org/guide/3.1/quickstart.html\" target=\"_blank\" title=\"Cloudify Documentation\">great documentation</a> but I found their \"quick start\" to qualify for TL;DR classification. <br/>  So I decided to my version, and to make it for \"dummy\" level users such as myself. <br/><br/>  In this post you will create everything from scratch, please note that cloudify also has <a href=\"https://github.com/cloudify-cosmo/cloudify-plugin-template\" target=\"_blank\">a plugin template</a> which they recommend to use. But then again, how will you learn without getting your hands dirty?  </div> <div class=\"warning\">  This post assumes you have a cloudify manager available! <br/>  If you don't - know that it might not be an easy task. Some people get it working under 10 minutes, and some (like me) take over 2 hours.  <br/>  The Cloudify team said they will have a \"try it now\" version for the manager - so you will have one available within a single click. <br/>  Currently, the best way to get one working is to get their <a href=\"http://getcloudify.org/downloads/get_cloudify_3x.html\" target=\"_blank\" title=\"cloudify vagrant\">vagrant resources</a> and run it. <br/> </div> <h1> So how do I write a plugin + blueprint under 3 minutes? </h1>   <h3>Step 1 - start your project</h3> <p>  When I start my project I like to do the following:    <ul>   <li> create a folder</li>   <li> run <code>git init</code></li>   <li> add <code>.gitignore</code> file with <code>.idea</code> and <code>.cloudify</code> in it</li>   <li> add <code>LICENSE</code> file to it</li>   <li> add a <code>setup.py</code> file (<a href=\"#setup_content\">content below</a>). Cloudify uses pip to install your plugin</li>   <li> create a directory for your sources, and write an <code> __init__.py </code> file in it. This file has only 1 line <code>__author__ = 'guym'</code>. </li>  </ul>   The <code>setup.py</code> looks something like this:   <pre class=\"prettyprint\"><br />__author__ = 'guym'<br /><br />from setuptools import setup<br /><br /><br />setup(<br />    zip_safe=True,<br />    name='cloudify-mogi-plugin',<br />    version='1.0',<br />    author='guym',<br />    author_email='guym@gigaspaces.com',<br />    packages=[<br />        'lib'<br />    ],<br />    license='LICENSE',<br />    description='Playground plugins',<br />    install_requires=[<br />    ]<br />)<br />  </pre> </p>  <h3>Step 2 - Write your plugin</h3> <p>  Writing your plugin is easy. Simply add a python file under your sources directory. <br/>  A plugin file is simply python. Define a function in it - later we will map it to the blueprint.<br/>  <pre class=\"prettyprint\"><br />from cloudify import ctx<br />from cloudify.decorators import operation<br /><br />@operation<br />def create( **kwargs ):<br />    ctx.logger.info('ECHO PLUGIN: create running')<br />  </pre>  Congratulations - you wrote your plugin! Lets define it   <div class=\"warning\">   Now is the time to commit your code!<br/>   Cloudify uses URLs to get your plugin and install it, so you need some online repository to host. <br/>   I use github.<br/>  </div> </p> <h3> Step 3 - Define your plugin </h3> <p>  add <code>plugin.yaml</code> file. This is the definition file for your plugin<br/> The file is very simple:  </p> <pre class=\"prettyprint\"><br />##############################################<br />#               MY PLUGINS                   #<br />##############################################<br /><br />plugins:<br />  mogi:<br />    executor: central_deployment_agent<br />    source: https://github.com/guy-mograbi-at-gigaspaces/cloudify3-plugins/archive/master.zip<br /> </pre> <p>  You need to change the URL to your git repository.  </p>  <h3>Step 4 - test you did everything right by running pip install</h3> <p>  Lets test that you defined everything well by running the command   <pre><br />virtualenv test-plugin<br />source test-plugin/bin/activate<br />pip install https://github.com/guy-mograbi-at-gigaspaces/cloudify3-plugins/archive/master.zip<br />  </pre>  You will need to change the URL to match your scenario.  </p> <div class=\"info\">  You are now ready to start using your plugin. <br/>  Cloudify Team suggests a different way than I do to accomplish this, but I found this one better for me as a beginner. <br/>   </div> <h3> Step 5 - Write a small blueprint that uses your plugin </h3> <p>  <ul>   <li> Create a folder for the blueprint</li>   <li> Create file <code>blueprint.yaml</code></il>  </ul>  The blueprint.yaml file will look something like this   <pre><br />tosca_definitions_version: cloudify_dsl_1_0<br /><br />imports:<br />  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml<br />  - https://raw.githubusercontent.com/guy-mograbi-at-gigaspaces/cloudify3-plugins/master/plugin.yaml<br /><br /><br />node_templates:<br />  mock:<br />    type: mogi.Echo<br />node_types:<br />  mogi.Echo:<br />    derived_from: cloudify.nodes.Root<br />    interfaces:<br />      cloudify.interfaces.lifecycle:<br />        create:<br />          implementation: mogi.lib.echo.create   <br />  </pre>  <div class=\"info\">   You can move the \"node_types\" part to your plugin's yaml file if you wish, and then deliver a plugin with some node types that use it. <br/>  </div>   You will need to change the \"import\" URL to your yaml file.   </p> <h3> Step 6 - upload, deploy, execute </h3> <div>  I assume you know this part. <br/>  If you don't you will need to go to the blueprint's directory and do the following:   <ul>   <li>Install cloudify CLI</li>   <li> Run <code>cfy init</code> in your blueprint's directory</br/>   <li>run <code> cfy use -t MANAGER_IP</code> to connect to your manager</li>   <li>run <code> cfy upload -b myblueprint blueprint.yaml</code> to upload the blueprint</li>   <li>run <code> cfy deployments create -d mydeployment -b myblueprint</code> to create a deployment from your blueprint</li>   <li>run <code> cfy executions start -d mydeployment -w install</code> to install your deployment</li>    </ul> </div> <h3> Step 7 - validate success </h3>   <div>  Assuming all went well, you should see the log print <code>ECHO PLUGIN: create running</code> in the console.<br/>  Yey! it worked!  </div> <h2> Conclusion</h2> <div>  The new cloudify3 project looks exciting. We were able to add a plugin to it fairly quickly. <br/>  Since a plugin is python code - the options are endless. <br/>  </div>  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2310956454970016873/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/cloudify3-blueprint-plugin-for-dummies.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2310956454970016873"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2310956454970016873"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/cloudify3-blueprint-plugin-for-dummies.html",
                        "_title": "Cloudify3 Blueprint + Plugin for dummies - 3 minutes, 7 steps"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5662502287649458300",
                "published": "2014-10-29T02:39:00.000-07:00",
                "updated": "2014-10-29T02:39:00.024-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "javascript"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "json parse is insane"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\">    <h1> json parse is insane </h1>    <div>        every project i've been in so far had the same stupid bug with <code>JSON.parse</code>.<br/>        at the beginning someone got a string instead of an object and they used <code>JSON.parse</code> to convert it to an object. <br/>        then after a while, someone fixed it upstream, and now <code>JSON.parse</code> is getting an object and fails with a very cryptic error message. <br/>    </div>    <div>        i always make sure my code is safe and i write it as such:     <pre class=\"prettyprint\"><br />item = result.data;<br />if ( typeof(item) === &#039;string&#039; ) { <br />   item = JSON.parse(item);<br />}<br />    </pre>        however, each time i write this piece of code, it seems to me like it is a bug in javascript.      </div>    <div>        seems to me like 1 of 2 things should happen:          <ul>            <li> javaScript should throw an error <code>you cannot parse an object</code> </li>            <li> javaScript should simply return the object as there's nothing to parse. </li>        </ul>    </div>       <div>        i think the latter is better and more aligned with the rest of JavaScript behavior. <br/>        but what happens now is simply insane - JavaScript implicitly converts the object <code>toString</code> and tries to parse that. <br/>        which is insane because nowhere in the world of JavaScript is <code>toString</code> meant to return a JSON. <br/>        this is why you have <code>JSON.stringify</code> to begin with. <br/>        so if anything at all <code>JSON.parse</code> should use <code>JSON.stringify</code> instead of <code>toString</code><br/>        - but what would be the point of that? simply return the object you got.      </div>    <div>        another reason why this is insane is that <code>toString</code> returns <code>[object Object]</code> <br/>        which ironically enough starts like an array (which is a valid input for <code>JSON.parse</code>) and so the error developers get is <code>invalid token o</code>.<br/>          and last reason for insanity is that this has been the situation for quite a while now. <br/>    </div>    <div>        i tried to see what other libraries are doing with this insanity : <br/>        turns out that JQuery doesn't try to fix this issue. <code>$.JSONparse</code> is just as insane.<br/>        lodash does not offer anything in this matter.<br/>        i know that <code>angular</code> behaves nicely - like i expected - but for projects that don't use angular, it would be an overkill to use angular just for this. <br/>        other than that, I could not find any references to this problem anywhere. <br/>        this problem seems to me a lot like the <code>console.log</code> problem - that it does not exist in some browsers - and should have a similar fix. <br/>    </div>    <div>     my current recommendation to fix this issue by replacing <code>JSON.parse</code> method with something like <pre class=\"prettyprint\"><br />JSON.parseString = JSON.parse<br />JSON.parse = function ( o ) {<br />    if ( typeof(o)  === &#039;string&#039; ){ <br />       return JSON.parseString.apply(arguments);<br />    } else { <br />        return o; <br />    }  <br />}<br /></pre>    </div>    <div>          but i keep getting strong objections on such a solution as it is intrusive.          <strong>what do you think? leave comments below.</strong>     </div>  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5662502287649458300/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html#comment-form",
                        "_title": "4 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5662502287649458300"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5662502287649458300"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html",
                        "_title": "json parse is insane"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "4"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7465488100751636711",
                "published": "2014-10-22T02:15:00.000-07:00",
                "updated": "2014-10-22T02:15:00.036-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nodejs"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "seo with phantomjs part 3"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"><div class=\"alert alert-info alert-block\"> this article is part of a series of articles explaining about <a href=\"/2014/10/seo-with-phantomjs.html\">seo and single page applications.</a><br/> the stack i use contains node, angular, nginx etc.<br/> in this part we are tying up all the loose ends.<br/> in this article you will have a single page application that supports seo.<br/></div> <h1> writing the sitemap.xml and adding index.html to your paths</h1> <p>  before we reach the final part of hooking it all together there are 2 seo things we should do.<br/>  the first one is to add <code>index.html</code> to your path. <br/>  it will make your life easier handling redirects and default index page etc..<br/>  it is not a requirement, but i recommend it and i assume you applied this in the rest of the post.<br/>  plus - developers are not usually aware of this, but not specifying index.html will cause problems when deadling with iframes. <br/>  i am not going to dwell on this here, but only mention that i had 2 iframes in my application that did not work until i added <code>index.html</code> to the src attribute.  </p> <p>  the other thing is adding a sitemap. <br/>  adding a sitemap tells the crawlers which pages they should crawl. <br/>  it improves the search results.<br/>  i strongly recommend using a sitemap and not relying on the crawling behavior of following links.<br/> </p> <h3> index.html </h3> <p>  adding index.html is done on your front-server and is quite easy.<br/>  all you need to do is add a redirect rule from <code>/</code> to <code>/index.html</code><br/>  in nginx it looks like so :    <pre class=\"prettyprint\">rewrite ^/$ \\$scheme://\\$host/index.html break;</pre>  </p> <h3> sitemap </h3> <p>  sitemaps are xml files that are returns when you approach <code>/sitemap.xml</code> path.<br/>  you can also expose them on a different path, and then submit sitemaps to the search engines - this is usually what i do.<br/> </p> <p>  you can maintain a file called <code>sitemap.xml</code>, but what is the fun in that? <br/>  if you have public content generated at runtime you should use an auto-generated sitemap.<br/>  simply use <a href=\"https://www.npmjs.org/package/sitemap\" target=\"_blank\">sitemap</a> module from npm.<br/>  it has a pretty straight forward api.<br/>  even though you can omit the <code>index.html</code> from the path as crawlers will now be redirected automatically, <br/>  i recommend you specify it anyway.<br/>  your output should look like so :    <pre class=\"prettyprint\"><br /><urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"><br /><url> <loc>http://www.exmaple.org/index.html#!/public/item/53f0f7b250dab2f71901abf8/intro</loc> <lastmod>2014-09-03</lastmod> <changefreq>hourly</changefreq> <priority>0.5</priority> </url><br /></urlset>  <br />  </pre> </p> <p>  note that sitemaps has a size limit.<br/>  it can contain upto 50K entries.<br/>  when i helped implementing seo to a site, i prefered to publish the last 10K records that were updated.<br/>  my reasons were:   <ul>   <li> i don't want the crawlers to crawl the entire site every time</li>   <li> i don't want to construct a huge sitemap. it will consume a lot of memory and might crush the system </li>  </ul>  i might be wrong about these 2 assumptions, but i prefered to take the safe road. <br/> </p> <h1> hooking it all up </h1> <p>  to hook everything up, you need to tell your front server to redirect all requests with <code>_escaped_fragment_</code> to your backend.<br/>  since we are dealing with a single page application these requests will actually be to an <code>index.html</code> file - as there is no other route<br/>  in nginx you can add the following   <pre class=\"prettyprint\"><br />location ~ /index.html {<br />    if (\\$args ~ \"_escaped_fragment_\") {<br />         rewrite ^(.*)$ /backend/crawler;<br />    }<br />  }   <br />  </pre>  just change <code>/backend/crawler</code> to your path.<br/>  </p> <p>  in your express code map this url to the code that uses <code>phantom</code>.   <pre class=\"prettyprint\"><br />app.get(&#039;/backend/crawler&#039;, function(req, res){<br />    var url = req.param(&#039;_escaped_fragment_&#039;);<br />    url = req.absoluteUrl(&#039;/index.html#!&#039; + decodeURIComponent(url) );<br />    logger.info(&#039;prerendering url : &#039; + url ) ;<br /><br /><br />    var phantom = require(&#039;phantom&#039;);<br />    phantom.create(function (ph) {<br /><br />        setTimeout( function(){<br />            try{<br />                ph.exit();<br />            }catch(e){<br />                logger.debug(&#039;unable to close phantom&#039;,e);<br />            }<br />        }, 30000);<br /><br /><br />        return ph.createPage(function (page) {<br />            page.open(url, function ( status ) {<br />                if ( status === &#039;fail&#039;){<br />                    res.send(500,&#039;unable to open url&#039;);<br />                    ph.exit();<br />                }else {<br />                    page.evaluate(function () {<br />                        return document.documentElement.innerHTML;<br />                    }, function (result) {<br />                        res.send( result);<br />                        ph.exit();<br />                    });<br />                }<br /><br />            });<br />        });<br />    });<br />});  <br />  </pre> </p> <p>  there are 2 things in this script that might seem weird<br/>  the first is the method <code>absoluteUrl</code>. i assign this method to the request in a middleware.<br/>  this is the implementation<br/>  <pre class=\"prettyprint\"><br />exports.origin = function origin( req, res, next){<br />    var _origin = req.protocol + &#039;://&#039; +req.get(&#039;Host&#039;)  ;<br />    req.origin = _origin;<br /><br />    // expects a URL from root \"/some/page\" which will result in \"protocol://host:port/some/page\"<br />    req.absoluteUrl = function( relativeUrl ){<br />        return _origin + relativeUrl;<br />    };<br />    next();<br />};  <br />  </pre>  </p> <p>  the other thing to note is the 30 seconds timeout that i have, in which i invoke <code>exit</code> on phantom.<br/>  this is a safety valve..<br/>  since this code spawns new phantomjs processes, i want to make sure these processes will die eventually.<br/>  i had the unfortunate opportunity to see it go haywire and bringing the machine to 100% cpu.<br/> </p> <p>  on the same note, i suggest you add <code>killall phantomjs</code> to your <code>start</code> commands so that every time you stop/start your application, it will make sure no orphan phantomjs processes are left.<br/> </p> <p>  so now there is only 1 thing left.<br/>  take a url from the sitemap, replace the <code>#!</code> with <code>_escaped_fragment_</code> and use <code>wget</code> or <code>curl</code> on it and see if you get the entire html<br/> </p> <p>  if this worked, you can also go to facebook and try to share the url.<br/> </p>   <h2> The end </h2> <div> thank you for reading this serie. i hope it helped you.<br/> please feel free to comment and give feedback.  </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7465488100751636711/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-with-phantomjs-part-3.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7465488100751636711"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7465488100751636711"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-with-phantomjs-part-3.html",
                        "_title": "seo with phantomjs part 3"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2885908267138253456",
                "published": "2014-10-15T02:12:00.000-07:00",
                "updated": "2014-10-15T02:12:00.141-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nodejs"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "seo with phantomjs part 2"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"><div class=\"alert alert-info alert-block\"> this article is part of a series of articles explaining about <a href=\"/2014/10/seo-with-phantomjs.html\">seo and single page applications.</a><br/> the stack i use contains node, angular, nginx etc.<br/> in this part we are focusing on crawlers and single page applications<br/></div> <h1> identifying a crawler and providing the prerender version </h1>   <p>  so now that we know how to generate a prerendered version of a page using phantomjs <br/>  all we need to is to identify a crawler and redirect them to the prerendered version.<br/>  turns out this is the tricky part..<br/> </p> <h3> url fragments </h3> <p>  turns out a lot of people don't know this part so i decided to take a minute and explain..<br/>    urls have a general structure of   <code>http://domain:port/path/?query#fragment</code><br/>  the part we are interested in this post is the fragment.<br/>  if you are dealing with angularjs, you know that part very well.<br/>  a lot of developers do not know that fragments are client side only and will not reach the backend.<br/>  so you cannot write code in the backend to check if there is a fragment.. <br/> </p> <p>  another important thing with fragment you should know is that when you change it in javascript, it does not cause a refresh to the entire page.<br/>  if you change any other part in the url, you will see the entire page refreshes. <br/>  but fragments will not do that..<br/>     and so - single page applications, like the ones that use angularjs, rely heavily on fragments.<br/>     this method allows them to keep a state on the url without reloading the page.<br/>     saving the state is important - it allows you to copy paste the url and send it to someone else - and not refreshing the page gives you a nice user experience<br/>       </p> <p>  it is important to also note that recently, since html5, browsers now support changing the url without refreshing the entire page..<br/>  and so no need for fragments anymore.. <br/>  in angularjs application you can simply define:    <code>$locationProvider.html5Mode(true)</code> </p> <p>  personally, i am still not confident enough to use the html5mode, so i keep using fragments. more on this soon<br/>  however - you should consider using html5 mode as some crawlers support only that method.  </p> <p>  and so the single page applications live happily ever after.. until seo comes to the picture..<br/> </p> <h3> how do crawlers handle single page applications ? </h3> <p>  by the name you can understand that crawling a single page application is very easy - as there is only a single page.. but is misleading.<br/>  in fact there are a lot of pages in single page applications, but all the pages are loaded lazily in the background while one does not - the single page.<br/>  this actually causes a lot of issues to crawlers as they do not have that \"lazy background\" feature as it requires running javascript and invoking ajax calls. <br/> </p> <p>  so when a crawler comes to a single page application it should somehow create a request to a prerendered version of the page.<br/> </p> <h3> google's solution to the problem </h3> <p>  along came google and declared a new standard.  </p> <p>  if the url contains '#!' (hash-bang), this hash bang will be replaced with <code>_escaped_fragment_</code><br/>  and so if your url looks like so    <code>http://domain:port/path/?query#!fragment</code> (note the <code>!</code> that was not there before) it will be crawled as<br/>  <code>http://domain:port/path/?query&and;_escaped_fragment_=escaped_fragment</code> where escaped fragment is essentially the fragment without special characters that has other meaning when they are not after a hash tag.<br/> </p> <h3> html 5 mode </h3> <p>  another, more modern option today is to use html 5 mode.<br/>  this essentially tells angularjs to stop using this format <code>http://domain:port/path/?query#fragment</code> and to start using    <code>http://domain:port/fragment</code>.<br/>  browsers can now support changing the url without refreshing, the backend recieves the entire path, and everyone are happy.. <br/>  i chose not to use this method as it is relatively new and there is still some trust i need to have in this before i use it.<br/> </p> <p>  but not all crawlers following google's standard.<br/>  if you'll try to share your page on linkedin you will have problems unless you use html5.<br/>  you can still expose specific urls for sharing, but it would be nicer to have it right out of the box.<br/>  i encourage you to try using html5 mode.<br/> </p> <h3> adding the hash-bang </h3> <p>  now comes the sad part of adding a '!' too all your urls..<br/>  define the following to angular :  <code>$locationProvider.html5Mode(false).hashPrefix('!');</code>  and go over all the links you wrote and change them.  </p> <p>  for backward compatibility, you should also add a script to your header to redirect from <code>#</code> to <code>#!</code>:   <pre class=\"prettyprint\"><br /><script><br />  try {<br />      if ( window.location.hash.indexOf(&#039;#/&#039;) === 0 ){<br />          window.location.hash = &#039;#!/&#039; + window.location.hash.substring(2);<br />      }<br />  }catch(e){<br />      try{<br />          console.log(&#039;unable to redirect to new url&#039;,e);<br />      }catch(e){}<br />  }<br /><br /></script>  <br />  </pre> </p> <h2> Next time </h2> <div>  the next article will help you <a href=\"/2014/10/seo-with-phantomjs-part-3.html\">set up a sitemap and serve prerendered version of your pages</a><br/>  it bascially applies everything we learned until now.<br/>  that will be the last article in this serie.  </div></div> "
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2885908267138253456/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-with-phantomjs-part-2.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2885908267138253456"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2885908267138253456"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-with-phantomjs-part-2.html",
                        "_title": "seo with phantomjs part 2"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4682277123277825118",
                "published": "2014-10-08T02:08:00.000-07:00",
                "updated": "2014-10-08T02:08:00.391-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nodejs"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "seo wtih phantomjs part 1"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"><div class=\"alert alert-info alert-block\"> this article is part of a series of articles explaining about <a href=\"/2014/10/seo-with-phantomjs.html\">seo and single page applications.</a><br/> the stack i use contains node, angular, nginx etc.<br/> in this part we are focusing on phantomjs and how to use it to prerender a page with javascript. <br/></div><h1> phantomjs to the rescue </h1> <div>  <p>   phantomjs is a browser that runs in the memory (no graphics required).<br/>   you install it by running <code>npm -g install phantomjs</code> and then verify it is available by running    <code>phantomjs --version</code>. <br/>   since it is a browser, it can do whatever a browser can such as render css, execute javascript and so on<br/>    </p>  <p>   first thing i did was write a small snippet of code testing out phantomjs. <br/>   <a href=\"http://phantomjs.org/api/webpage/property/content.html\" target=\"_blank\" title=\"PhantomJS get HTML\">here is a great snippet</a>     you find when searching <code>phantomjs get html</code> from phantomjs official site   </p>  <pre class=\"prettyprint\"><br />var webPage = require(&#039;webpage&#039;);<br />var page = webPage.create();<br /><br />page.open(&#039;http://phantomjs.org&#039;, function (status) {<br />  var content = page.content;<br />  console.log(&#039;Content: &#039; + content);<br />  phantom.exit();<br />});<br />  </pre>  <p>   so i wrote a file call <code>phantom_example.js</code> and obviously did the same mistake like everyone else <br/>   and i ran <code>node phantom_example.js</code>.<br/>   and i got the following error   </p>   <pre class=\"prettyprint\"><br />module.js:340<br />    throw err;<br />          ^<br />Error: Cannot find module &#039;phantom&#039;<br />    at Function.Module._resolveFilename (module.js:338:15)<br />    at Function.Module._load (module.js:280:25)<br />    at Module.require (module.js:364:17)<br />    at require (module.js:380:17)<br />    at Object.<anonymous> (/full/path/scripts/phantom_example.js:2:19)<br />    at Module._compile (module.js:456:26)<br />    at Object.Module._extensions..js (module.js:474:10)<br />    at Module.load (module.js:356:32)<br />    at Function.Module._load (module.js:312:12)<br />    at Function.Module.runMain (module.js:497:10)<br />  </pre>    </div> <div>     after digging around i found the obvious solution.<br/>     phantomjs is a command line, and not a library i include. <br/>     so running the command <code>phantomjs phantom_example.js</code> resolved it for me and i got the html.   </div> <h1> running this from within my server </h1> <div>    so this script required me to run phantomjs while i wanted to get the same result without leaving the server.<br/>    this was even simpler.<br/>    turns out there are a lot of libraries that do just that<br/>    my personal favorite is <a href=\"https://www.npmjs.org/package/phantom\" target=\"_blank\">phantom</a>.<br/>    these libraries essentially run the <code>phantomjs</code> commandline for you. <br/>    so when you invoke them, you will see a phantomjs process running in the background <br/>    and so some of them might require you to pre-install phantomjs.<br/>    phantom is a library that requires it to be installed.<br/>    here is a script with phantom that does the same thing. running <code>node phantom_example.js</code> will produce the right result.<br/>    <pre class=\"prettyprint\"><br />var phantom = require(&#039;phantom&#039;);<br />var url = &#039;http://phantomjs.org&#039;;<br />phantom.create(function (ph) {<br />    return ph.createPage(function (page) {<br />        page.open(url, function ( status ) {<br />            if ( status === &#039;fail&#039;){<br />                console.log(&#039;unable to open url&#039;, status);<br />                ph.exit();<br />            }else {<br />                page.evaluate(function () {<br />                    return document.documentElement.innerHTML;<br />                }, function (result) {<br />                    console.log( result);<br />                    ph.exit();<br />                });<br />            }<br /><br />        });<br />    });<br />});    <br />    </pre> </div> <h2> Next part </h2><div> the next article will talk about <a href=\"/2014/10/seo-with-phantomjs-part-2.html\">crawlers and single page application</a> where we will understand the problem and 2 solutions introduced by google and html5.<br/></div> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4682277123277825118/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-wtih-phantomjs-part-1.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4682277123277825118"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4682277123277825118"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-wtih-phantomjs-part-1.html",
                        "_title": "seo wtih phantomjs part 1"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-539166103212192154",
                "published": "2014-10-07T11:49:00.002-07:00",
                "updated": "2014-10-07T11:49:46.929-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "setting up certificate authentication for SSH"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"><p>As time moves on, I am getting used to have a pem file for ssh, and then I can simply edit my /etc/ssh/ssh_config file and reduce the ssh command to simply specify the domain name.  </p><p>However, sometimes I get a machine that prompts me for username/password.  </p><p>It seems that the process to switch user/password to a certification authentication is very simple.  </p><p>The 2 commands you need to run are:  </p><pre><br />ssh-keygen<br />ssh-copy-id -i ~/.ssh/generate_key_filename user@hostname<br /></pre><p>The first command will generate your key.  The second one will copy it to the remote machine.  </p><p>and that's it. It seems you don't even need to configure ssh_config file afterwards.  </p><p>What happens behind the scenes is that you get a private and public keys in you ~/.ssh folder, and then you copy your public key to the remote server.  This public key can be found on ~/.ssh/authorized_key so technically, you can configure this entire process manually.  </p><p>If someone can please comment as to why i don't need to configure ssh_config in the first method, that would be appreciated.  </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/setting-up-certificate-authentication.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/539166103212192154"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/539166103212192154"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5399747099302319309",
                "published": "2014-10-01T02:04:00.000-07:00",
                "updated": "2014-10-01T02:04:00.143-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nodejs"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "seo with phantomjs"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"> <h1> seo with phantomjs</h1> <div class=\"subtitle\"> angularjs, seo, nginx, phantomjs, facebook share, node and sitemaps - in 60 minutes or less  </div>   <div>  when i was asked about how to make an angular site seo friendly, i was shocked to discover that <br/>  even though googlebot is supposed to support javascript, angular apps still have placeholders <br/>  where values should be, making your search result display as <code>{{title}}.</code>   </div> <div>  really? 2014 is almost over, and we have to deal with prerendering still? omg.. <br/> </div> <div>  as i was getting dizzy with the thought of having some jade template engine in my beautiful mean stack code, <br/>  i decided to risk everything and write a solution with phantomjs. <br/>  you will not believe how simple it is<br/> </div> <div>  i was then shocked again to discover that there are services doing just that, and they charge a lot of money!<br/>  i was unimpressed by services like <a href=\"https://prerender.io/\" target=\"_blank\" title=\"prerender\">prerender.io</a> <br/>  and what they offer. escpecially when i knew i was going to have a lot of pages soon.   </div> <div>  and besides, why pay when it is so darn easy?  </div> <h2> sharing in facebook doesn't work too, so who cares about google crawler? </h2> <p>  even if google has javascript support, i want to be able to share my pages on facebook and other social networks.. <br/>  so i need a better solution.<br/> </p> <p>  in the next couple of articles i will talk in depth about how to add seo support for single page applications.<br/>  <ul>   <li> <a href=\"/2014/10/seo-wtih-phantomjs-part-1.html\">about phantomjs</a> - where i exaplain about phantom and show how to use it outside and inside of node server</li>   <li> <a href=\"/2014/10/seo-with-phantomjs-part-2.html\">single page application crawling</a> - where i explain a bit about how crawlers work and thus how the solution works </li>   <li> <a href=\"/2014/10/seo-with-phantomjs-part-3.html\">hooking it all together </a> - where we show how to generate sitemap at runtime and serve the prerendered version of the page</li>  </ul> </p></div>     "
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5399747099302319309/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-with-phantomjs.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5399747099302319309"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5399747099302319309"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/seo-with-phantomjs.html",
                        "_title": "seo with phantomjs"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1599606835787299647",
                "published": "2014-06-18T23:59:00.001-07:00",
                "updated": "2014-06-18T23:59:20.056-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Configuring log levels for log4js"
                },
                "content": {
                    "_type": "html",
                    "__text": " log4js:{         \"levels\" : {             \"server\" : \"info\",             \"Cloudify4Node\" : \"info\"         },         appenders: [             { \"type\":\"console\" },             {                 \"type\": \"file\",                 \"filename\": \"logs/application.log\",                 \"maxLogSize\": 20480,                 \"backups\": 3             }         ],         replaceConsole: true     },"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1599606835787299647"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1599606835787299647"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6897706746104242164",
                "published": "2014-05-07T21:58:00.001-07:00",
                "updated": "2014-05-07T21:58:49.765-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "using passportJS"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6897706746104242164"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6897706746104242164"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4690589536977044460",
                "published": "2014-04-24T21:31:00.000-07:00",
                "updated": "2014-04-24T21:31:11.301-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "spring and play framework"
                },
                "content": {
                    "_type": "html",
                    "__text": "tired of using the play2 spring module. wrote my own.   http://cupofjava.de/blog/2012/11/23/fully-fledged-spring-support-in-play-2-dot-0/"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/04/spring-and-play-framework.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4690589536977044460"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4690589536977044460"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5120165488627399216",
                "published": "2014-03-03T00:01:00.000-08:00",
                "updated": "2014-03-03T00:01:07.744-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "How to make your UI team better"
                },
                "content": {
                    "_type": "html",
                    "__text": "Node"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/03/how-to-make-your-ui-team-better.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5120165488627399216"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5120165488627399216"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-9122193009649040795",
                "published": "2014-03-02T23:59:00.002-08:00",
                "updated": "2014-03-02T23:59:39.591-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Should you have Front-End and Back-End developers?"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/03/should-you-have-front-end-and-back-end.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/9122193009649040795"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/9122193009649040795"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-752911873720416691",
                "published": "2014-02-08T03:54:00.002-08:00",
                "updated": "2014-02-08T03:54:34.604-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "easily using passportjs "
                },
                "content": {
                    "_type": "html",
                    "__text": "would've expected a copy/paste, instead got a lot of errors.  Should've read the \"configure\" page too.   serializeUser( );"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/02/easily-using-passportjs.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/752911873720416691"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/752911873720416691"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3004286952710189302",
                "published": "2013-12-10T06:04:00.001-08:00",
                "updated": "2013-12-10T06:04:39.347-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Wrapping JQuery ajax in AngularJS"
                },
                "content": {
                    "_type": "html",
                    "__text": "The reason - I know JQuery, and it didn't work for me in AngularJS.   AngularJS still does not support this  FormData   use q and defer"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/12/wrapping-jquery-ajax-in-angularjs.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3004286952710189302"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3004286952710189302"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8823110319271745446",
                "published": "2013-12-10T06:02:00.000-08:00",
                "updated": "2013-12-10T06:02:18.325-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Implementing Layouts in AngularJS"
                },
                "content": {
                    "_type": "html",
                    "__text": "I see a lot of people having hard time with this in angular due to ng-view which is confusing.    The goal -   to have a reusable page layout  The tools -   wrong way - ng-include  you might see variations of things like   <ng-include src=\"header\"> </ng-include>   <ng-view> </ng-view>   <ng-include src=\"footer\"> </ng-include>  or god forbid each page should copy/paste the includes.. why the hack would I want to copy paste if I have angularjs?  my way - layout directive with transclude   problem - scope issues like in ng-repeat - just use objects on the scope. "
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/12/implementing-layouts-in-angularjs.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8823110319271745446"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8823110319271745446"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7020820942837291158",
                "published": "2013-11-04T22:34:00.000-08:00",
                "updated": "2013-11-04T22:34:00.459-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "gruntjs"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "grunt"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Gruntfile.js - adding another HTML file to usemin"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog autopre\" >  <h1>Adding an HTML to the Gruntfile usemin</h1> <p>  Recently I started using node and with it yo, grunt and bower.<br/>  It is nice to get a quick kickstart<br/>  But now when I have to add/modify something in the build process, <br/>  I get stumped a lot.  </p>  <p>  You usually have a single base html file called <code>index.html</code><br/>  and then you have Angular with ng-view to change content<br/>  thus generating a Single Page Application.<br/> </p> <p>  However, I always find it necessary to have error pages which are self contained,<br/>  which means <code>index.html</code> is not involved.<br/>  </p> <p>  While yo's generators take care of <code>index.html</code>, your error page does not load correctly.<br/>  The reason for this is the <code>usemin</code> task in grunt which turn your <br/>  <code>href</code> attributes to point to the minified version of the file.<br/>  For example, if <code>index.html</code> has the following in the header   <pre><br /><!-- build:css({.tmp,app}) styles/main.css --><br /><link rel=\"stylesheet\" href=\"styles/main.css\"><br /><link rel=\"stylesheet\" href=\"styles/page1.css\"><br /><!-- endbuild -->  <br />  </pre>  grunt usemin will turn it into this   <pre><br /><link rel=\"stylesheet\" href=\"styles/1b62fe48.main.css\"><br />  </pre>  note that page1 is not included in the output, and that is because the new <code>main.css</code><br/>  contains them both.<br/> </p> <p>  So the question is what should I do if I have index2.html.<br/>  How would I get it to work here too. <br/> </p> <h2> Solution </h2> <p>  The trick is to look at useminPrepare which by default looks like so<br/>  <pre><br />useminPrepare: {<br />    html: &#039;<%= yeoman.app %>/index.html&#039;,<br />    options: {<br />        dest: &#039;<%= yeoman.dist %>&#039;<br />    }<br />},  <br />  </pre>  </p> <p>  If you modify the HTML field to include some other file, that file will be picked to the build process too.<br/>  You do that by simply turning that field into an array like so:   <pre><br />useminPrepare: {<br />    html: [&#039;<%= yeoman.app %>/index.html&#039;,&#039;<%= yeoman.app %>/index2.html&#039;],<br />    options: {<br />        dest: &#039;<%= yeoman.dist %>&#039;<br />    }<br />},  <br />  </pre> </p> <p>   Assuming your <code>index2.html</code> has something similar to <code>index.html</code>   <pre><br /><!-- build:css({.tmp,app}) styles/main2.css --><br /><link rel=\"stylesheet\" href=\"styles/main2.css\"><br /><link rel=\"stylesheet\" href=\"styles/page2.css\"><br /><!-- endbuild -->  <br />  </pre>  it will get picked up and processed accordingly.<br/> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7020820942837291158/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/11/gruntfilejs-adding-another-html-file-to.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7020820942837291158"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7020820942837291158"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/11/gruntfilejs-adding-another-html-file-to.html",
                        "_title": "Gruntfile.js - adding another HTML file to usemin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5037627106959215894",
                "published": "2013-10-28T02:45:00.000-07:00",
                "updated": "2013-10-28T02:45:00.544-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nodejs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Configuration Module for NodeJS"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\">    <h1> configuration Module for NodeJS </h1>    <p>        NodeJS is great but it lacks settings/configuration mechanisms.<br/>        Actually - I understand why it lacks it - configuration nowadays is written in JSON anyway.. so in node you just import it..<br/>        But there are some features you still want/need that do not exist yet. <br/>    </p>    <h2> Missing Features </h2>      <p>       <ul>            <li>Overriding with another JS file<br/>This means I want the same syntax to override the configuration. Some libraries suggest command line flags.. I do not like it. </li>            <li>Front-end support <br/> I want to change configuration in a single place, and I want to be able to configure by front-end as well.</li>            <li>Fail to load if a required configuration is missing</li>       </ul>    </p>    <h2> Implementation </h2>    <p><pre class=\"prettyprint\"><br />var publicConfiguration = {<br />    \"title\": \"Hello World\"<br />    \"errorEmail\": \"null\" // don't send emails if null<br /><br />};<br /><br />var privateConfiguration = {<br />    \"port\":9040,<br />    \"adminUsername\": undefined, <br />    \"adminPassword\": undefined<br />}        <br /><br />var meConf = null;<br />try{<br />    meConf = require(\"../conf/dev/meConf\");<br />}catch( e ) { console.log(\"meConf does not exist. ignoring.. \")}<br /><br /><br /><br /><br />var publicConfigurationInitialized = false;<br />var privateConfigurationInitialized = false;<br /><br />function getPublicConfiguration(){<br />    if (!publicConfigurationInitialized) {<br />        publicConfigurationInitialized = true;<br />        if (meConf != null) {<br />            for (var i in publicConfiguration) {<br />                if (meConf.hasOwnProperty(i)) {<br />                    publicConfiguration[i] = meConf[i];<br />                }<br />            }<br />        }<br />    }<br />    return publicConfiguration;<br />}<br /><br /><br />function getPrivateConfiguration(){<br />    if ( !privateConfigurationInitialized ) {<br />        privateConfigurationInitialized = true;<br /><br />        var pubConf = getPublicConfiguration();<br /><br />        if ( pubConf != null ){<br />            for ( var j in pubConf ){<br />                privateConfiguration[j] = pubConf[j];<br />            }<br />        }<br />        if ( meConf != null ){<br />              for ( var i in meConf ){<br />                  privateConfiguration[i] = meConf[i];<br />              }<br />        }<br />    }<br />    return privateConfiguration;<br /><br />}<br /><br /><br />exports.sendPublicConfiguration = function( req, res ){<br />    var name = req.param(\"name\") || \"conf\";<br /><br />    res.send( \"window.\" + name + \" = \" + JSON.stringify(getPublicConfiguration()) + \";\");<br />};<br /><br /><br />var prConf = getPrivateConfiguration();<br />if ( prConf != null ){<br />    for ( var i in prConf ){<br />        if ( prConf[i] === undefined ){<br /><br />            throw new Error(\"undefined configuration [\" + i + \"]\");<br />        }<br />        exports[i] = prConf[i];<br />    }<br />}<br /><br /><br />return exports;<br /></pre>    </p>     <h2> Explanations </h2>    <p>        <dl>            <dt>sendPublicConfiguration</dt>            <dd>                a route to send the public configuration that can be exposed in the front-end.<br/>                You should write something like                  <pre><br />app.get(\"/backend/conf\", require(\"conf.js\").sendPublicConfiguration);<br />                </pre>                and then you can get the configuration by importing a script                 <pre><br /><script src=\"/backend/conf?name=myConf\"></script>                 <br />                </pre>                The name decides the global variable name that will include the configuration.             </dd>            <dt>undefined</dt>            <dd>Means a configuration is required</dd>            <dt>null</dt>            <dd>Means the configuration is optional</dd>            <dt>myConf</dt>            <dd>                The overrides file. The code above assumes it is under <code>app</code> folder and that meConf is under <code>conf/dev</code> folder.                  You can easily change that so you can pass the overrides path when you require the module.             </dd>            <dt>Overrides logic</dt>            <dd>                Private configuration simply takes all values from public configuration and then uses meConf for overrides.<br/>                Public configuration filters meConf and overrides only keys it already has. <br/>                This way we make sure nothing private is exposed.<br/>            </dd>        </dl>    </p>     <h2> Environment Support </h2>    <p>        Some people find it nice if they can run node with a flag stating if they are running in production or development.<br/>        I am not one of those people.<br/>        However, my code answers their needs as well.<br/>        You can have multiple meConf.js file         <pre><br />meConf.production.js<br />meConf.development.js<br />        </pre>         and so on, and import the right one using the environment flag. <br/>    </p>    <p>        You can also have a single meConf file which has fields for production, development and such and invoke the same logic.          <pre><br />            meConf = require(\"../conf/dev/meConf\")[environmentFlag];<br />        </pre>        Use it as you see fit.      </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5037627106959215894/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/configuration-module-for-nodejs.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5037627106959215894"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5037627106959215894"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/configuration-module-for-nodejs.html",
                        "_title": "Configuration Module for NodeJS"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2361873310043150602",
                "published": "2013-10-21T00:51:00.000-07:00",
                "updated": "2013-10-21T00:51:01.018-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "sass"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "When Play Framework 2.X Sass plugin says \"Sass compiler: ruby.exe: No such file or directory -- project_root/sass (LoadError)\""
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\">    <h1> The Problem </h1>      <p>     Running Play!Framework (I am using 2.0.4) with Sass plugin throws a <code>LoadError</code> message.<br/>     <pre>Sass compiler: ruby.exe: No such file or directory -- project_root/sass (LoadError)</pre>    </p>    <h2> About Sass Plugin </h2>    <p>     <a href=\"https://github.com/jlitola/play-sass\">Jlitola's Play!Framework SASS plugin </a> is a nifty piece of code that enables SASS in your Play!Framework project.<br/>     It requires that Ruby and SASS would be already installed on your computer. <br/>     The SASS gem creates to files in your <code>RUBY_HOME\\bin</code> folder.<br/>     The first is <code>sass.bat</code> (for windows) and the other is <code>sass</code> which is the gem implementation in Ruby. This is a Ruby file. <br/>    </p>    <h2> Proper Folder Structure in Play Project </h2>    <p>        This plugin expects you to have <code>scss</code> files under your <pre>app/assets</pre> directory, and it will copy them under <pre>public</pre> directory. <br/>        I write my scss files under <pre>app/assets/styles</pre> and so the plugin outputs them under <pre>public/styles</pre>. <br/>        I can then link them in my HTML with the path <pre>/public/styles</pre>    </p>    <h2> What does the error mean? </h2>    <p>     It seems that Ruby is trying to find the SASS gem file in your project's root folder.<br/>        People might think it is looking for a folder since the error says <pre>No such file or directory</pre> and it is easier to create a directory - is it not? <br/>    </p>    <h2> A Work-Around </h2>    <p>     A quick work around would be to copy that <code>sass</code> file to your project's root folder. <br/>     This does not resolve the problem that Ruby is looking for that file there instead of under Ruby's bin directory, but it will enable you to work on your project.     </p>    <h2> Reference </h2>      <ul>       <li> <a href=\"http://stackoverflow.com/q/19091096/1068746\" target=\"_blank\" title=\"My Question in Stackoverflow\">My Question in Stackoverflow </a></li>       <li> <a href=\"https://groups.google.com/d/msg/play-framework/j1npLLQlj1o/POOlePhJv1QJ\" target=\"_blank\" title=\"Google Groups Question\">A Question about this in Google Groups - scroll down to see my answers </a></li>    </ul></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2361873310043150602/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/when-play-framework-2x-sass-plugin-says.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2361873310043150602"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2361873310043150602"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/when-play-framework-2x-sass-plugin-says.html",
                        "_title": "When Play Framework 2.X Sass plugin says \"Sass compiler: ruby.exe: No such file or directory -- project_root/sass (LoadError)\""
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2977279031447087279",
                "published": "2013-10-14T14:19:00.000-07:00",
                "updated": "2013-10-14T14:19:00.485-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Improving Play!Framework 2.x Configuration "
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">  <h1>Play!Framework 2.0 developer-friendly configuration</h1>    <p>        Play!Framework 1.0 had a nasty configuration mechanism. <br/>        To make a long story short - it was a properties file.<br/>        Play!Framework 2.0 came out, and even though the configuration section <br/>        got some big improvements, there are still things that annoy me. <br/>        In this post I will show you what annoys me and how to resolve it.<br/>    </p>    <div class=\"alert\">        This post refers to Play!Framework 2.0.4.<br/>        Play!Framework 2.X is still growing and changing, so this might not be relevant for the latest version.<br/>        However, the general concept is very useful and can be applied to almost every software.     </div>    <h2>The Pros</h2>    <p>        Play!Framework uses typesafe configuration library. <br/>        Basically this library, written in scala - so we will see some scala object conversion soon<br/>        lets you write in HOCON syntax which is a combination of key-value and JSON-like syntax.<br/>        It also allows you to import other configuration files and override values.<br/>    </p>    <h2>The Cons</h2>    <p>        With all the nice features,<br/>        the API play provides is pretty disappointing.<br/>        For example, this is how you get a boolean         <pre>Play.current().configuration().getBoolean(\"isNiceApi\");</pre>    </p>    <p>        There are several things I do not like in this API         <ul>            <li>It requires hard-coded strings - and no, final static String with CAPITAL_LETTERS is even uglier..</li>            <li><code>Play.current().configuration()</code> is simply ugly and too coupled to Play.</li>            <li><code>getBoolean</code> is better than <code>(Boolean)Play.conf.get(\"key\")</code> but still ugly</li>        </ul>         Ugly in computers means that the more you use it, the more you work..<br/>    </p>    <h2> Fast Way To Go Around Ugly API - Wrappers </h2>    <p>        If you do not wrap this API, you either have a really small application (which is no excuse)<br/>        or you are a novice developer. <br/>        ( Or you are an evil developer, but then you would not be reading this blog.. )<br/>        So, lets say we have a configuration that includes          <ul>            <li>Timeout</li>            <li>Support Email</li>            <li>New Feature On/Off</li>        </ul>         A wrapper would look like this Pseudo-Code          <pre class=\"prettyprint\"><br />public class ConfWrapper{<br />    <br />    public Configuration getConf(){<br />        return Play.current().application().configuration()<br />    }<br /><br />    public long getTimeout(){<br />        return getConf().getLong(\"timeout\");<br />    }<br /><br />    public String getSupportEmail(){<br />        return getConf().getString(\"supportEmail\");<br />    }<br /><br />    public boolean isNewFeatureOn(){<br />        return getConf().getBoolean(\"newFeatureOn\");<br />    }<br /><br /><br />}            <br />        </pre>        This is nice, but not practical. <br/>    </p>     <h2> Why Wrapper Is Not Practical? </h2>    <p>        <ul>            <li> You work hard </li>            <li> I access <code>Play.current().application().configuration()</code> every time instead of caching values </li>            <li> No default value support - Number 1 problem in my opinion </li>        </ul>         You could work harder to get the above features..<br/>        But let me show you a very simple solution to get it all and more.. </p>    </p>     <h2> Wish List </h2>    <p>        I want the code to look like this         <pre><br />public class ApplicationConf{<br />    public long timeout = 10000; // 10 seconds<br />    public String supportEmail = \"support@example.com\";<br />    public boolean newFeatureOn = true;<br />}        <br />        </pre>        This is not a joke - this class will include the values from the properties file once we are done.<br/>        This is my design :)<br/>        and that's it!!! Can you believe it? Well, you should not because we will have another line of code when Play application starts<br/>        Lets see how it is done.      </p>     <h2> Implementing Our Design </h2>     <p>        To implement our design, all we need is to initialize our configuration class.<br/>        Lets call that class <code>ConfigurationInitializer</code> (brilliant!)     </p>    <pre class=\"prettyprint\"><br />public class ConfigurationInitializer {<br /><br />    private static Logger logger = LoggerFactory.getLogger(ConfigurationInitializer.class);<br />    private final Application application;<br /><br />    public ConfigurationInitializer(Application application) {<br />        this.application = application;<br />    }<br /><br /><br />    public <T> T populate( T confObj ){<br />        try{<br />        Set<Field> allFields = ReflectionUtils.getAllFields(confObj.getClass(), Predicates.alwaysTrue());<br />        for ( Field f : allFields ){<br />            logger.info( \"initializing [{}#{}]\", confObj.getClass().getSimpleName(), f.getName());<br />            if (application.configuration().keys().contains(f.getName())) {<br /><br />                if (Boolean.class.isAssignableFrom(f.getType())) {<br />                    f.set( confObj, application.configuration().getBoolean(f.getName() ));<br />                } else if (String.class.isAssignableFrom(f.getType())) {<br />                    f.set( confObj, application.configuration().getString(f.getName() ));<br />                } else if (Long.class.isAssignableFrom(f.getType())) {<br />                    f.set( confObj, application.configuration().getMilliseconds(f.getName() ));<br />                }<br />            }<br />        }<br />        return confObj;<br />        }catch(Exception e){<br />            logger.error(\"unable to populate configuration\",e);<br />            throw new RuntimeException(\"unable to populate configuration\",e);<br />        }<br />    }<br />}        <br />    </pre>    <h2> This is pretty Naive</h2>    <p>        The above implementation is pretty naive but(!) still much better than a wrapper <br/>        The only thing left is to execute this code.<br/>        If you add a class named <code>Global</code> to Play!Framework (under the app folder, no package) <br/>        Play provides global hooks you can use to initialize this configuration.     </p>    <pre class=\"prettyprint\"><br />public class Global extends GlobalSettings {<br />    private static Logger logger = LoggerFactory.getLogger(Global.class);<br />    @Override<br />    public void onStart(Application application) {<br />        logger.info(\"loading configuration\");<br />        ApplicationConfiguration conf = new ConfigurationInitializer( application ).populate( new ApplicationConfiguration() );<br />        logger.info(Json.stringify(Json.toJson(conf)));<br /><br />        super.onStart(application);<br />    }<br />}<br />    </pre>    <p>        The above code currently prints the configuration to the console.<br/>        To override the values in the object, all you need to do is have keys that match the fields' name.<br/>        For example         <pre><br />timeout=5000<br />supportEmail=noreplay@example.com<br />newFeatureOn=false        <br />        </pre>    </p>    <p>        Now, all you need to do is save some reference this configuration object which will be reachable to you.<br/>        You can use a static field, a singleton pattern.<br/>        I use Spring - which is basically the singleton pattern.<br/>    </p>    <h2> What Now? </h2>    <p>        Next post I will show you how to write the code above in a better more modular/generic way<br/>        and we will add some small stuff to make this algorithm much more configurable and powerful.<br/>        For example:         <ul>            <li> Support nested configuration objects </li>            <li> Support lists!!! - Did you know Play!Framework 2.0.4 does not support list in configuration even though typesafe does?</li>            <li> Override the configuration key </li>        </ul>    </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2977279031447087279/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/improving-playframework-2x-configuration.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2977279031447087279"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2977279031447087279"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/improving-playframework-2x-configuration.html",
                        "_title": "Improving Play!Framework 2.x Configuration "
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5135240146394499874",
                "published": "2013-10-07T04:52:00.000-07:00",
                "updated": "2013-10-07T04:52:00.072-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "selenium"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "cglib"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Adding IFrame Support To Our Selenium Framework - Part 2"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">  <h1>Adding IFrame support to our Selenium Extension Library - Fixing Implementation</h1> <p>  This is another post in our \"Selenium Extension Library\" serie. <br/>  So far we :    <ul>   <li>Introduced \"Compoents\" that are basically smart WebElements</li>   <li>Allowed components to embed one another</li>   <li>Add IFrame support - but for only a single level</li>  </ul>  Now, it is time to fix our IFrame support so that we support IFrames that are in other IFrames. <br/> </p> <h2> Problem and Wishlist </h2> <p>  Our major problem is that Selenium/Web-Driver's API only supports 2 methods   <ul>   <li> <code>switchTo.frame</code> (enter)- which goes into an iframe</li>   <li> <code>switchTo.defaultContent</code> (leaveAll)- leaves all iframes and goes back to top window</li>  </ul>  And what we are missing is    <ul>   <li> <code>switchTo.parent</code> (exit)- leaves current iframe and goes back to parent iframe</li>  </ul>  The names in the (brackets) are simpler names I chose for our scenarios.<br/>  I will use these names in my new API.  </p> <h2> Implementation </h2> <p>  The way I chose to implement this is to write <code>SwitchManager</code> with the following api   <ul>   <li> <code>enter( List<WebElement> framePath )</code></li>   <li> <code>enter(WebElement frame)</code></li>   <li> <code>exit()</code></li>   <li> <code>List<WebElement> getCurrentPath()</code></li>  </ul>  And the data set I chose is a FIFO.<br/>  Since I am using Java, I used <code>java.util.Stack</code><br/>  The important thing to note about it is that iteration is according to order of insertion.<br/>  This means we will not have any problems iterating the Stack.  </p> <div class=\"alert\">  The code you are about to see does not use interfaces and abstractions<br/>  in some foolish(?) hope this will help you stay focused on the target.<br/>  In the following post I will use this code as an example where you should use frameworks like Spring<br/>  or Guice to perform Dependency Injection (DI) and use interfaces.<br/> </div> <h2> Our Test </h2> <p>  The test is simple, we will have iframe2 inside iframe1, and we will get the text in iframe2.<br/>  We aim to reach the following code  </p> <pre class=\"prettyprint\"><br />WebDriver firefoxDriver = new FirefoxDriver();<br />firefoxDriver.get(myUrl);<br />MyPage myPage = new MyPage();<br />SwitchManager switchManager = new SwitchManager().setWebDriver(firefoxDriver);<br />PageFactory.initElements(new MograblogFieldDecorator(firefoxDriver, firefoxDriver).setSwitchManager( switchManager ), myPage);<br />FramePage2 framePage2 = myPage.framePage1.framePage2;<br />System.out.println(\"myPage.framePage.getText() = \" + framePage2.getText());<br /> </pre> <p>  Please note the code above does not actually test anything as there are no assertions.<br/> </p> <h2> Algorithm </h2> <p>  The idea in our implementation will be to drill down all required iframes before each method, <br/>  and leaving all iframes when the method exists.<br/>  This is the same idea we used for a single layer, we only had to add the entire frame path each time.<br/> </p> <h2> SwitchManager code </h2> <pre class=\"prettyprint\"><br />public class SwitchManager {<br /><br />    private static Logger logger = LoggerFactory.getLogger(SwitchManager.class);<br /><br />    private Stack<WebElement> switchStack = new Stack<WebElement>();<br /><br />    private WebDriver webDriver;<br /><br /><br /><br />    public void enter(WebElement e) {<br />        switchStack.push(e);<br />        enterStack();<br />    }<br /><br />    private void enterStack( ){<br />        webDriver.switchTo().defaultContent();<br /><br />        Set<WebElement> memory = new HashSet<WebElement>();<br /><br />        for (WebElement webElement : switchStack) {<br />            if ( !memory.contains(webElement)){<br />                memory.add(webElement);<br />                try{<br />                    webDriver.switchTo().frame( webElement );<br />                }catch(Exception e){<br />                    logger.error(\"nable to switch to element\",e);<br />                }<br />            }<br />        }<br />    }<br /><br /><br /><br />    public SwitchManager enter(List<WebElement> handler) {<br />        switchStack.clear();<br />        switchStack.addAll(handler);<br />        enterStack();<br />        return this;<br />    }<br /><br />    public SwitchManager goToDefaultContent(){<br />        webDriver.switchTo().defaultContent();<br />        return this;<br />    }<br /><br />    public void exit() {<br />        switchStack.pop();<br />        webDriver.switchTo().defaultContent();<br />        enterStack();<br />    }<br /><br />    public List<WebElement> getCurrentPath() {<br />        return new LinkedList<WebElement>(switchStack);<br />    }<br /><br />    public SwitchManager setWebDriver(WebDriver webDriver) {<br />        this.webDriver = webDriver;<br />        return this;<br />    }<br />}<br /><br /> </pre> <p>  Please note the <code>enterStack</code> algorithm.<br/>  It does not assume that framePath is friendly.<br/>  It might have WebElements repeating themselves.<br/>  This is useful in case we want to <code>enter</code> an iframe and not leave straightaway.    </p> <h2>Using the SwitchManager</h2> <p>  The places we should look for are the same places we changed before:   <ul>   <li>MethodInterceptor, MograblogLocator.ElementHandler - responsible for invoking each method and to switch iframes before and after</li>   <li>MograblogFieldDecorator - responsible for initializing everything</li>  </ul> </p> <h2> Changing the Decorator</h2> <pre class=\"prettyprint\"><br />// allow infinite layers of wrapping - initialize components with PageFactory.<br />private void initializeElement( Field field, MograblogElement enhancedObject ) {<br />    field.setAccessible(true);<br />    logger.debug(\"loading field :  \" + field.getName());<br />    try {<br />        // NOTE : use the getter function so that CGLIB will intercept it and inject the root element.<br />        if ( field.isAnnotationPresent( SwitchTo.class )){<br />            WebElement rootElement = enhancedObject.getRootElement();<br /><br />           <span class=\"highlight\">switchManager.enter( getElementHandler(field).getSwitchTo() );<br /><br />            PageFactory.initElements(new MograblogFieldDecorator( rootElement , webDriver).setSwitchManager(switchManager), enhancedObject);<br /><br />            switchManager.exit();</span><br />        }else{<br />            <span class=\"highlight\">PageFactory.initElements(new MograblogFieldDecorator( enhancedObject.getRootElement(), webDriver).setSwitchManager( switchManager ), enhancedObject);</span><br />        }<br />    } catch (RuntimeException e) {<br />        String msg = String.format(\"problems loading field [%s]\", field.getClass().getName() + \"#\" + field.getName());<br />        logger.info(msg, e);<br />        throw new RuntimeException(msg, e);<br />    }<br />} <br /> </pre> <h2> Changing the Decorator </h2> <pre class=\"prettyprint\"><br /><br />private boolean isSwitchTo = false;<br />private SwitchManager switchManager;<br /><br />private List<WebElement> framePath;<br /><br />public ElementHandler(Field field, ElementLocator locator, WebDriver webDriver) {<br />    this.locator = locator;<br />    this.webDriver = webDriver;<br />    this.field = field;<br />    <span class=\"highlight\">this.isSwitchTo = field.isAnnotationPresent( SwitchTo.class );</span><br />    logger.debug(\"created handler for [{}]\", field);<br />}<br /><br />private WebElement locateElement() {<br />    <span class=\"highlight\">if ( isSwitchTo ){<br />        switchManager.enter(framePath);<br />    }</span><br />    return locator.findElement();<br />} <br /><br /><span class=\"highlight\">public ElementHandler setSwitchManager( SwitchManager switchManager ){<br />    this.switchManager = switchManager;<br />    framePath = switchManager.getCurrentPath();<br />    return this;<br />}</span><br /><br /><br />public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {<br />    if ( method.isAnnotationPresent( NoEnhancement.class )){<br />        return  methodProxy.invokeSuper(o, objects);<br />    }<br /><br />    logger.debug(\"[{}] intercepted method [{}] on object [{}]\", field, method, o);<br />    if (o instanceof MograblogElement) {<br />            MograblogElement comp = (MograblogElement) o;<br /><br />            WebElement element = locateElement();<br /><br />            if ( isSwitchTo ){<br />                <span class=\"highlight\">switchManager.enter( element );</span><br />                comp.setRootElement( webDriver.findElement(By.cssSelector(\"body\")));<br />            }else{<br />                comp.setRootElement(element);<br />            }<br /><br /><br />            comp.setWebDriver(webDriver);<br /><br />        try {<br />            return methodProxy.invokeSuper(o, objects);<br />        } catch (InvocationTargetException e) {<br />            throw e.getCause();<br />        } finally{<br /><br />            if ( isSwitchTo ){<br />                <span class=\"highlight\">switchManager.exit();</span><br />            }<br />        }<br /><br />    } else if (o instanceof WebElement ) {// only handle first displayed<br />        WebElement displayedElement = locateElement();<br /><br />        if (displayedElement != null) {<br />            logger.info(\"found first displayed. invoking method\");<br />            return method.invoke(displayedElement, objects);<br />        } else {<br />            logger.info(\"unable to detect first displayed\");<br />        }<br />    }<br /><br />    return null;<br /><br />}<br /> </pre>  <h2> Conclusions </h2> <p>  Last time we taught Selenium to switch to an iframe on every method call.<br/>  This solution did not work if that iframe had another iframe in it.<br/>  In this post we added support for that scenario and more. <br/>  We now support infinite number of iframes hierarchy.<br/>  It is time we move to something else, so next time we will <br/>  we will talk about making play!framework configuration user friendly. <br/> </p>     </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5135240146394499874/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/adding-iframe-support-to-our-selenium.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5135240146394499874"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5135240146394499874"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/10/adding-iframe-support-to-our-selenium.html",
                        "_title": "Adding IFrame Support To Our Selenium Framework - Part 2"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7697546868463489916",
                "published": "2013-09-30T06:26:00.000-07:00",
                "updated": "2013-09-30T06:26:00.263-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "selenium"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "cglib"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Adding IFrame Support To Our Selenium Framework"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">  <h1>Adding IFrame support to our Selenium Extension Library </h1>    <p>  So far we have written a nifty selenium extension library that allows you to treat the pages as if they were built by components rather than the primitive WebElement. <br/>  This brought your page design and development closer to your Selenium test code. <br/>  It also allows you a high abstraction and re-usability of your test code which is always good.<br/> </p> <p>  So we have components, and pages.<br/>  But what about IFrames?<br/>  Frames are basically pages.<br/>  So technically, if we taught Selenium to embed components, teaching Selenium about iframes means teaching it embed pages.<br/>  However, IFrames get a special treatment.<br/> </p>  <h2> How to use IFrame with Selenium - the unpleasant way</h2>  <p>  In this post I will assume I have a page represented by the class <code>MyPage</code> and a frame represented by <code>FramePage</code>.<br/>  MyPage HTML looks like so:   <pre class=\"prettyprint\"><br /><html><br /> <body><br />  This is my page<br />  <iframe src=\"framepage.html\"></iframe><br /> </body><br /></html><br />  </pre>   and FramePage HTML looks like so:    <pre class=\"prettyprint\"><br /><html><br /> <<body><br />  This is framepage<br /> </body><br /></html>  <br />  </pre>    </p>  <p>  If I were to write a test without the framework, it would look like so   <pre class=\"prettyprint\"><br />WebDriver firefoxDriver = new FirefoxDriver();<br />WebElement myFrame = firefoxDriver.findElement(By.cssSelector(\"iframe\"));<br />firefoxDriver.switchTo().frame( myFrame );<br />String frameText = myFrame.findElement(By.cssSelector(\"body\")).getText();<br />Assert.assertTrue(frameText.contains(\"framepage\"));<br />firefoxDriver.switchTo().defaultContent(); // get out of the frame<br />  </pre> </p> <h2> Down Sides </h2> <p>  There are a lot of bad things in the code above, <br/>  but allow me to concentrate on a particular one that annoys me.<br/>  The test knows how the HTML page looks like.. <br/>  If I change the page, I have to change the test.<br/>  There is simply no abstraction, and no re-usability. <br/>  So again, we face a major problem with Selenium's primitive API.<br/>  And that's a shame because Selenium is a great library.<br/>  But are in a position where we can easily improve this.<br/> </p> <h2> My Wishlist</h2> <p>  This is how I want the test code to look like   <pre class=\"prettyprint\"><br />WebDriver firefoxDriver = new FirefoxDriver();<br />MyPage myPage = new MyPage();<br />PageFactory.initElements(new MograblogFieldDecorator(firefoxDriver, firefoxDriver), myPage);<br />Assert.assertTrue(myPage.framePage.getText().contains(\"framepage\")); // when I am done, I am out of the frame<br />  </pre>   This is about 2/3 of the amount of code used previously. <br/>  I have an abstraction to <code>MyPage</code> which is aware of <code>FramePage</code> and I don't need to get in/out of the frame. <br/> </p>  <h2> Lets start with something easy </h2> <p>  I will first show you how to implement this for a single IFrame, and then (next post) I will show you how to do this for infinite number of embedded IFrames. <br/> </p>  <h2> Introducing @SwitchTo annotation</h2>    <p>  First lets build our pages class   <pre class=\"prettyprint\"><br />public class FramePage extends MograblogElement{<br />    public String getText(){<br />        return webDriver.findElement(By.cssSelector(\"body\")).getText();<br />    }<br />}<br /><br /><br />public class MyPage {<br />    @SwitchTo<br />    @FindBy( css=\"iframe\" )<br />    public FramePage framePage;<br />}<br /><br />@Target(ElementType.FIELD)<br />@Retention(RetentionPolicy.RUNTIME)<br />public @interface SwitchTo {<br />}<br />  </pre>  As you can see we added an annotation to mark that this is a new iframe.<br/>  However, regarding abstraction, it could have been in the same page. (the naming would be wrong then, wouldn't they? it's no longer framePage.)<br/> </p> <p>  Now, all we need to do, is to tell selenium to switch to the iframe.<br/>  We will use our decorator and enhancer to achieve this.<br/>  Our <code>intercept</code> method will look like so (new lines are highlighted)  </p> <pre class=\"prettyprint\"><br />@Override<br />public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {<br />    if ( method.isAnnotationPresent( NoEnhancement.class )){<br />        return  methodProxy.invokeSuper(o, objects);<br />    }<br /><br />    logger.debug(\"[{}] intercepted method [{}] on object [{}]\", field, method, o);<br />    if (o instanceof MograblogElement) {<br />            MograblogElement comp = (MograblogElement) o;<br /><br />            WebElement element = locateElement();<br /><br />            <span style=\"highlight\">if ( field.isAnnotationPresent( SwitchTo.class )){<br />                webDriver.switchTo().frame( element );<br />                comp.setRootElement( webDriver.findElement(By.cssSelector(\"body\")));<br />            }else{</span><br />                comp.setRootElement(element);<br />            <span>}</span><br /><br /><br />            comp.setWebDriver(webDriver);<br /><br />        try {<br />            return methodProxy.invokeSuper(o, objects);<br />        } catch (InvocationTargetException e) {<br />            throw e.getCause();<br />        } <span class=\"highlight\">finally{<br /><br />            if ( field.isAnnotationPresent( SwitchTo.class )){<br />                webDriver.switchTo().defaultContent();<br />            }<br />        }</span><br /><br />    } else if (o instanceof WebElement ) {// only handle first displayed<br />        WebElement displayedElement = locateElement();<br /><br />        if (displayedElement != null) {<br />            logger.info(\"found first displayed. invoking method\");<br />            return method.invoke(displayedElement, objects);<br />        } else {<br />            logger.info(\"unable to detect first displayed\");<br />        }<br />    }<br /><br />    return null;<br /><br />}<br /> </pre> <p>  As you can see, our enhancer switches to the frame before it invokes the <code>methodProxy</code> and switches back afterwards.<br/>  As you can also see, when it \"switches back\", it simply goes to the \"defaultContent\" which is the top window.<br/>  This is actually bad because it means we do not support embedded iframes (an iframe within another iframe).<br/>  Selenium does not provide a \"go back\" feature. We will need to add it later.<br/>  The only thing left to take care of is our initialization which happens in the decorator.<br/>  This is how it will look like  </p> <pre class=\"prettyprint\"><br />// allow infinite layers of wrapping - initialize components with PageFactory.<br />private void initializeElement( Field field, MograblogElement enhancedObject ) {<br />    field.setAccessible(true);<br />    logger.debug(\"loading field :  \" + field.getName());<br />    try {<br />        // NOTE : use the getter function so that CGLIB will intercept it and inject the root element.<br />        <span class=\"highlight\">if ( field.isAnnotationPresent( SwitchTo.class )){<br />            WebElement rootElement = enhancedObject.getRootElement();<br />            webDriver.switchTo().frame(getElementHandler(field).getSwitchTo());<br />            PageFactory.initElements(new MograblogFieldDecorator( rootElement , webDriver), enhancedObject);<br />            webDriver.switchTo().defaultContent();<br />        }else{</span><br />            PageFactory.initElements(new MograblogFieldDecorator( enhancedObject.getRootElement(), webDriver), enhancedObject);<br />        <span class=\"highlight\">}</span><br />    } catch (RuntimeException e) {<br />        String msg = String.format(\"problems loading field [%s]\", field.getClass().getName() + \"#\" + field.getName());<br />        logger.info(msg, e);<br />        throw new RuntimeException(msg, e);<br />    }<br />} <br /> </pre> <p>  As you can see, I added a function <code>getSwitchTo</code> on the handler. It simply returns <code>getElement</code>.     </p> <h2> Next Time... </h2> <p>  In my next post, I will extend this solution to support multiple iframes embedded one inside the other.  </p> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7697546868463489916/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/09/adding-iframe-support-to-our-selenium.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7697546868463489916"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7697546868463489916"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/09/adding-iframe-support-to-our-selenium.html",
                        "_title": "Adding IFrame Support To Our Selenium Framework"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7663097556447007445",
                "published": "2013-09-25T01:40:00.000-07:00",
                "updated": "2013-09-25T01:41:30.758-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "gclib"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "selenium"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Extending Selenium Even More"
                },
                "content": {
                    "_type": "html",
                    "__text": "<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script> <div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Extending Selenium Even More </h1> <div>  <p>   My last post was about how we can easily correct the faults in Selenium's Page Model<br/>   by constructing smarter components that can expose better API than WebElement.<br/>   We got rid of the impotency of the WebElement class by writing our own Decorator and Locator<br/>   and thus allowing ourselves to define Components that wrap WebElement in the most natural way you can think.<br/>   As an example, we showed a better way to implement a Select rather than exposing some utility function as proposed by Selenium.<br/>  </p>  <p>   However, currently we can only have a single layer of wrapping, which means one components cannot have another. <br/>   Using our Select example from before, we cannot reuse this component to construct a shuttle component. <br/>   The shuttle component as showed below is pretty simple - it has 2 select elements and buttons that move one option to another.<br/>  </p>   <div>   <div id=\"shuttle\">    <select class=\"available-options\" size=\"3\">     <option value=\"option1\"> option1</option>     <option value=\"option2\"> option2</option>    </select>    <button class=\"enable-options\" style=\"position:absolute;\">enable >> </button>    <button class=\"disable-options\"><< disable  </button>    <select class=\"enabled-options\" size=\"3\">    </select>        </div>   <script>    $(function(){      $(document).on(\"click\",\"#shuttle .enable-options\", function(){       console.log(\"enabling\");       $(\"#shuttle .available-options option:selected\").remove().appendTo($(\"#shuttle .enabled-options\"));      })       $(document).on(\"click\", \"#shuttle .disable-options\", function(){       $(\"#shuttle .enabled-options option:selected\").remove().appendTo($(\"#shuttle .available-options\"));      })      })    </script>  </div>  <h1> Our Spec </h1>  <p>   So basically, we would like a class to look something like the following   </p>  <pre class=\"prettyprint\"><br />public class MograblogShuttle extends MograblogElement{<br /><br />    @FindBy( css = \".available-options\" )<br />    public MograblogSelect available;<br /><br />    @FindBy( css = \".enabled-options\" )<br />    public MograblogSelect enabled;<br /><br />    @FindBy( css = \".enable-options\")<br />    public WebElement enable;<br /><br />    @FindBy( css = \".disable-options\")<br />    public WebElement disable;<br /><br />    public void enable( String val ){<br />        available.val( val );<br />        enable.click();<br />    }<br /><br />    public void disable( String val ){<br />        enabled.val( val );<br />        disable.click();<br />    }<br /><br />}<br />  </pre>  <p>   Are you finally convinced that extending Selenium is worth your while? <br/>   Can you imagine this code with only WebElements to work with? How about utility functions? <br/>  </p>     <h1> Allowing Infinite Layers of Wrapping</h1>  <p>   If you look at the code from the previous post you will see that the Decorator is the best place to add this new functionality.<br/>   When I first wrote this implementation, I chose to write a <code>load</code> function in <code>MograblogElement </code> and add it there<br/>   so you can choose the one easier for you.<br/>  </p>  <p>   Implementing it in the decorator looks like this   </p>    <pre class=\"prettyprint\"><br /> // allow infinite layers of wrapping - initialize components with PageFactory.<br />    private void initializeElement( Field field, MograblogElement enhancedObject ) {<br />        field.setAccessible(true);<br />        logger.debug(\"loading field :  \" + field.getName());<br />        try {<br />            // NOTE : use the getter function so that CGLIB will intercept it and inject the root element.<br />            PageFactory.initElements(new MograblogFieldDecorator( enhancedObject.getRootElement(), webDriver), enhancedObject);<br />        } catch (RuntimeException e) {<br />            String msg = String.format(\"problems loading field [%s]\", field.getClass().getName() + \"#\" + field.getName());<br />            logger.info(msg, e);<br />            throw new RuntimeException(msg, e);<br />        }<br />    }   <br />  </pre>  <p>   We call this method from our <code> decorate </code> method which now looks like this (new line is highlighted)   </p>  <style>   #changedDecorator{         }   </style>style>  <pre class=\"prettyprint linenums\" id=\"changedDecrator\"><br />@Override<br />public Object decorate( ClassLoader loader, Field field ) {<br />    if ( MograblogElement.class.isAssignableFrom( field.getType() )  && field.isAnnotationPresent( FindBy.class )) {<br />        final MograblogElement enhancedObject =  (MograblogElement) getEnhancedObject( field.getType(), getElementHandler( field ) );<br /><br />        <span style=\"background:yellow\">initializeElement( field, enhancedObject );</span><br /><br />        return enhancedObject;<br /><br />    }else{<br />        return defaultFieldDecorator.decorate( loader, field );<br />    }<br />}<br /><br />  </pre>      <h2> Testing Ourselves</h2>  <p>   So far we have seen how the Component/Page approach we adapted helped us make Selenium developer friendly. <br/>   We wrote a shuttle component in seconds and, most importantly, we used abstractions.     If the \"select\" component is to be changed in the future, we would only have to modify its implementation as its API should remain the same<br/>   Plus, we can reuse the shuttle and select components in all pages.<br/>  </p>  <p>   Bigger projects should use a higher level of abstractions. Instead of writing a class <code>MograblogSelect</code>, it should be an interface, and its implementation <br/>   should be decided by an dependency injection framework. (for example spring).   </p>  <p>   Writing the test becomes easy even with big components in hand. <br/>   The following code doesn't really test anything (no assert statements) but it goes to show you how easy it should be.<br/>  </p>  <pre class=\"prettyprint\"><br />@Test<br />public void shouldEnableDisableElements(){<br />    WebDriver firefoxDriver = new FirefoxDriver();<br /><br /><br />    firefoxDriver.get(\"http://www.mograblog.com/2013/09/extending-selenium-even-more.html\"); // enter the post's URL here. <br />    ShuttlePage page = new ShuttlePage();<br /><br />    PageFactory.initElements(new MograblogFieldDecorator(firefoxDriver, firefoxDriver), page);<br />    page.enable( \"option1\", \"option2\");<br /><br />    try{ // normally we don't need this, but we want to see it change this time, so I added sleep<br />        Thread.sleep(3000);<br />    }catch(Exception e){}<br /><br />}<br />  </pre>  </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7663097556447007445/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/09/extending-selenium-even-more.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7663097556447007445"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7663097556447007445"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/09/extending-selenium-even-more.html",
                        "_title": "Extending Selenium Even More"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7296522665978749952",
                "published": "2013-09-09T12:20:00.000-07:00",
                "updated": "2013-09-09T12:20:00.455-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nodejs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "How to restart services vi ssh? "
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"> <p>  Recently I am occupied by automations. <br/>  I want to upgrade and troubleshoot as automatically as possible. <br/>  If my backend needs a reboot for some odd reason, I want it to be available from some CI tool.<br/> </p> <p>  To accomplish this I have 2 options:   <ul>   <li> Since a lot of CI tools have server and agents, I can install an agent on my remote machine and execute commands on that agent. </li>   <li> Use SSH to execute remote commands </li>  </ul>   The first option is not really relevant in most places and... well basically is not recommended for many reasons. (security anyone?)   </p> <p>  Using SSH is a good solution but will require some work if you are using Windows. <br/>  Windows or not is sometimes not up to you. <br/> </p>   <h1> Our use case </h1> <p>  For this post, lets assume I want to restart a service called \"myservice\". The command I need to run is    <pre>service myservice restart</pre> </p>  <div class=\"warning\">  This post does not explain the reason why it works simply because I do not know. <br/>  However, it does describe problems I encountered and solutions I found. <br/>  If anyone can please contribute a better insight as to why, it will be greatly appreciated.<br/> </div>   <h1> Using Unix </h1> <p>  If you use unix, your life are simple, simply configure your SSH at    <pre>/etc/ssh/ssh_config</pre>  and write something like so    <pre>ssh myhost -t \"service myservice restart\"</pre>  Make sure you use the -t flag to enable pty. read below for more information.  </p> <h1> Using Windows </h1> <p>  You can do something similar in windows, however you will need to approve the host on the first time and only then it will work. <br/>  Since SSH is not available on windows, you should use something like plink instead.<br/>  Again - make sure you use -t flag to enable pty. read below for more information. <br/>  I could not make it work on windows no matter what I did. This is why I used NodeJS.<br/> </p> <h1> I Use NodeJS </h1> <p>  Since I don't like unix specific solutions or windows specific solutions I have embraced NodeJS.<br/>  <a href=\"https://github.com/mscdex/ssh2\" title=\"NodeJS SSH Library\">NodeJS has an SSH library</a> that should work fine on unix and windows. <br/>  It has great documentation and you won't find it hard to use. It also prints output very well<br/>  Make sure you transfer    <pre>{pty: true}</pre>     on the <code>exec</code> options. read below for more information  </p>  <h1> Enabling PTY is important </h1> <p>  For all the tools I mentioned above it seems important to turn PTY on. <br/>  When PTY is off (by default) the automation will sometimes get stuck. <br/>  When I manually ssh and run a restart I get output that looks like so   <pre><br />$ service myservice restart<br /><br />  stopping myservice               [OK]<br /><br />  starting myservice               [OK]<br /><br />  </pre>   When I use PTY, I get the same output. <br/>  However without PTY I do not see the lines above, instead - I see the output of my \"start\" implementation. <br/>  In my case - I am running nodejs server, so I see the log prints I wrote in server.js.   </p>  <h1> I strongly recommend Using NodeJS </h1>  <p>  NodeJS is a great tool for automations simply because you can commit your dependencies along with your scripts. <br/>  In my case, I have an \"upgrade.js\" script that uses SSH. For that, I need ssh2 library. <br/>  I use <code>npm install ssh2</code> and I commit everything to some SVN. <br/>  Then, my CI tool checks out this SVN location, and runs the script. <br/>  Other than installing nodeJS on the agent's machine I don't need anything else. <br/>  If I need another library from npm, I simply commit it and I do not need to modify the agent's machine again.  </p>  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7296522665978749952/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/09/how-to-restart-services-vi-ssh.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7296522665978749952"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7296522665978749952"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/09/how-to-restart-services-vi-ssh.html",
                        "_title": "How to restart services vi ssh? "
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7023704744818679632",
                "published": "2013-08-12T00:37:00.000-07:00",
                "updated": "2013-09-25T01:42:07.546-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "selenium"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "cglib"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Extending Selenium In Java"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Extending Selenium In Java-  MograblogFieldDecorator and MograblogLocator</h1>   <div>  <p>   <a href=\"\">Last Time</a> we saw some limitations Selenium has.<br/>   One of those points was that we are bound to \"WebElement\" and we cannot define<br/>   and use \"complex\" like \"select\" and invoke \"getOptions\" on it.<br/>   Today, our wishes will become true.<br/>   We will need a page to test on. <br/>   I chose the this page. <br/>   So lets add a select box with id \"testme\" and 2 options<br/>  </p>  <a name='more'></a>  <div class=\"warning\">   Please do not be confused by the class org.openqa.selenium.support.ui.<br/>   This is just a class that wraps some \"helper\" functions.<br/>   It does not use abstractions needed to achieve decoupling and well formed design.<br/>  </div>  <select id=\"testme\">   <option value=\"option1\">Option1</option>   <option value=\"option2\">Option2</option>  </select>  <h2> Extending Selenium's WebElement</h2>  <p>   Our extension will use Selenium's FieldDecorator interface which looks like so   </p>    <pre class=\"prettyprint\"><br />java.lang.Object decorate(java.lang.ClassLoader loader,java.lang.reflect.Field field)<br />  </pre>   <p>   As you can see, this is a pretty simple interface with only one method.<br/>   You actually already use it, but you use the default implementation.<br/>   The DefaultFieldDecorator simply instantiates a WebElement.<br/>   Actually it does something a bit more complex, but we will go over it later.<br/>  </p>  <p>   So technically, we can use this interface to implement our own elements.<br/>   We will not instantiate \"WebElements\", actually we will instantiate a lot of different things.<br/>   Why hold ourselves back? The sky is the limit!   </p>  <h2> Defining Our Select Element </h2>  <p>   Lets define the following classes    </p>  <pre class=\"prettyprint\"><br />public abstract class MograblogElement {<br /><br />    protected WebElement rootElement;<br /><br />    protected WebDriver webDriver;<br /><br />    public void setRootElement(WebElement rootElement) {<br />        this.rootElement = rootElement;<br />    }<br /><br />    public void setWebDriver(WebDriver webDriver) {<br />        this.webDriver = webDriver;<br />    }<br />}<br />  </pre>  <pre class=\"prettyprint\"><br />public class MograblogSelect extends MograblogElement {<br /><br />    private static Logger logger = LoggerFactory.getLogger(MograblogSelect.class);<br /><br />    public WebElement getOption( String str ){<br />        try{<br />            return rootElement.findElement(By.cssSelector(String.format(\"option[value=%s]\", str)));<br />        }catch(Exception e){<br />            logger.debug(\"error while getting option\", e);<br />        }<br />        return null;<br />    }<br /><br />    public void val(String str) {<br />        rootElement.click();<br />        WebElement option = getOption(str);<br />        if ( option != null ){<br />            option.click();<br />        }else{<br />            throw new RuntimeException( String.format(\"no such option [%s]\" , str) );<br />        }<br />    }<br />}<br />  </pre>  <pre class=\"prettyprint\"><br />public class MyPage {<br /><br />    @FindBy(css=\"select#testme\")<br />    public MograblogSelect select;<br /><br />    public void changeToOption2(){<br />        select.val( \"option2\" );<br />    }<br /><br />    public void changeToOption1(){<br />        select.val( \"option1 \");<br /><br />    }<br />}<br />  </pre>  <pre class=\"prettyprint\"><br />public class TestSelectElement {<br /><br />    @Test<br />    public void shouldHave2Options(){<br /><br />        WebDriver firefoxDriver = new FirefoxDriver();<br /><br /><br />        firefoxDriver.get(\"http://www.mograblog.com/2013/07/extending-selenium-in-java.html\");<br />        MyPage page = new MyPage();<br /><br />        PageFactory.initElements( new MograblogFieldDecorator( firefoxDriver, firefoxDriver ), page );<br />        page.changeToOption2();<br /><br />        try{ // normally we don't need this, but we want to see it change this time, so I added sleep<br />            Thread.sleep(3000);<br />        }catch(Exception e){}<br /><br /><br />    }<br />}  </pre>    <p>   So far we:     <ul>    <li> Defined an abstract class </li>    <li> Defined our Select component</li>    <li> Define a page that uses this select component</li>   </ul>   As you can see, I have a page that uses my new shiny component,<br/>   However, the field is not initialized!<br/>   This is where our FieldDecorator comes in - it is responsible for initializing the field with an instance.<br/>  </p>  <h2> Writing MograblogFieldDecorator </h2>  <p>   To achieve our goals, we need to use CGLib.<br/>   I really like using CGLib for Aspect Oriented Programming.<br/>   It is very useful when I need a good and flexible abstraction.<br/>   Read <a href=\"/search/label/cglib\" title=\"Posts with CGLib\">more about CGLib on my blog</a>.<br/>  </p>  <pre class=\"prettyprint\"><br />public class MograblogFieldDecorator implements FieldDecorator {<br /><br />    final DefaultFieldDecorator defaultFieldDecorator;<br /><br />    final SearchContext searchContext;<br />    private final WebDriver webDriver;<br /><br /><br />    public MograblogFieldDecorator( SearchContext searchContext, WebDriver webDriver ) {<br />        this.searchContext = searchContext;<br />        this.webDriver = webDriver;<br />        defaultFieldDecorator = new DefaultFieldDecorator( new DefaultElementLocatorFactory( searchContext ) );<br />    }<br /><br />    public Object getEnhancedObject( Class clzz, MethodInterceptor methodInterceptor  ){<br />        Enhancer e = new Enhancer();<br />        // We could do a better abstraction here..<br />        // We could use a factory to return the Implementing class for each type.<br />        // For example, we could define SelectComponent, and map it to MograblogSelectComponent<br />        // in the factory.<br />        e.setSuperclass(clzz);<br />        e.setCallback( methodInterceptor );<br />        return e.create();<br />    }<br /><br /><br />    @Override<br />    public Object decorate( ClassLoader loader, Field field ) {<br />        if ( MograblogElement.class.isAssignableFrom( field.getType() )  && field.isAnnotationPresent( FindBy.class )) {<br />            return getEnhancedObject( field.getType(), getElementHandler( field ) );<br />        }else{<br />            return defaultFieldDecorator.decorate( loader, field );<br />        }<br />    }<br /><br />    private MograblogLocator.ElementHandler getElementHandler( Field field ) {<br />        return new MograblogLocator.ElementHandler( field, getLocator( field ), webDriver );<br />    }<br /><br />    private ElementLocator getLocator( Field field ) {<br />        return new DefaultElementLocatorFactory( searchContext ).createLocator( field );<br />    }<br /><br />}  <br />  </pre>  <p>   The MograblogFieldDecorator is called for every field in the Page object.<br/>   In this algorithm, we detect classes of type MograblogElement and we create MograblogHandler (see below) which will do all the magic.<br/>   This MograblogHandler is actually a CGLib enhancer and you can see that we instantiate it at \"getEnhacedObject\".<br/>   If the field it not a MograblogElement, we simply invoke the DefaultFieldDecorator - which is the class Selenium invokes by default.<br/>  </p>  <h2> Writing The MograblogLocator.ElementHandler </h2>  <p>   So far we simply initialized the fields.<br/>   Now lets see the implementation for MograblogLocator.ElementHandler    <pre class=\"prettyprint\"><br />public class MograblogLocator {<br /><br /><br />    public static class ElementHandler implements MethodInterceptor {<br />        private static Logger logger = LoggerFactory.getLogger(ElementHandler.class);<br /><br />        private final ElementLocator locator;<br />        private WebDriver webDriver = null;<br />        private Field field;<br /><br />        private static Set<String> ignoredMethods = new HashSet<String>() {<br />            {<br />                add(\"toString\");<br />                add(\"hashCode\");<br />            }<br />        };<br /><br /><br />        public ElementHandler(Field field, ElementLocator locator, WebDriver webDriver) {<br />            this.locator = locator;<br />            this.webDriver = webDriver;<br />            this.field = field;<br />            logger.debug(\"created handler for [{}]\", field);<br />        }<br /><br />        private WebElement locateElement() {<br />            return locator.findElement();<br />        }<br /><br /><br />        @Override<br />        public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {<br /><br />            if (ignoredMethods.contains(method.getName())) {<br />                return methodProxy.invokeSuper(o, objects);<br />            }<br />            logger.debug(\"[{}] intercepted method [{}] on object [{}]\", field, method, o);<br />            if (o instanceof MograblogElement) {<br />                if (!method.getName().equals(\"setRootElement\") &apm;& !method.getName().equals(\"setWebDriver\")) {<br />                    MograblogElement comp = (MograblogElement) o;<br /><br />                    WebElement element = locateElement();<br /><br />                    comp.setRootElement(element);<br />                    comp.setWebDriver(webDriver);<br />                }<br /><br />                try {<br />                    return methodProxy.invokeSuper(o, objects);<br />                } catch (InvocationTargetException e) {<br />                    throw e.getCause();<br />                }<br /><br />            } else if (o instanceof WebElement ) {// only handle first displayed<br />                WebElement displayedElement = locateElement();<br /><br />                if (displayedElement != null) {<br />                    logger.info(\"found first displayed. invoking method\");<br />                    return method.invoke(displayedElement, objects);<br />                } else {<br />                    logger.info(\"unable to detect first displayed\");<br />                }<br />            }<br /><br />            return null;<br /><br />        }<br /><br />        @Override<br />        public String toString() {<br />            return \"ElementHandler{\" +<br />                    \"field=\" + field +<br />                    '}';<br />        }<br />    }<br />}   <br />   </pre>  </p>  <p>   This code is the enhanced object implementation.<br/>   It catches all method invocations and makes sure to initialize the object with the right rootElement and webDriver.<br/>   That's all it does actually. The rest is log prints and default fallbacks. <br/>  </p>  <h2> Benefits </h2>  <p>   This post shows a nice usage of CGLib that enables developers to define complex HTML components.<br/>   Lets say that I decided to wrap the \"select\" element with some JQuery plugin - then my Select component implementation would change,<br/>   but nothing else will. <br/>   Another nice thing you can easily do - and I will show you how in the next posts - <br/>   is add yet another layer of complexity.<br/>   For example - the Shuttle component will use 2 Select components.<br/>   So you get an uber-complex component :) <br/>  </p>  <h2> Why Would I Want Complex Components? My Code Is Complex Enough</h2>  <p>   The idea is to put most of the weight on the components, thus leaving the rest of the test code clean.<br/>   This allows developers the chance to develop and Selenium component alongside the HTML Component,<br/>   Relieving the QA developers the need to dissect them and giving them an intuitive API instead.<br/>   QA developers should not deal with WebElement API - They should deal with Component API.<br/>   This way makes sure there's a good separation between UI developers and QA developers.<br/>  </p>  <h2> Get The Code</h2>  <p>   The code is available at <a href=\"https://github.com/GuyMograbi/mograblog-selenium-extension\" target=\"_blank\" title=\"Github - Mograblog Selenium Extensions\">my github repository for Mograblog - Selenium Extensions.</a><br/>   Please note, Every Firefox version, requires a different selenium dependency.<br/>   When I wrote this post, I used Firefox version 21.<br/>   The corresponding selenium dependency version was 2.32.0.<br/>   You should update the pom.xml in case you have a different Firefox version.<br/>  </p>  <h2> What is this - FirstDisplayed - Log Print? </h2>  <p>   In the next post, I will show you how you can easily get this extension to work harder for you.<br/>   So the @FirstDisplayed enables you to handle dynamic content on the page easily. <br/>   For example - lets assume you have #section1 and #section2 on the page but only one of them is displayed at any given moment.<br/>   This annotation will help you.<br/>  </p>  <h2> But Wait! What About Abstractions? </h2>  <p>   My implementation can be more abstract.<br/>   The abstraction part is crucial in the code snippet that instantiates the class.<br/>   If you are interested in a better abstraction that I got, all you need to do<br/>   is inject the FieldDecorator with a factory, and call the factory instead where we<br/>   instantiate our component.<br/>   I placed comments in the code above for you.<br/>  </p>     </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7023704744818679632/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/08/extending-selenium-in-java.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7023704744818679632"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7023704744818679632"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/08/extending-selenium-in-java.html",
                        "_title": "Extending Selenium In Java"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3455278374564148150",
                "published": "2013-08-05T22:35:00.000-07:00",
                "updated": "2013-08-05T22:35:00.215-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": " AngularJS - I18N"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - I18N</h1>   <p>        As AngularJS becomes more popular, the demand for features increases immensely. <br/>        While chart libraries and effects support take shape, quick fix solutions are useful. <br/>    </p>    <h2> I18N Support </h2>    <p>        I18N support for AngularJS is quite easy if you use <a href=\"http://i18next.com/\" title=\"i18next site\" target=\"_blank\">i18next</a> library. <br/>        And example for usage taken from their homepage show this library's appealing simplicity.<br/>        With this JSON dictionary         <pre><br />{<br />  \"app\": {<br />    \"name\": \"i18next\"<br />  }<br />}<br />        </pre>        Translation is as easy as writing         <pre>var appName = t(\"app.name\");</pre>        So now all that is left, is to wrap around this with some AngularJS magic.     </p>    <h2> Naive Implementation With Bugs</h2>      <p>        Seeking a nice way to get AngularJS produce i18next results, the obvious <br/>        solution is to write a filter.<br/>        Filters make functions available on any scope. <br/>        Filters are not limited in any way, and can be chained.<br/>        So in many ways, filters are simply a function call.<br/>        Believe it or not, but all it takes is the following code         <pre><br />myModule.filter( 'i18n', function(  ){<br />    return function(){ return t( arguments ); }<br />} )<br />        </pre>        As you can see we are simply returning a function that calls translate.<br/>        Since we pass \"arguments\" to \"t\", our code already supports parameters.<br/>     </p>    <h3> Using our code </h3>      <p>        Assuming we have the following JSON translation         <pre><br />            {'form' {'first.name':'First Name'} }<br />        </pre>        I use it like so          <pre><br />            {{'first.name' | i18n }}<br />        </pre>        And if I need to format my msg          <pre><br />            {'hello':'Hello __name__!'}<br />        </pre>        I can write          <pre><br />            {{ 'hello' | i18n:'{\"name\":\"Guy\"}' }}<br />        </pre>    </p>     <p>        However, the above code is wrong only because i18next requires initialization.<br/>        Initializing things with AngularJS is rarely a problem.<br/>    </p>    <p class=\"warning\">        I am not an AngularJS expert. <br/>        I just show you how I resolved things.<br/>        It does not mean this is the best practice or even the recommended solution.<br/>        This is just a solution - one of many.<br/>    </p>    <h2> Initializing I18Next with AngularJS </h2>      <p>        Luckily, I18Next has an initialization callback, so you can do stuff once initialized.<br/>        I decided to run the initialization code by defining a service.<br/>        <pre><br />myModule.service('i18nextService', function( $rootScope ){<br />        var option = getOptions(); //implement some way to get options according to your needs.<br />        i18n.init(option, function(){ $rootScope.$digest(); console.log(\"after i18n loading\")});<br />    } );<br />        </pre>        Please note that my solution does not wrap i18next.<br/>        In general I believe that wrapping libraries with Angular is a bad practice.     </p>    <h2> Improving My Solution </h2>      <p>        My solution still introduces some problems - one of them still in the initialization part. <br/>        Although the page will show correctly eventually, the user might see the keys<br/>        until i18next is initialized.<br/>        AngularJS has the mechanism to preload data before routing.<br/>        However, this solution requires a steeper learning curve, so I prefer to use it<br/>        only when I really need.<br/>        <a href=\"http://youtu.be/P6KITGRQujQ\" target=\"_blank\" title=\"How to make AngularJS more like Gmail By John Lindquist\">How to make AngularJS more like Gmail By John Lindquist</a> is a great video<br/>        that will teach you how to resolve the issue.<br/>    </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3455278374564148150/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/08/angularjs-i18n.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3455278374564148150"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3455278374564148150"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/08/angularjs-i18n.html",
                        "_title": " AngularJS - I18N"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2731265608981644584",
                "published": "2013-07-29T02:38:00.000-07:00",
                "updated": "2013-07-29T02:38:00.566-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "css"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "scss"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Zigzag my CSS"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> ZigZag with SCSS </h1>   <p>  Recently I wanted to do a zigzag header/footer since it is so modern. <br/>  I decided to implement it with pure CSS. <br/>  I quickly found out a solution over at stackoverflow. <br/>  However that solution was only for zigzag facing down. <br/>  I decided to <a href=\"http://stackoverflow.com/a/17505515/1068746\" target=\"_blank\" title=\"My enhanced solution\">enhance the solution, implement it as a mixin in SCSS</a>, <br/>  and get the color as parameter. <br/> </p> <p>  Since I am not an SCSS expert, I made my life easier and implemented 4 different mixins,<br/>  one for each direction (up/down/right/left). <br/> </p> <h2> The Code</h2>  <pre class=\"prettyprint\"><br />@mixin zigzag_downward( $color ){<br />  background: linear-gradient( 45deg, transparent 75%, $color 75%) 0 50%,<br />    linear-gradient(-45deg, transparent 75%, $color 75%) 0 50%;<br />    background-repeat: repeat-x;<br />    background-size:30px 30px, 30px 30px;<br />}<br /><br />@mixin zigzag_upward( $color ){<br />  background: linear-gradient( 45deg, $color 25%, transparent 25%) 0 50%,<br />  linear-gradient(-45deg, $color 25%, transparent 25%) 0 50%;<br />  background-repeat: repeat-x;<br />  background-size:30px 30px, 30px 30px;<br />}<br /><br />@mixin zigzag_left( $color ){<br />  background: linear-gradient( 45deg, transparent 75%, $color 75%) 0% 0,<br />    linear-gradient(135deg, transparent 75%, $color 75%) 0% 0%;<br />    background-repeat: repeat-y;<br />    background-size:30px 30px, 30px 30px;<br />}<br /><br />@mixin zigzag_right( $color ){<br />  background: linear-gradient( 45deg, $color 25%, transparent 25%) 0% 0,<br />    linear-gradient(135deg, $color 25%, transparent 25%) 0% 0%;<br />    background-repeat: repeat-y;<br />    background-size:30px 30px, 30px 30px;<br />}<br /><br /></pre> <h2>How Does It Work?</h2>    <p>  This solution uses a very powerful feature in CSS3. <br/>  In CSS3 you can have multiple gradients as background. <br/>  In this example, there are 2 gradients.<br/>  <pre>linear-gradient( 45deg, $color 25%, transparent 25%) 0 50%,<br />linear-gradient(-45deg, $color 25%, transparent 25%) 0 50%;</pre>  These 2 gradient are actually 2 triangles which together create a single repetition in the zigzag pattern. <br/> </p> <div class=\"zig\" style=\"height:100px; width: 300px; background:linear-gradient( 45deg, transparent 75%, red 75%) 0 50%,     linear-gradient(-45deg, transparent 75%, red 75%) 0% 50%;     background-repeat: repeat-x;     background-size:40px 40px, 41px 40px;\"></div>    <p>     In the div above I created a small offset between the two patterns which reveals the trick. <br/>     A single triangle is simply a gradient of color and transparent. <br/>     If you play with the gradient you can make a zigzag that fades out.<br/>    </p>    <p>     You can play around with code using this mixin over at <a href=\"http://codepen.io/anon/pen/HjJBF\" target=\"_blank\" title=\"Codepen\">codepen</a>.     </p>    <h3> Lea Verou's Cool CSS Patterns Site </h3>      <p>     Lea Verou is a (rising?) star in the CSS world.<br/>     Among her many tools she created a nifty site for <a href=\"http://lea.verou.me/css3patterns/\" target=\"_blank\" title=\"CSS3 Patterns Gallery\">CSS patterns</a>.<br/>     This site is cool because you can edit the pattern online and get immediate feedback. <br/>     Try it on her <a href=\"http://lea.verou.me/css3patterns/#zig-zag\" title=\"Zigzag Pattern\" target=\"_blank\">zigzag pattern</a>.<br/>     And if you're into CSS, you just might to check up on Lea every now and then.<br/>      </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2731265608981644584/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/zigzag-my-css.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2731265608981644584"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2731265608981644584"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/zigzag-my-css.html",
                        "_title": "Zigzag my CSS"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3459766943957471927",
                "published": "2013-07-22T07:12:00.000-07:00",
                "updated": "2013-07-22T07:12:00.153-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "AngularJS - Adding Sort"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - Adding Sort </h1>   <p>  So far we have a table where we can select the columns, search the content and pagination where we select the page size.<br/>  Believe it or not, but the entire code (HTML+CSS+JS) is no longer than 200 lines - without using plugins!  </p> <p>  In this post we will add sorting to the table.<br/>  Just like the other features, if we had a big amount of data, we would prefer doing this on the server side.<br/>  However in this post, I will implement it entirely on the client side.<br/> </p> <h2> Adding Sort </h2>   <p>  We want to apply sort when the user clicks on a header.   <pre><br /><td ng-click=\"orderTableBy(head)\" ng-repeat=\"head in headers\"><br /> {{head}}<br /></td>   <br />  </pre>  The \"orderTableBy\" should look like so   <pre><br />$scope.orderTableBy = function(header){<br />    if ( $scope.orderHeader == header && $scope.orderDirection == false){<br />        $scope.orderHeader = null; // clear sort.<br />    }<br />    else if ( $scope.orderHeader == header ){<br />        $scope.orderDirection = false;<br />    }else{<br />      $scope.orderHeader = header;<br />        $scope.orderDirection = true;<br />    }<br />};   <br />  </pre> </p> <p>  Note that it is important to use \"orderDirection == false\" and not \"!orderDirection\" - as using the negate operator on null will turn it to \"false\" and we would like to treat null differently.<br/> </p> <p>  Currently - this code will reside in the controller. Later we should consider wrapping it with a directive.<br/>  As you can see - our implementation also handles the direction!<br/>  Now it is time to use this data when we construct the table body.<br/>  Just like with the text search, this also comes built in with AngularJS.<br/>  <pre><br /><paging data=\"tableData = ( data | orderBy:orderHeader:orderDirection | filter:searchText  )\" <br />           current-page=\"dataCurrentPage\" page-size=\"dataPageSize\"><br />  </pre>  You can run the code and click a header to see the sort.   </p> <h2> Adding an indication in the UI </h2>   <p>  So we are sorting the data, but the user does not know it.<br/>  Adding an indication is more a CSS job than AngularJS.<br/>  However we still need AngularJS to specify class names. <br/>  This is a CSS to start from   <pre><br />table tr:first-child td.sortBy:after{<br /> display:block;<br /> content:\"\";<br /> height:0;<br /> width:0;<br /> border:10px solid transparent;<br />}<br />table tr:first-child td.desc:after{<br /> border-color: black transparent transparent transparent; <br />}<br /><br />table tr:first-child td.asc:after{<br /> border-color: transparent transparent black transparent; <br />}   <br />  </pre>  And this is how the header cells looks like with class names defined.   <pre><br /><td <br /> ng-class=\"{<br />   &#039;sortBy&#039; : head == orderHeader,<br />   &#039;asc&#039;:head == orderHeader && orderDirection == true, <br />   &#039;desc&#039;:head == orderHeader && orderDirection == false<br />   }\"<br /> ng-click=\"orderTableBy(head)\" <br /> ng-repeat=\"head in headers\"><br />  {{head}}<br /></td>   <br />  </pre> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3459766943957471927/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-adding-sort.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3459766943957471927"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3459766943957471927"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-adding-sort.html",
                        "_title": "AngularJS - Adding Sort"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4682793457590497256",
                "published": "2013-07-15T07:00:00.000-07:00",
                "updated": "2013-07-15T07:00:09.151-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "AngularJS - Searching The Table"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - Searching The Table  </h1>   <p>  So far we have pagination, and the ability to select the table headers.<br/>  We can also change the page size.<br/>  Today, we will add \"search\" to the table.<br/>  So far we implemented everything on the client side - which means we get all the data and we manipulate it.<br/>  When dealing with a lot of data, you will prefer to move this to the server side - just like the pagination.<br/> </p> <h2> Adding an input </h2>   <p>  First we need to add an input field.<br/>  <pre><br /><div class=\"search-bar\"><br /> <label>Search</label><input ng-model=\"searchText\"><br /></div>   <br />  </pre> </p> <h2> Filtering the data </h2>   <p>  Remember how we used a filter before to extract the displayed page?<br/>  Now, we will chain filters to add a search.                  The search filter will come first, and the paging filter will come second.<br/>  The search filter comes built in with AngularJS<br/>  So this will be quite easy. <br/>  The \"tr\" code line now will look like so:   <pre><tr ng-repeat=\"d in data | filter:searchText | pagingFilter:dataPageSize:dataCurrentPage\"></pre> </p> <h2> The outcome </h2>   <p>  Once you added the code above, you can type something to the search input, and see the table data changes.   </p> <h2> Oh oh! we have a bug! </h2>   <p>  Our pagination directive had a \"showing a-b from c\" legend.<br/>  However, now this legend is incorrect since we are not showing all the data,<br/>                the value for \"c\" should be calculated after we filtered the searchText.<br/>  As usual there is a simple way to resolve this and a complex way to resolve this.<br/>     <span style=\"font-weight:bold\"> There is a really easy solution for this, but you will not find it anywhere else.</span>    The solution looks like so    <pre><br />   <paging data=\"tableData = ( data | filter:searchText )\" <br />                                   current-page=\"dataCurrentPage\" <br />                                   page-size=\"dataPageSize\"><br />    ... <br />    <tr ng-repeat=\"d in tableData  | pagingFilter:dataPageSize:dataCurrentPage\"><br />         ...<br />       </tr><br />   </paging><br />  </pre>   It does the following:   <ul>   <li> Filter data and save the result into \"tableData\" at the parentScope level </li>                        <li> Inject the result into the directive's scope \"data\" field.</li>   <li>  Reuse the \"tableData\" variable in the table row iteration</li>  </ul>   If you read about it, you might see a lot of people advising you to use \"$compile\", but it is not necessary.    </p> <h2> Wait! Another bug! </h2>   <p>  We have data with many columns. Out of these columns, we show only 2 by default, and we allow users to control which header we show and which we are not. The \"searchText\" however will use all the columns for filtering.<br/>  I chose not to fix this issue - as I would want people to filter according to a hidden column, but you might not like it.<br/>  If you're looking for something simple - you can predefine the columns the user can search on and change the input. See example on <a href=\"http://docs.angularjs.org/api/ng.filter:filter\"> AngularJS documentation</a>  <pre><br />Any: <input ng-model=\"search.$\"> <br><br />Name only <input ng-model=\"search.name\"><br><br />Phone only <input ng-model=\"search.phone\"><br><br />  </pre>  If you're looking for something more complex - for example search only on visible headers - you will need to write your own filter. However, you can delegate AngularJS filter in your implementation.   <pre>$filter(&#039;filter&#039;)(array, expression)</pre> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4682793457590497256/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-searching-table.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4682793457590497256"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4682793457590497256"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-searching-table.html",
                        "_title": "AngularJS - Searching The Table"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6341797780855361384",
                "published": "2013-07-08T06:39:00.000-07:00",
                "updated": "2013-07-14T10:47:36.953-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "AngularJS - Adding \"Toggle Header\" Feature"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - Adding \"Toggle Header\" Feature  </h1>   <p>  In the previous posts we implemented a simple paging for a table <br/>  using AngularJS directive and filter. <br/>  In this post, we will add a feature that enables us to choose which <br/>  columns we show.<br/>  The template we are using ( <a href=\"/2013/06/angularjs-smart-table.html\">See first post</a>) <br/>  already places the available headers on the scope.<br/> </p> <h2> Step 1 - Show available headers on the page </h2> <p>  First, we need to show the available header on the HTML.<br/>  For that we will add some HTML code to our page<br/>  <pre class=\"prettyprint\"><br /><div class=\"available-headers\"><br /> <span class=\"available-header\" ng-click=\"toggleHeader(header)\" ng-repeat=\"header in availableHeaders\" style=\"border:1px solid black; padding:10px; border-radius:10px; line-height:40px;\"><br />  {{header}}<br /> </span><br /></div>   <br />  </pre> </p> <h2> Implementing \"toggleHeader\"</h2>   <p>  Now we need to implement \"toggleHeader\"<br/>  <pre class=\"prettyprint\"><br />$scope.toggleHeader = function( header ){<br /> var headerIndex = $scope.headers.indexOf(header);<br /> if (  headerIndex >= 0 ){<br />  $scope.headers.splice(headerIndex,1);<br /> }else{<br />  $scope.headers.push(header);<br /> }<br />};<br />  </pre>  In this code we are using the scope variable \"headers\" which we already <br/>  defined in our template. <br/> </p> <p>  In the next post we will add the ability to search the table.  </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6341797780855361384/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-adding-toggle-header-feature.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6341797780855361384"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6341797780855361384"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-adding-toggle-header-feature.html",
                        "_title": "AngularJS - Adding \"Toggle Header\" Feature"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3207470565190894686",
                "published": "2013-07-01T06:06:00.000-07:00",
                "updated": "2013-07-14T10:48:55.748-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": " AngularJS - Using Our Table Paging Directive"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - Using Our Table Paging Directive  </h1>   <p>  This is the second part of a <a href=\"/2013/06/angularjs-smart-table.html\" title=\"Serie About AngularJS Super Table Directive\">serie about AngularJS super table directives</a> <br/>  where we add \"paging\" and \"search\" and \"sort\" to a table in a highly<br/>  reusable, customizable way.<br/>  So far we have a directive that adds \"prev\" and \"next\" buttons. <br/>  This directive handles disable/enable on the button. <br/> </p> <p>  Currently, the table will show all records in our \"data\".<br/>  To complete the pagination, we need to build our page.<br/>  I decided to implement this part with a filter.<br/>  Technically, you can also do it from within the directive.<br/>  My decision to split the pagination buttons, and filtering out <br/>  the page from the data will enable us to add more features later.<br/> </p> <h2> Implementing the \"paging\" filter </h2>   <p>  The code looks like so:   <pre class=\"prettyprint\"><br />myApp.filter(\"pagingFilter\", function(){<br /> return function(input, pageSize, currentPage) {<br />         return input ?  input.slice(currentPage * pageSize, currentPage * ( pageSize + 1 )) : [];<br /> }<br />});<br />  </pre>  We define a filter by returning a function.<br/>  Our filter expects 3 parameters:    <ul>   <li> input - The data we filter - all filters get this </li>   <li> pageSize - the page size</li>   <li> currentPage - the number of the current page</li>  </ul>    </p>  <h2> Using this Filter </h2> <p>  Using filter in AngularJS is the easiest thing ever.<br/>  Currently we have the line   <pre><tr ng-repeat=\"d in data\"></pre>  we need to modify this line to    <pre><tr ng-repeat=\"d in data | pagingFilter:dataPageSize:dataCurrentPage\"></pre>  Which means we filter the data using the paging filter.<br/>  We pass it the \"dataPageSize\" and \"dataCurrentPage\" which we defined <br/>  in the previous post.<br/> </p> <h2> The outcome </h2>   <p>  The outcome is we see only a single page instead of all the data.<br/>  Our paging filter is ready.<br/> </p> <h2> Why did I use a filter? </h2>   <p>  I said before, we could have implemented this logic in the directive.<br/>  The reason I chose to implement a filter instead allows me to have more flexibility such as add another filter in between or reusing the paging filter for other diretives - in which case the name \"paging filter\" might not be suitable anymore.<br/> </p> <h2> So how can we get rid of the code duplication? </h2>   <p>  To get rid of the code duplication you can wrap the paging directive and the paging filter with another directive.<br/>  We will do this after we add the rest of the features.<br/>  In the next post I will show you how to easily add   </p> <h2> changing the page size </h2>   <p>  Just as an examples to features you can easily add, <br/>  how about changing the page size? <br/>  We can easily add it with the following code   <pre class=\"prettyprint\"><br /><div class=\"page-size\"><br /> page size : <br /> <a href=\"javascript:void(0)\" style=\"padding-left:10px\" ng-click=\"setPageSize(pageSize)\" ng-repeat=\"pageSize in [10,20,30]\"> {{pageSize}}</a><br /></div><br />  </pre>  and implement a function on the scope like so    <pre><br />$scope.setPageSize = function(pageSize){$scope.dataPageSize = pageSize;}   <br />  </pre>  You might be wondering why do we need this function? Why not simply write:   <pre><br /><a href ... ng-click=\"dataPageSize = pageSize\" ng-repeat= ... > .. </a><br />  </pre>  The answer is that \"ng-repeat\" creates a new isolated scope and so the \"ng-click\" will only have affect inside the \"a\" tag.<br/>  There are scenarios where you will not notice this phenomena however this is not one of them.  </p> </div> "
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3207470565190894686/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-using-our-table-paging.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3207470565190894686"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3207470565190894686"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/07/angularjs-using-our-table-paging.html",
                        "_title": " AngularJS - Using Our Table Paging Directive"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1827915122196527605",
                "published": "2013-06-24T13:49:00.000-07:00",
                "updated": "2013-06-24T13:49:00.128-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "AngularJS - Table Paging Directive"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - Table Paging Directive  </h1>    <p>  In this post and the next one I will show you how to write<br/>  a directive that adds paging to your table using AngularJS.<br/>  Thanks to AngularJS great structure, all code is reusable and activated <br/>  as easily as adding a class!<br/> </p> <p>  If you are reading this, you should definitely check out my <a href=\"/2013/06/angularjs-smart-table.html\">other examples</a><br/>  for adding sort, filter and more to tables.<br/> </p> <p class=\"warning\">  DISCLAIMER: I am not an AngularJS expert. All my examples can probably <br/>  be easily improved. However this is a great tutorial to learn advanced <br/>  AngularJS programming as it gathers the knowledge of different threads<br/>  while adding my own.<br/> </p> <h2> Spec </h2>   <p>  For this step we will simply require a directive that adds some HTML <br/>  on the page and will set the grounds for the other features.<br/>  This directive should have:   <ul>   <li> Show next/prev page buttons - I leave adding links to directly to a  page for you as a challenge  </li>     <li> Enable/Disable these buttons accordingly </li>   <li> Show record X - Y  synopsis. </li>  </ul>  In the following post we will use this directive's data<br/>  to filter out the single page from the data list.<br/> </p> <h1> Creating The \"Paging\" Directive</h1>   <p>  Using our <a href=\"/2013/06/angularjs-smart-table.html#postTemplate\">template for this post serie</a> we declare the smart table directive in<br/>  our JavaScript section like so   <pre class=\"prettyprint\"><br />myApp.directive(\"paging\", function(){<br /><br />        return {<br />            // define a template with back/prev buttons, using functions I will define<br />            // on the scope<br />            template:&#039;<div><button ng-disabled=\"!hasPrevious()\" ng-click=\"onPrev()\"> Previous </button> {{start()}} - {{end()}} out of {{size()}} <button ng-disabled=\"!hasNext()\" ng-click=\"onNext()\"> Next </button><div ng-transclude=\"\"></div> </div>&#039;,<br />            // Lets allow this tag to be defined as an \"Attribute\",\"Element\" or \"Class\".<br />            restrict:&#039;AEC&#039;, <br />            transclude:true, // transclude means we allow the tag to have a body<br />            // next we define the scope <br />            // the \"=\" sign means these scope variables will be available<br />            // from the parent scope. For \"currentPage\" we will use <br />            // attribute \"current-page='myCurrentPage'\" - where \"myCurrentPage\"<br />            // is the variable on the parent scope. This means we can programatically<br />            // change the value from the parent scope. Isn't this great?<br />            // This also means multiple tables will be able to share the same<br />            // paging. <br />            scope:{ <br />                &#039;currentPage&#039;:&#039;=&#039;,<br />                &#039;pageSize&#039;:&#039;=&#039;,<br />                &#039;data&#039;:&#039;=&#039;<br /><br />            },<br />            link:function($scope, element, attrs){<br /><br />             // size of entire data<br />                $scope.size = function(){<br />                    return $scope.data.length;<br />                };<br /><br />                // end of the page<br />                $scope.end = function(){<br />                    return $scope.start() + $scope.pageSize;<br />                };<br /><br />                // start of page<br />                $scope.start = function(){<br />                    return $scope.currentPage * $scope.pageSize;<br />                };<br /><br />                // number of page - default to 0<br />                $scope.page = function(){<br />                    return !!$scope.size() ? ( $scope.currentPage + 1 ) : 0;<br />                };<br /><br />                // do we have another page?<br />                $scope.hasNext = function(){<br />                    return $scope.page() < ( $scope.size() /  $scope.pageSize )  ;<br />                };<br /><br />                // what to do if \"next\" button is pressed.<br />                $scope.onNext = function(){<br />                    $scope.currentPage = parseInt($scope.currentPage) + 1;<br />                };<br /><br />                // do we have a previous page?<br />                $scope.hasPrevious = function(){<br />                    return !!$scope.currentPage;<br />                } ;<br /><br />                // what to do if \"prev\" button is clicked<br />                $scope.onPrev = function(){<br />                    $scope.currentPage=$scope.currentPage-1;<br />                };<br /><br />                // define default values for scope variables. <br />                try{<br />                    if ( angular.isDefined($scope.data) ){<br />                        $scope.data = [];<br />                    }<br />                    if ( angular.isDefined($scope.currentPage) ){<br />                        $scope.currentPage = 0;<br />                    }<br />                    if ( angular.isDefined($scope.pageSize) ) {<br />                        $scope.pageSize = 10;<br />                    }<br />                }catch(e){ console.log(e);}<br />            }<br /><br />        }<br /><br />});  <br />  </pre>   The outcome of the code above includes:    <ul>   <li>A new directive that is available by attribute, element or class name called \"paging\". See \"restrict:AEC\".</li>   <li>We add next/prev buttons for paging with X-Y summary. </li>   <li>We expose and use methods such as \"hasPrevious\" to decide we have a previous page</li>   <li>We use the methods to enable/disable the prev/next buttons</li>     <li>We allow embedded code within the directive by using \"ng-transclude\" and stating \"transclude:true\".</li>   <li>We require 3 scope variables to be wired : for data, currentPage and pageSize </li>   <li>The last item also means that by simply defining \"$scope.pageSize=5\" on the controller scope<br/>    You actually define to begin at page 5.</li>  </ul> </p> <h2> Using Our New Directive </h2>   <p>  To use our new directive, all we need to do is modify the HTML like so:   <pre class=\"prettyprint\"><br /><paging  table-data=\"data\" current-page=\"dataCurrentPage\" page-size=\"dataPageSize\"><br /> <!-- leave the code as it was before --><br /> <table> <tr> ... </tr> </table><br /></tag>   <br />  </pre> </p> <p>  In this example, I decided to use the directive as an element.<br/>  I left the rest of the HTML as it was within the new \"paging\" tag.<br/>   </p> <h2> What We Have So Far </h2> <p>  If you run the code right now, you will see the next/prev buttons. <br/>  If you click them, you see the summary is modified.<br/>  However, the table remains the same. <br/>  In the next post, we will add a filter called \"pagingFilter\" that will slice a page from the data. <br/> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1827915122196527605/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/06/angularjs-smart-table-1.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1827915122196527605"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1827915122196527605"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/06/angularjs-smart-table-1.html",
                        "_title": "AngularJS - Table Paging Directive"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-672318018274138916",
                "published": "2013-06-17T20:18:00.000-07:00",
                "updated": "2013-07-25T00:45:52.014-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "AngularJS - Sort, Filter and Paging - A Table Directive"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS - Sort, Filter and Paging - A Table Directive </h1>   <p>  AngularJS is GREAT! </br>  you should neglect whatever framework you are using right now, <br/>  and switch to AngularJS immediately!   </p> <p>    In the following posts I will show you how you can easily<br/>  write a reusable table with sorting, filter and paging!<br/>  And it is all reusable, customizable and easy - thanks to AngularJS! You guys rock! <br/>  At the end I will show you how it all comes together, <br/>  and I will provide a github link to the source code.<br/>  This example is great for advanced programming in AngularJS.<br/> </p> <p>  For production purposes you should definitely check out <a href=\"http://angular-ui.github.io\" title=\"Angular UI\" target=\"_blank\">AngularUI's </a> <a href=\"http://angular-ui.github.io/ng-grid/\" target=\"_blank\" title=\"NG Grid\">NG-Grid</a> project.  </p> <div class=\"warning\">  <h4>DISCLAIMER</h4>                  I am not an AngulrJS expert. I am an enthusiast.<br/>  The things I write here can probably be improved.<br/>  I use AngularJS v-1.0.6. <br/> </div> <p>  <ul>   <li><a href=\"/2013/06/angularjs-smart-table-1.html\">Paging Directive</a></li>   <li><a href=\"/2013/07/angularjs-using-our-table-paging.html\">Paging Filter</a></li>   <li><a href=\"/2013/07/angularjs-adding-toggle-header-feature.html\">Toggling Headers</a></li>   <li><a href=\"/2013/07/angularjs-adding-sort.html\">Adding Sort</a> </li>   <li><a href=\"/2013/07/angularjs-searching-table.html\">Adding Search</a></li>  </ul> </p> <h2> Outcome </h2>   <p>   Weeks after writing these posts (not all published yet) - I came across <a href=\"http://lorenzofox3.github.io/smart-table-website/\" title=\"Smart Table\" target=\"_blank\">a nice project called \"smart table\"</a> - what do you know? <br/>   After you read my posts, you will know how to write this \"smart table\" plugin in AngularJS. <br/> </p> <p>   Let me use this opportunity to point out this plugin did a nice job with the filtering feature.<br/>   It simply placed an input field on every column header - which is very intuitive and space is used well.<br/> </p> <h2> More Possible Features </h2>   <p>  What I show in these posts is the basics.<br/>  You can easily modify them to include server side filtering, <br/>  customizable templates, page jump links and probably a lot more.<br/> </p> <h1> Getting Started </h1>   <p>  Before we begin implementing the features, we need to set the environment.<br/>  For data, I decided to use a nifty cool tool for <a href=\"http://www.json-generator.com/\" target=\"_blank\" title=\"JSON Data Generator\">JSON data generation</a>. However, since they will not save my JSON for longer than 30 days, <br/>  I saved their output into a google doc, and I serve it from my google drive.  </p> <p>  Below you can find an HTML template to start from. <br/>  This template shows a simple AngularJS usage for building a table from JSON data.<br/>  I added some basic CSS to comfort.<br/>  For some reason, using $http.get did not go that well, so I used JQuery instead.<br/> </p>   <pre class=\"prettyprint\" id=\"postTemplate\"><br /><html ng-app=\"myApp\"><br /> <head><br />  <style><br />   body {background-color:#cecece; margin:0; padding:0; font-family:Arial; }<br />   body>div:first-child {width:50%; margin:auto; margin-top:40px;}<br />   table {border:none; border-collapse:collapse; width:100%;}<br />   table tr { border:none;}<br />   table tr td { border:none; font-size:37px; font-weight:bolder;}<br />   table tr:first-child{background-color:#00ff00;}<br />   table tr:nth-child(2n){ background-color:blue;}<br />   table tr:nth-child(2n+3){ background-color:red;}<br />  </style><br />  <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js\"></script><br />  <script src=\"http://code.angularjs.org/1.0.6/angular.min.js\"></script><br /><br />  <script type=\"text/javascript\"><br />   <br />   var myApp = angular.module(\"myApp\",[]);<br /><br />   myApp.controller(\"PostController\", function( $scope, $http ){<br />    $scope.headers = [\"name\",\"age\"];<br />    $scope.availableHeaders = []; <br />    // using JQuery because $http does not work as expected here.. <br />    $.ajax({<br />     url:\"https://googledrive.com/host/0BzBTj4P1uKcAMVVNa0VySm5fbjg\", <br />     success:function(d){<br />      $scope.$apply(function(){<br />       $scope.data = JSON.parse(d)[\"result\"];<br />       for ( header in $scope.data ){<br />        $scope.availableHeaders.push(header);<br />       }<br />       console.log($scope.data)<br />      });      <br />    }<br />    });<br />   });<br />  </script><br /> </head> <br /> <body ng-controller=\"PostController\"><br />  <div><br />   <table><br />    <tr><br />     <td ng-repeat=\"head in headers\"><br />      {{head}}<br />     </td><br />       </tr><br />       <tr ng-repeat=\"d in data\"><br />        <td ng-repeat=\"head in headers\"><br />         {{d[head]}}<br />        </td><br />       </tr><br />   </table><br />  </div><br /> </body><br /></html>  <br /> </pre> <h2> The complete code</h2>   <p>  Here is the code as it should look like at the end.   <script src=\"https://gist.github.com/GuyMograbi/5736526.js\"></script> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/672318018274138916/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/06/angularjs-smart-table.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/672318018274138916"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/672318018274138916"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/06/angularjs-smart-table.html",
                        "_title": "AngularJS - Sort, Filter and Paging - A Table Directive"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7720114928842563776",
                "published": "2013-06-03T08:42:00.000-07:00",
                "updated": "2013-06-03T08:42:00.140-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Toward my 50K-th visitor"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> 50K Readers  - My 2 Cents </h1> <p>  Slowly but surely, my blog is getting bigger. <br/>  Like a child, it has learned how to crawl. It recognized me even. <br/>  When it was <a href=\"/2011/11/2-years-old-with-10k-page-views-about.html\" target=\"_blank\"> only 2 years old</a> it had 10K visits.<br/>  Now it is 3 years and 8 months old and it has 50K visits. <br/>  A slow growth, but a growth none the less. <br/>  And as usual - here are my 2 cents on the issue of writing a blog.<br/>  </p> <h1> How do I Write Posts </h1>   <h2> My mistake </h2>   <p>  When I started this blog I only wanted quality content.<br/>  As a result, I made a common mistake as I took my blog too seriously <br/>  and writing a post became a difficult task. <br/>  Turns out I've mistaken \"quality\" with \"advanced\".<br/>  It seems that people want to hear what I have to say.<br/>  Thanks. :)  </p> <h2> The Solution </h2>   <p>  The best thing I've done recently was to take a note in my Sublime editor<br/>    every time I run into something I want to blog.<br/>  Then I dedicate a single day to write 4-5 posts.<br/>  I then program blogger to publish my posts once a week.<br/>  This method cleared my schedule and allowed me to release posts regularly.<br/>  I still miss my deadline every now and then.<br/>  I have published posts every Monday for a while now, <br/>  Every time I am missing my deadline, I still see a spike on Monday.<br/>  Do search engines have an algorithm to expect new content? <br/>  I thought they simply scan at a fixed interval, but maybe I am wrong.<br/> </p> <h2> The Outcome </h2>   <p>  I have been publishing posts regularly every Monday for 7 months now. <br/>  During this period, my visitors per month statistics tripled!<br/>  Honestly, I am a father to 2 kids, I give 120% at work, and I attend almost every family event. <br/>  Writing 4-5 posts in a single day is enough for the entire month and it does not consume too much time.<br/> </p> <h1> Links Between Your Posts </h1>   <p>  Whenever I get the chance, I try to break down a post to smaller posts.<br/>  Even if you don't have a specific idea for a serie of posts, I sometimes gather some posts together under a single topic.  <br/>  This has 2 great benefits.<br/> </p>    <h2> One more post</h2>   <p>  Every serie of posts get an \"introduction post\".   This means, if I get enough material for 3 posts, I technically have 4 posts.<br/>  The 4th post simply summarizes the content of the other 3 and provide links. <br/> </p> <h2> Internal Links </h2>   <p>  All sites that write about improving your blog, talk about internal Links. <br/>  I can't really tell you if it helps, but I know it does not hurt.<br/> </p> <h1> Conclusion </h1>   <p>  The above summarized the most important lesson I have learned about blogging recently. <br/>  Following these rules, I see a constant increase in traffic.<br/>  I sometimes see a sudden decrease in visitors, but there's a definite trend of increase.<br/> </p><a href=\"http://3.bp.blogspot.com/-caEhafk5CWo/UaDb3qBSsvI/AAAAAAAAXcY/FeHzebW8rSg/s1600/stats.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://3.bp.blogspot.com/-caEhafk5CWo/UaDb3qBSsvI/AAAAAAAAXcY/FeHzebW8rSg/s320/stats.png\" /></a></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7720114928842563776/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/06/toward-my-50k-th-visitor.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7720114928842563776"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7720114928842563776"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/06/toward-my-50k-th-visitor.html",
                        "_title": "Toward my 50K-th visitor"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-caEhafk5CWo/UaDb3qBSsvI/AAAAAAAAXcY/FeHzebW8rSg/s72-c/stats.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3869533683000777533",
                "published": "2013-05-20T06:18:00.000-07:00",
                "updated": "2013-05-20T06:18:00.271-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "ebean"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Why the Hack am I Getting OptimisticLockException?"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">  <h1> Why the Hack am I Getting OptimisticLockException? </h1>    <div>  For a while now I've been trying to figure out an exception I got using EBean and Play!Framework.<br/>  I know what OptimisticLockException, and I know why it usually happens, but nothing matched my scenario.<br/>  Today I had an enlightenment and I managed to resolve the exception. Thought I'd share.<br/> </div> <div>  The following example is based on code I inherited from another developer. <br/>  I tried to give a relevant example as possible.<br/>   </div>  <h2> The Problem </h2>   <div>   I am using playFramework 2 which uses EBean by default as an ORM. <br/>  I have 2 classes with @OneToOne relation<br/> </div>  <pre class=\"prettyprint\"><br /><br />@Entity<br />class Book extends Model{<br /> @OneToOne( cascade = DELETE )<br /> public class BookWriter bookWriter;<br /><br /> @Version<br /> public long version = 0;<br /><br />}<br /><br />@Entity<br />class BookWriter extends Model{<br />    @OneToOne(mappedBy  = \"book\" )<br /> public class Book book;<br /><br /> public class Writer writer; // also mapped, but not important for the story.<br />}<br /><br /> </pre>   <div>  As you can see, I have an instance of BookWriter connecting between each book and its writer. <br/>  I also added a \"version\" on the book so I'd get a lock exception if 2 people are overriding one another.<br/>  If I delete the book, I also want to delete the BookWriter - however not the writer itself.<br/>  If it is not obvious by now, I will never explicitly delete a BookWriter. <br/>  I will always delete the Book, and let the ORM cascade the deletion to preserve consistency.<br/>  So deleting a book looks like so:     <pre><br />Book b=  Book.find(...).delete();   <br />  </pre>   Surprising enough, this code throws OptimisticLockException that looks like this      <pre><br />javax.persistence.OptimisticLockException: Data has changed. updated [0] rows sql[delete from book_writer where id=?] bind[null]<br /> </pre>   The exception is thrown every time - which means this is not a race condition. <br/>  It even reproduced when a single thread handled the book.<br/>  So why would it throw this exception?   </div> <h2> The Solution </h2>    <div>  The solution is quite simple once you notice it.<br/>  The foreign key is on the Book, and not the BookWriter.<br/>  The foreign key location is decided by the \"mappedBy\" attribute on the @OneToOne annotation.<br/>  Since BookWriter.book has \"mappedBy\" on it - this means that Book.bookWriter is the foreign key.<br/> </div> <div>  When EBean deletes the Book, first it goes to delete the BookWriter.<br/>  Since it deletes the BookWriter - it updates the foreign key on the Book.<br/>  Then it tries to delete the Book, but notices something changed.<br/> </div> <div>  Stupid right? <br/>  You can easily resolve this by placing the foreign key on the BookWriter.<br/>  This way there's nothing to update after its deletion. <br/> </div> <div>  To achieve this, you simply need to remove the \"mappedBy\" from BookWriter.book and add \"mappedBy='book' \" on Book.bookWriter.<br/>  You also have to modify the schema if you are not using automated tools for this.<br/> </div> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3869533683000777533/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/05/why-hack-am-i-getting.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3869533683000777533"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3869533683000777533"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/05/why-hack-am-i-getting.html",
                        "_title": "Why the Hack am I Getting OptimisticLockException?"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3702399745985514018",
                "published": "2013-05-13T22:57:00.000-07:00",
                "updated": "2013-05-13T22:57:00.831-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "selenium"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Selenium Page Model Limitations"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Selenium Page Model - Limitations and Wish List </h1>   <div>  <p>   In this post I will talk about an annoying limitation Selenium presents, <br/>   and in the next posts I will show how to enhance Selenium to support my wish list.    </p>  <h2> Page Model </h2>    <p>   The Page Model relies heavily on the Page Factory. <br/>   The idea is that you define a Page class like so    </p>  <pre class=\"prettyprint\"><br />public class LoginPage{<br /> @FindBy( css = \"form input[name=username]\")<br /> WebElement username;<br /><br /> @FindBy( css = \"form input[name=password]\")<br /> WebElement password;<br /><br /> @FindBy( css = \"form .submit\")<br /> WebElement submit;<br /><br /> public login(username, password){<br />  this.username.sendKeys(username);<br />  this.password.sendKeys(password);<br />  this.submit.click();<br /> }<br />}<br />  </pre>  <p>   As you can see, I do not initialize the fields. <br/>   This happens by calling PageFactory.<br/>   Assuming you got your webDriver properly, the code will look like so:   </p>         <pre class=\"prettyprint\"><br />LoginPage loginPage = new LoginPage();   <br />PageFactory.initElements(  webDriver  , loginPage );<br />loginPage.login(\"my_username\",\"my_secret_password\");<br />  </pre>  <p>   This is all nice and pretty, but as you can see, I am limited to \"WebElement\".<br/>   In real life, the UI is divided to components, but Selenium does not support defining components. <br/>  </p>  <h2> The Benefit of Components </h2>    <p>   When I say components, I simply mean repeating HTML structure, which in turn may be used with repeating<br/>   CSS styling and repeating JS binding. <br/>   A simple example for a component you all know is an HTML form. <br/>   Some applications disable/enable the \"save\" button, depending if the form is dirty or not. <br/>   Angular uses the term \"pristine\" instead - which means exactly the opposite.<br/>   If the form is pristine, the save button is disabled. <br/>  </p>  <p>   However, form components might do a lot more than that. <br/>   A common use for such a component (before angularJS) would be to synchronize the JS model and the form input fields<br/>   While AngularJS saves this effort on the front-end, Selenium code still has to work hard.<br/>   They need to define a field for each input field, and then write \"sendKeys\" on each one..<br/>  </p>  <p>   If I could only define a \"Form\" component in Selenium in such a way that I won't have to change PageFactory initialization, then my code might look like this   </p>  <pre class=\"prettyprint\"><br />public class LoginPage{<br /> @FindBy(\"form#login_form\")<br /> private Form loginForm; <br /><br /> public void login( username, password ){<br />  loginForm.set(\"username\",username);<br />  loginForm.set(\"password\",password);<br />  loginForm.submit();<br /> }<br />}<br />  </pre>     <p>   I can even wrap this form in a nicer API easily ( and with AOP it is even easier ) <br/>  </p>  <pre class=\"prettyprint\"><br />public class LoginForm extends Form{<br /> public void setUsername( username ) { super.set(\"username\",username); return this; }<br /> public void setPassword( password ) { super.set(\"password\",password); return this; } <br />}<br /><br />public class LoginPage{<br /> @FindBy(\"form#login_form\")<br /> private LoginForm loginForm;<br /><br /> public void login( username, password ){<br />  loginForm.username(username).password(password).submit();<br /> }<br />}<br />  </pre>   <h2> Components Are a Higher Level API To My Page </h2>    <p>   HTML pages might changes often, and when they do, the selenium tests usually break. <br/>   Imagine you decide to use a JQuery plugin instead of \"select\" tag. <br/>   If you do this, all the Selenium tests that use \"select\" tag in pages will break. <br/>   However, if you define a component for Select, all you need to do is change the implementation of this component.<br/>  </p>  <pre class=\"prettyprint\"><br /><br />public class Select{<br /> public void val( String option ) { .. implementation here .. }<br />}<br /><br />public class PageWithSelect{<br /> @FindBy(\"#select_something\")<br /> Select selectSomething;<br /><br /> public void selectOption(String option){<br />  selectSomething.val( option );<br /> }<br />}<br />  </pre>  <h2> More Ideas For Components </h2>    <p>   <ul>    <li> Table with sorting and search </li>      <li> Paginated content </li>      <li> <a target=\"_blank\" title=\"shuttle\" href=\"http://docs.jboss.org/richfaces/latest_3_3_X/en/devguide/html/rich_listShuttle.html\">Shuttles</a> </li>    <li> Tabs </li>    <li> Trees </li>    <li> Menus </li>    <li> Navigations </li>   </ul>  </p>    </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3702399745985514018/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/05/selenium-page-model-limitations.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3702399745985514018"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3702399745985514018"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/05/selenium-page-model-limitations.html",
                        "_title": "Selenium Page Model Limitations"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5782360211721581422",
                "published": "2013-05-06T21:54:00.001-07:00",
                "updated": "2013-05-06T21:55:40.220-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "angularjs"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "AngularJS Cookies Example"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> AngularJS with Cookies Example </h1>   <div>  <h2> Step 1 - include cookies module </h2>  <p>   Your first step would be to include the JS file and then add dependency on cookie module. <br/>  </p>  <pre><br /><script src=\"/public/js/angularjs/angular-cookies.min.js\"></script><br />  </pre>  <pre><br />var DemoApp = angular.module( &#039;DemoApp&#039;, [&#039;ngCookies&#039;] ).config( demoConfig );   <br />  </pre>  <h2> Step 2 - Inject into controller </h2>  <p>   Now that the module is available to you, you can finally inject it to your controller.   </p>  <pre><br />DemoApp.controller(&#039;DemoController&#039;, function($cookieStore, $scope, $location, $routeParams, $http , $timeout ){ .. body here .. })<br />  </pre>  <h2>Step 3 - Using the cookie store</h2>  <p>   Now you can use `put` and `get` and `remove` like so:   </p>  <pre><br />$cookieStore.put(\"name\",\"my name\");<br />$cookieStore.get(\"name\") == \"my name\";<br />$cookieStore.remove(\"name\");<br />  </pre>  <h2>Out of the Box</h2>  <p>   Angular support JSONs serialization automatically for cookies. <br/>  </p>  <h2>Limitations</h2>  <p>   By the time of writing this, angularJS does not support \"expires\" or \"path\" attributes on cookies. <br/>   If you must use it, you can always include and use JQuery cookies in Angular. <br/>   Angular works well with JQuery, detecting it exists and using it.<br/>   If JQuery is unavailable, Angular uses a simpler version of it called JQLite. <br/>  </p>   <h2>A Note on Minifaction</h2>  <p>   As explained in <a href=\"http://docs.angularjs.org/tutorial/step_05#anoteonminification\" title=\"angularJS documentation\" target=\"_blank\">AngularJS documentation</a>, the examples I show above<br/>   will not support minification.<br/>    In order to support them, you should use a different syntax for constructors. <br/>    My controller constructor for example would look like so       <pre><br />DemoApp.controller(&#039;DemoController&#039;, [&#039;$cookieStore&#039;,&#039;$scope&#039;,&#039;$location&#039;,&#039;$routeParams&#039;,&#039;$http&#039;,&#039;$timeout&#039;,function($cookieStore, $scope, $location, $routeParams, $http , $timeout ){ .. body here }])     <br />    </pre>  </p>   </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5782360211721581422/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/05/angularjs-cookies-example.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5782360211721581422"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5782360211721581422"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/05/angularjs-cookies-example.html",
                        "_title": "AngularJS Cookies Example"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8004226819707574200",
                "published": "2013-04-29T22:51:00.000-07:00",
                "updated": "2013-04-29T22:51:00.527-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Writing a gadget for google sites - Part 1"
                },
                "content": {
                    "_type": "html",
                    "__text": "<style>.mograblog p { width : 500px } .mograblog img.right { clear:right; float:right; margin-left:1em; margin-bottom:1em } </style> <div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><h1> Writing a gadget for google sites - Part 1</h1><img class=\"right\" src=\"https://lh4.googleusercontent.com/-iyp7MYnGMpg/UHOte6ehDXI/AAAAAAAAVIM/UQj2V4JaDSQ/s144/google-logos.png\" title=\"Google Project and Google Developers API logo\" alt=\"Google Project and Google Developers API logo\" /> <p>  In the next couple of posts I will explore Google Gadgets and how to write them.<br/>  In this post I will show a simple example of how to write an elementary Google Gadget, <br/>  and in the next posts we will take it to some more advanced levels. <br/></p><p>Lately I've been using google sites a lot. <br/>It's a really good tool to set up wikis. <br/>I use it to make my tutoring lesson plans. It is so easy because it is available and editable everywhere. <br/>So if I am in the middle of the lesson and I discover a mistake, I can simply fix it right away </br>Today I found the need to add a new gadget to google sites. This gadget will show a question with a \"show answer\" link that if you click it an answer is displayed to the question. <br/>You can see an example at my <a title=\"Gadget JSFiddle POC\" alt=\"Gadget JSFiddle POC\" href=\"http://jsfiddle.net/rAuem/\">gadget JSFiddle POC</a><br/></p> <p>Writing a gadget to google sites is quite easy, but it takes a lot of time digging all the info you need, and even though google's documentation looks great, it is still missing a lot of important information and you usually need to read 3-4 pages to get what you need. <br/>Assuming that all you need is HTML (which can include CSS and JS and so on..) then you are in luck. <br/> The basic format for any gadget is  </p>  <pre class=\"prettyprint\"><br /><?xml version=\"1.0\" encoding=\"UTF-8\" ?><br /><Module><br />  <ModulePrefs title=\"My Gadget\"/><br />  <Content type=\"html\"><br />    <![CDATA[ <br />  <style> .my-text{color:red} </style><br />  <div class=\"my-text\"> You can write anything here </div><br />  <script>alert('hello');</script><br />    ]]><br />  </Content><br /></Module><br /></pre> <p>As you can see, all you need is to define a tag called \"Content\" with an attribute \"type=html\", and then write the HTML code inside a CDATA. <br/>Note that I did not specify the <html>,<body>,<head> tags. <br/>The reason for this is that Google gadgets are embedded into an IFrame's body. <br/>You CAN add these tags - and Google will handle them just fine, but they are optioanl<br/>In fact, the IFrame generated in Google sites and the generated HTML from the gadget XML I showed you above look like so: </p> <pre class=\"prettyprint\"><br /><br /><!-- IFrame --><br /><br /><iframe title=\"My Gadget\" width=\"100%\" height=\"200\" scrolling=\"no\" frameborder=\"0\" id=\"1430389399\" name=\"1430389399\" allowtransparency=\"true\" class=\"igm\" src=\"//...?url=gadgetUrl&parent=The embedding site\"></iframe><br /><br /><!-- The IFrame source --><br /><br /><html><br /> <head><br />  A lot of google stuff. bunch of scripts and styles.<br /> </head><br /> <body dir=\"ltr\"><br /> <div class=\"my-text\"> You can write anything here </div><br />  <script>alert('hello');</script><br />  <br />  Some more Google stuff  <br /> </body><br /> </html><br /></pre><p>Next to be covered on this topic is : <ul>  <li>    Adding configuration to your widget   </li>  <li>    Using JQuery in your widget   </li>  <li>    My more/less Gadget Implementation   </li>  <li>    Google gadget and newlines issue   </li>  </ul></p> <p><h3>References</h3><ul>   <li><a alt=\"Google Code Playground\" href=\"https://code.google.com/apis/ajax/playground/#jqueryui\" title=\"Google Code Playground\">Google Code Playground</a>   </li><li><a href=\"https://developers.google.com/speed/libraries/devguide#jquery\" alt=\"Google Hosted Libraries\" title=\"Google Hosted Libraries\">Google Hosted Libraries</a></li> The finished project.  <li><a href=\"http://code.google.com/p/google-sites-more-gadget/\" alt=\"google-sites-more-gadget\" title=\"google-sites-more-gadget\">Google Site More Gadget</a></li><li> <a title=\"Google Gadgets API - Getting Started\" alt=\"Google Gadgets API - Getting Started\" href=\"https://developers.google.com/gadgets/docs/gs\">Google Gadgets API - Getting Started</a></li><li><a alt=\"Example for HTML configuration\" title=\"Example for HTML configuration\" href=\"http://www.gstatic.com/sites-gadgets/embed/embed.xml\" target=\"_blank\">Example for HTML configuration</a></li></ul></p><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8004226819707574200/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/writing-gadget-for-google-sites-part-1.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8004226819707574200"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8004226819707574200"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/writing-gadget-for-google-sites-part-1.html",
                        "_title": "Writing a gadget for google sites - Part 1"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "https://lh4.googleusercontent.com/-iyp7MYnGMpg/UHOte6ehDXI/AAAAAAAAVIM/UQj2V4JaDSQ/s72-c/google-logos.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1445284098441156757",
                "published": "2013-04-22T22:28:00.000-07:00",
                "updated": "2013-04-22T22:28:00.304-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "gwt"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "GWT and Reverse Proxy is a no go"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\">   <h1> GWT Behind Reverse Proxy - When Serialization Policy Is Not Found </h1>   <h2> Quick Problem Description</h2> <p>  Recently I ran into a strange problem when running a GWT project behind <a href=\"http://en.wikipedia.org/wiki/Reverse_proxy\" title=\"Reverse Proxy\" alt=\"Reverse Proxy\" target=\"blank\">reverse proxy</a>. <br/>  Here is a full stack trace of the problem   <pre class=\"prettyprint\"><br />ERROR: The serialization policy file 'STRANGE_STRING.gwt.rpc' was not found; did you forget to include it in this deployment?<br />WARNING: Failed to get the SerializationPolicy '5D067F2D73BCCF64A689D09A6C7C3D1E' for module 'http://localhost/module'; a legacy, 1.3.3 compatible, serialization policy will be used.  You may experience SerializationExceptions as a result.<br />ERROR: The serialization policy file '3843CF05B607363D963BC91346CB2896.gwt.rpc' was not found; did you forget to include it in this deployment?<br />WARNING: Failed to get the SerializationPolicy '3843CF05B607363D963BC91346CB2896' for module 'http://localhost/module/'; a legacy, 1.3.3 compatible, serialization policy will be used.  You may experience SerializationExceptions as a result.<br />:WARN:/:Exception while dispatching incoming RPC call<br />com.google.gwt.user.client.rpc.SerializationException: Type 'com.MyType' was not assignable to 'com.google.gwt.user.client.rpc.IsSerializable' and did not have a custom field serializer.For security purposes, this type will not be serialized.: instance = com.MyType@2501e081<br />        at com.google.gwt.user.server.rpc.impl.ServerSerializationStreamWriter.serialize(ServerSerializationStreamWriter.java:619)<br />        at com.google.gwt.user.client.rpc.impl.AbstractSerializationStreamWriter.writeObject(AbstractSerializationStreamWriter.java:126)<br />        at com.google.gwt.user.server.rpc.impl.ServerSerializationStreamWriter$ValueWriter$8.write(ServerSerializationStreamWriter.java:153)<br />        at com.google.gwt.user.server.rpc.impl.ServerSerializationStreamWriter.serializeValue(ServerSerializationStreamWriter.java:539)<br />        at com.google.gwt.user.server.rpc.RPC.encodeResponse(RPC.java:616)<br />        at com.google.gwt.user.server.rpc.RPC.encodeResponseForSuccess(RPC.java:474)<br />        at com.google.gwt.user.server.rpc.RPC.invokeAndEncodeResponse(RPC.java:571)<br />        at com.google.gwt.user.server.rpc.RemoteServiceServlet.processCall(RemoteServiceServlet.java:208)<br />        at com.google.gwt.user.server.rpc.RemoteServiceServlet.processPost(RemoteServiceServlet.java:248)<br />        at com.google.gwt.user.server.rpc.AbstractRemoteServiceServlet.doPost(AbstractRemoteServiceServlet.java:62)   <br />  </pre> </p> <h2> Quick And Dirty Solution </h2>   <p>  You should go over all your \"implements Serializable\" classes and make them implement \"IsSerializable\" as well. <br/>  <strong>NOTE:</strong> Enums should implement IsSerializable as well! <br/> </p> <p>  So for every enum you add now, you have to make sure it implements \"IsSerializable\" too.<br/>  This is not nice. <br/>  A nicer solution would be if you make a hierarchy in your servlet.<br/>  Make \"MyRemoteServiceServlet\" extend GWT's \"RemoteServiceServlet\".<br/>  Let all you services extends \"MyRemoteServiceServlet\" instead.<br/>  In \"MyRemoteServiceServlet\" override the method \"doGetSeriazliationPolicy\"<br/>  and call the super while passing the correct value for moduleBaseURL<br/>  Finding out the correct value should not be so hard.<br/>  Comment below if you experience problems finding out the correct value, I will specify a \"how to\" on this.  </p>  <h2> Why Do I Need To Modify The Code?</h2>   <p>  What bugs me most in this issue is that reverse proxies should be transparent.<br/>  This means you should be able to add them independently to what runs behind them. <br/>  If the solution is to modify the code, it means you have to be aware of a reverse proxy scenario. <br/>  This means you need to run tests on it and check for regressions and new features for reverse proxy support. <br/>  This sucks. It is obviously a GWT bug and hence GWT sucks.<br/>  Well, <a href=\"https://code.google.com/p/playn/\" title=\"PlayN - cross platofrm game library on top of GWT\" alt=\"PlayN - cross platofrm game library on top of GWT\">GWT actually ROCKS</a>, they just made a lame decision about this issue.<br/>  This bug appeared in version 2.4.0, and I know there is version 2.5.0 already out so you may check that one too.<br/> </p> <h2> Why Use IsSerializable If Serializable Works Too?</h2> <p>  According to <a href=\"https://developers.google.com/web-toolkit/doc/latest/FAQ_Server#Does_the_GWT_RPC_system_support_the_use_of_java.io.Serializable\" title=\"GWT documentation\" alt=\"GWT Documentation\">GWT's documentation on Serializable</a> GWT in versions <br/>  prior to 1.4 did not support serializing objects that implement \"Serializable\", only object that implement<br/>  \"IsSerializable\". However, the community wanted to reuse code they already had with \"Serializable\".<br/>  So GWT had a good intention by supporting \"Serializable\" only they apparently did this poorly.<br/> </p> <p>  It doesn't take long to figure out where the code breaks. <br/>  Looking at \"RemoteServiceServlet\" which all GWT controllers should extend, <br/>  you can see the following method signature   <pre class=\"prettyprint\"><br /> static SerializationPolicy loadSerializationPolicy(HttpServlet servlet,<br />      HttpServletRequest request, String moduleBaseURL, String strongName) {<br />  </pre>   Which is called from a single place in RemoteServiceServlet.    <pre class=\"prettyprint\"><br />  protected SerializationPolicy doGetSerializationPolicy(<br />      HttpServletRequest request, String moduleBaseURL, String strongName) {<br />    return loadSerializationPolicy(this, request, moduleBaseURL, strongName);<br />  }   <br />  </pre>   The value of \"moduleBaseURL\" is wrong when it is behind a reverse proxy, and I will explain<br/>  exactly why in just a second.<br/>  Right now, we can something interesting, since this method is protected<br/>  this means we can override this method to resolve the issue as well. <br/>  If we were to create our own \"Remote\" servlet and let all services extend that one<br/>  like good developers do, we could simply override this method, inject hard coded \"moduleBaseURL\" and be<br/>  done with it..<br/>  However not all projects work properly, some let all their services extend RemoteServiceServlet directly. <br/> </p> <h2> Why moduleBaseURL Has A Wrong Value</h2> <p>  The reason moduleBaseURL gets the wrong value, is because its value is transfered in the request BODY!.<br/>  The decision to pass such a value in the request body is a poor decision made by GWT.<br/>  Perhaps there are considerations I am not aware of - please comment below if you know of such <br/>  Since it is passed in the body, this means its value is decided on client side. <br/>  Client side URLs are decided by the reverse proxy, and consequently the back-end is affected by the <br/>  reverse proxy as well.<br/>  You cannot configure the reverse proxy to override the request body to fix this issue.<br/> </p> <h2> Why Is moduleBaseURL So Important? </h2>   <p>  GWT verifies that objects are serializable before serializing them.<br/>   They do so by defining a SerializationPolicy - which they fail to load when moduleBaseURL is wrong.<br/>   In such scenarios, GWT uses a fallback called \"LegacySerializationPolicy\" - which was written in version 1.3<br/>   and does not support Serializable interface, but only \"IsSerializable\".<br/> </p> <h2> How To Configure A Reverse Proxy</h2>   <p>  This post is not about reverse proxy as it is about GWT.<br/>  However, if you want to quickly configure Apache for a reverse proxy on your GWT, here is a configuration sample<br/>  <pre class=\"prettyprint\"><br />#read more about reverse proxy at: <br /># http://www.apachetutor.org/admin/reverseproxies<br />NameVirtualHost *:80<br /><VirtualHost *:80><br />  ProxyPass /reverseproxy/ http://127.0.0.1:8888/ <br />  ProxyPassReverse /reverseproxy/ http://127.0.0.1:8888/ <br />        ProxyPreserveHost on<br />        ErrorLog \"logs/my-error_log\"<br />        CustomLog \"logs/my-access_log\" common<br /></VirtualHost><br />  </pre>    Now, if you access your GWT webapp by going to \"http://localhost:8888/My_Module.html?gwt.codesrc=127.0.0.1\"<br/>  the reverse proxy also exposes port 80 with the following URL \"http://localhost/reverseproxy\"<br/>  You can modify the relative path \"reverseproxy\" as you see fit just sure Apache and the URL are aligned. <br/> </p> <h1> Conclusion </h1>   <p>  GWT has a bug when you run behind a reverse proxy. <br/>  This bug requires a code change to resolve. <br/>  You can simply add \"implements IsSerializable\" on all your serializable objects (enums included)<br/>  or you can make all your services extend your own RemoteServiceServlet and override<br/>    the \"doGetSerializationPolicy\" method while passing the correct value for \"moduleBaseURL\".  </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1445284098441156757/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/gwt-and-reverse-proxy-is-no-go.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1445284098441156757"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1445284098441156757"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/gwt-and-reverse-proxy-is-no-go.html",
                        "_title": "GWT and Reverse Proxy is a no go"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1654358716963313985",
                "published": "2013-04-15T13:28:00.000-07:00",
                "updated": "2013-04-15T13:28:00.176-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "ebean"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Quickly resolving RuntimeException: No join columns"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><h1> Quickly Resolving RuntimeException: No join columns </h1><p>    So it is late at night, and I am working over the weekend again.. <br/>    Creating a OneToOne relationship with EBean and exporting schema to create schema upgrade script<br/>    when all of a sudden, I get an exception I have never seen before. <br/>    Since it took me a couple of minutes to figure it out - maybe too late at night? - I decided to post<br/>    the problem and the solution.  </p>  <p>    The stack trace I got is pasted below. <br/>    The solution is that I was missing primary key on one of my models. <br/>    Make sure you have primary keys, and everything should be fine. <br/></p><p>    Please note that in Play!Framework 2.0, it is not enough to extend Model, <br/>    you must declare a primary key by yourself. <br/>     <pre class=\"prettyprint\"><br />@Id <br />public Long id;<br /></pre></p><pre><br />play.core.ActionInvoker$$anonfun$receive$1$$anon$1: Execution exception [[RuntimeException: No join columns for models.Widget.icon]]<br />        at play.core.ActionInvoker$$anonfun$receive$1.apply(Invoker.scala:134) [play_2.9.1.jar:2.0.4]<br />        at play.core.ActionInvoker$$anonfun$receive$1.apply(Invoker.scala:115) [play_2.9.1.jar:2.0.4]<br />        at akka.actor.Actor$class.apply(Actor.scala:318) [akka-actor.jar:2.0.2]<br />        at play.core.ActionInvoker.apply(Invoker.scala:113) [play_2.9.1.jar:2.0.4]<br />        at akka.actor.ActorCell.invoke(ActorCell.scala:626) [akka-actor.jar:2.0.2]<br />        at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:197) [akka-actor.jar:2.0.2]<br />        at akka.dispatch.Mailbox.run(Mailbox.scala:179) [akka-actor.jar:2.0.2]<br />        at akka.dispatch.ForkJoinExecutorConfigurator$MailboxExecutionTask.exec(AbstractDispatcher.scala:516) [akka-actor.jar:2.0.2]<br />        at akka.jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:259) [akka-actor.jar:2.0.2]<br />        at akka.jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:975) [akka-actor.jar:2.0.2]<br />        at akka.jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479) [akka-actor.jar:2.0.2]<br />        at akka.jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104) [akka-actor.jar:2.0.2]<br />Caused by: java.lang.RuntimeException: No join columns for models.Widget.icon<br />        at com.avaje.ebeaninternal.server.ddl.CreateTableColumnVisitor.visitOneImported(CreateTableColumnVisitor.java:99) ~[ebean.jar:na]<br />        at com.avaje.ebeaninternal.server.ddl.VisitorUtil.visit(VisitorUtil.java:109) ~[ebean.jar:na]<br />        at com.avaje.ebeaninternal.server.ddl.VisitorUtil.visit(VisitorUtil.java:73) ~[ebean.jar:na]<br />        at com.avaje.ebeaninternal.server.ddl.VisitorUtil.visitBean(VisitorUtil.java:62) ~[ebean.jar:na]<br />        at com.avaje.ebeaninternal.server.ddl.VisitorUtil.visit(VisitorUtil.java:36) ~[ebean.jar:na]<br />        at com.avaje.ebeaninternal.server.ddl.VisitorUtil.visit(VisitorUtil.java:22) ~[ebean.jar:na]<br />        at com.avaje.ebeaninternal.server.ddl.DdlGenerator.generateCreateDdl(DdlGenerator.java:148) ~[ebean.jar:na]<br /></pre><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1654358716963313985/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/quickly-resolving-runtimeexception-no.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1654358716963313985"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1654358716963313985"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/quickly-resolving-runtimeexception-no.html",
                        "_title": "Quickly resolving RuntimeException: No join columns"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2496090817099542145",
                "published": "2013-04-08T02:02:00.000-07:00",
                "updated": "2013-04-08T02:02:00.275-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "imagemagick"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Removing background from image with imagemagick - revisited"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\">   <h1> Removing background from image with imagemagick - revisited </h1>   <p>  A long time ago I wrote a post about <a href=\"/2012/01/removing-backgrounds-from-images-with-2.html\" title=\"how to remove background from images\" alt=\"how to remove background from images\">how to remove background from images using 2 simple commands with imagemagick.</a> <br/>  Recently, I acquired a new computer, and I had to download imagemagick again. <br/>  Obviously, I went to my blog to remember the commands I used, and I copy-pasted them, only to discover they do not work! <br/> </p> <p>  I had no doubt they did work once, since I used them for a couple of years with great success. <br/>  But all of a sudden, instead of giving me a transparent image, it gave me a gray scale image.<br/>  I tried to download older versions of imagemagick, and to contact the team, but to no avail. <br/> </p> <p>  I noticed that the documentation was a lot more extensive today than it used to be, <br/>  so I decided to reconstruct the commands I needed once more. <br/> </p> <h2> When do I use imagemagick? </h2>   <p>  As a web developer who is responsible for writing HTML pages <br/>  I often get an image generated by a designer of how the web page should look like. <br/>  A lot of designers use photoshop - which is unavailable to me - and either give me a PSD, or a PNG.<br/>  I try to open the PSD with GIMP, or Paint.NET (yes - they have a plugin for this) - but it never produces <br/>  the outcome I want as it usually modifies the colors or fonts are all messy. <br/> </p> <p>  I learned, a long time ago, that the fastest way to slice HTML, is by cutting the PNG to pieces, and make <br/>  each piece transparent. <br/>  Sounds cumbersome, but it really is not. <br/> </p> <p>  To begin with, CSS3 really helps as you get a lot of things done without any images and with maximum quality.<br/>  By the time you get to the images, there usually not a lot of work left.<br/>  Finally, working with imagemagick allows me to purchase images online and modify them as I see fit. <br/> </p> <h2> Removing Background </h2>   <p>  So for today's post, I will use the sample picture in Windows 7 calls \"Tulips\". <br/>  You can find it online in a really good quality. <br/>  For example: <a href=\"http://images.directron.us/win7sam/tulips.jpg\" target=\"_blank\" title=\"tulips\">here</a> and    <a href=\"http://images5.fanpop.com/image/photos/27700000/tulips-windows-7-vista-and-xp-picks-27753352-1024-768.jpg\" title=\"tuplis\">here</a>  Here is a smaller version of it.<br/><a href=\"http://1.bp.blogspot.com/-iReuYSJEr7I/UVK1HmYMUZI/AAAAAAAAV0Y/TGfFNEFS3q8/s1600/Tulips_post.jpg\" imageanchor=\"1\" ><img border=\"0\" src=\"http://1.bp.blogspot.com/-iReuYSJEr7I/UVK1HmYMUZI/AAAAAAAAV0Y/TGfFNEFS3q8/s320/Tulips_post.jpg\" /></a> </p>  <p>  The process in which I do this is simply creating a mask. <br/>  A mask is a gray scale image that represents the transparency I want. Black represents transparent, <br/>  and white represents opaque. <br/>  Later I compose my mask and the original image together to a single image with transparent background.<br/>  Unavoidably, the content of the entire image become a bit transparent. <br/>  To restore the image, I duplicate it a bunch of times and I flatten all the duplication together. <br/>  The outcome is quite good<br/><a href=\"http://3.bp.blogspot.com/-F0_VqxLGYuQ/UVK1Ixu3CcI/AAAAAAAAV0k/F97II_HJyrU/s1600/Tulips_trans_post.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://3.bp.blogspot.com/-F0_VqxLGYuQ/UVK1Ixu3CcI/AAAAAAAAV0k/F97II_HJyrU/s320/Tulips_trans_post.png\" /></a> </p> <p>  The script I wrote leaves all the temporary images. <br/>  You can add a remove command for them or remove them manually as I like to. <br/> </p>  <pre class=\"prettyprint\"><br />@echo off<br />set IMAGE=%1<br />set SUFFIX=%2<br />convert %IMAGE%.%SUFFIX% ( +clone -fx p{0,0} ) -compose Difference -composite -modulate 100,0 -alpha off  %IMAGE%_difference.png<br />convert %IMAGE%.%SUFFIX% %IMAGE%_difference.png -compose Copy_Opacity -composite %IMAGE%_trans.png<br /><br />for /l %%x in (1, 1, 20) do (<br /> convert %IMAGE%_trans.png  +clone  -background none   -flatten   %IMAGE%_trans.png<br /> ping -n 2 127.0.0.1 >nul<br /><br />)<br /> </pre> <h2> When do I not use imagemagick? </h2>   <p>  The tulips image is not a usual website scenario as it is in an extremely good quality. <br/>  Try this script on website logos to see that it works. <br/>  Even though the outcome is not that bad, it is still not good enough if quality is what you are after. <br/>  For example - try to find blurred leaves in the background, and notice what happens to them after I remove the background - they become less blurred.<br/> </p> <p>  When I try the same process on the <a href=\"http://cdn.ithinkdiff.com/wp-content/uploads/2009/03/jellyfish.jpg\" title=\"Jellyfish\" target=\"_blank\">Jellyfish</a> image, I get even worse result.<br/><a href=\"http://2.bp.blogspot.com/-3wSPjV8F784/UVK1NNArRmI/AAAAAAAAV0s/Mbzbt1jz2OA/s1600/jellyfish_post.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://2.bp.blogspot.com/-3wSPjV8F784/UVK1NNArRmI/AAAAAAAAV0s/Mbzbt1jz2OA/s320/jellyfish_post.png\" /></a> </p> <p>  So if I have a lot of important little details in the image, I will go the extra mile and get a good quality image from the designer. <br/> </p> <h2> Gotchas </h2>   <p>  The commands assume the pixel on the top left represents the background color. <br/>  If for some reason this is wrong, you can choose to modify the script - imagemagick probably have a flag<br/>  you can push somewhere - or you can modify the image, for example add a border 1 px with the background color. <br/>  Simply negating also works sometimes. <br/>  <pre>convert image.png -negate to_trans.png </pre> </p></div>                 "
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2496090817099542145/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/removing-background-from-image-with.html#comment-form",
                        "_title": "2 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2496090817099542145"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2496090817099542145"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/removing-background-from-image-with.html",
                        "_title": "Removing background from image with imagemagick - revisited"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/-iReuYSJEr7I/UVK1HmYMUZI/AAAAAAAAV0Y/TGfFNEFS3q8/s72-c/Tulips_post.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "2"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7293851146452637278",
                "published": "2013-04-01T03:32:00.000-07:00",
                "updated": "2013-04-01T03:32:00.624-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "spring"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Serving Static Files From JAR"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">  <h1> Serving Static Files From JAR </h1>    <p>  If you have a lot of static files  (images, JS, css) in your WAR, <br/>                Or maybe you have static files that are shared between different projects <br/>  you might want to pack those resources into a JAR and serve them from there. <br/> </p> <h2> Make Sure Your Class Files Are Packaged </h2> <p>  First of all, if you are looking to reduce the number of files in your WAR<br/>  You should check if your \".class\" files are packaged into a JAR. <br/>  You can easily achieve this by configuring the Maven WAR Plugin    <pre class=\"prettyprint\"><br /><plugin><br /> <groupId>org.apache.maven.plugins</groupId><br /> <artifactId>maven-war-plugin</artifactId><br /> <version>2.3</version><br /> <configuration><br />  <archiveClasses>true</archiveClasses><br /> </configuration><br /></plugin><br />  </pre> </p>  <h2> Package Your Static Resources </h2>   <p>  Lets assume that you have the following directories <pre class=\"prettyprint\"><br />src<br /> |<br /> +---main<br />       |<br />       +----java<br />       |<br />       +----resources<br />       |<br />       +----webapp<br />              |<br />              +-----public<br />              |        |<br />              |        +-----images<br />              |        |<br />              |        +-----javascripts<br />              |        |<br />              |        +-----pages <br />              |        |<br />              |        +-----stylesheets       <br />              |<br />              +-----WEB-INF<br />              |<br />              +-----META-INF<br />              .<br />              .<br />              .<br /></pre>   In this structure, your static resources are under folder \"webapp/public\".<br/>  In order to package them, simply move the \"public\" folder under \"resources\".<br/>  Next, you will have to define a servlet to server them. <br/> </p> <h2> Configuring Servlets </h2>   <p>  Assuming you already have Spring MVC (if not, it's not a problem to set it up quickly)<br/>  All you need to do, is add the following to the web-context.xml<br/>  <pre class=\"prettyprint\"><mvc:resources mapping=\"/public/**\"  location=\"classpath:/public/\" /></pre>   However, since I use annotations, I ran into some problems. <br/>  The first exception was    <pre>Does your handler implement a supported interface like Controller?</pre>  I quickly resolved this by using    <pre class=\"prettyprint\"><mvc:annotation-driven /></pre>  instead of    <pre class=\"prettyprint\"><context:annotation-config/></pre>  It turns out that using \"resources\" tag, shuts down an important annotation configuration in Spring. <br/> </p>  <p>  Once I added the \"annotation-driven\" tag, I got    <pre>Error creating bean with name 'org.springframework.validation.beanvalidation.LocalValidatorFactoryBean</pre>  Unfortunately, I was unable to resolve this nicely. <br/>  I was forced to add hibernate-validation JAR to my project. <br/>  <pre class=\"prettyprint\"><br /><dependency><br /> <groupId>org.hibernate</groupId><br /> <artifactId>hibernate-validator</artifactId><br /> <version>4.0.0.GA</version><br /></dependency>   <br />  </pre> </p> <h2> Last But Not Least - Configure Web.xml</h2>   <p>   This is my web.xml - yours might be a bit different, depends on how you use Spring MVC.    <pre class=\"prettyprint\"><br /><servlet><br />    <servlet-name>Spring</servlet-name><br />    <servlet-class><br />      org.springframework.web.servlet.DispatcherServlet<br />    </servlet-class><br />    <init-param><br />        <param-name>contextConfigLocation</param-name><br />        <param-value>/WEB-INF/web-context.xml</param-value><br />    </init-param><br />    <load-on-startup>1</load-on-startup><br /></servlet>   <br /><servlet-mapping><br />    <servlet-name>Spring</servlet-name><br />    <url-pattern>*.do</url-pattern><br /></servlet-mapping><br /><servlet-mapping><br />        <servlet-name>Spring</servlet-name><br />        <url-pattern>public/*</url-pattern><br /></servlet-mapping>   <br />  </pre>   Please note I have 2 servlet-mappings. It seems to work just fine.   </p> <h1> Troubleshooting </h1>   <p>  When I configured spring MVC, I kept getting \"404\". <br/>  I felt the need to debug the servlet. But which servlet? <br/>  To figure this out, you need to read the spring mvc XSD!    <pre class=\"prettyprint\"><br /><xsd:annotation><br />  <xsd:documentation<br />   source=\"java:org.springframework.web.servlet.resource.ResourceHttpRequestHandler\"><![CDATA[<br />Configures a handler for serving static resources such as images, js, and, css files with cache headers optimized for efficient <br />loading in a web browser. Allows resources to be served out of any path that is reachable via Spring&#039;s Resource handling.<br />  ]]></xsd:documentation><br /> </xsd:annotation>   <br />  </pre>  So I added break points on the class :    <pre><br />   org.springframework.web.servlet.resource.ResourceHttpRequestHandler<br />  </pre>  Which worked just fine. <br/>  The code is written well. <br/>  It was very easy for me to understand the flow and my errors.<br/> </p> <h2> A Word About Resource Mapping </h2>   <p>  I want to talk about the resources mapping in web-context.xml a minute.<br/>  <pre><mvc:resources mapping=\"/public/**\"  location=\"classpath:/public/\" /></pre>   First of all, if I were to serve the content from outside the jar the mapping would simply be<br/>  <pre><mvc:resources mapping=\"/public/**\"  location=\"/public/\" /></pre>   So the different between packaging and not packaging is whether it is in the classpath or not. <br/>  Another important thing to note is that I specify \"public\" twice. Once in \"mapping\" and again in \"location\".<br/>  I do this because the \"public\" prefix is stripped from the URI due to \"mapping\".<br/>  By adding it to location I am actually returning the prefix to the URI<br/>  So if I have a resource under <pre>my.jar!/public/images/logo.png</pre> which I ask for by writing<br/>  <pre><img src=\"/public/imags/logo.png\"/></pre>  after \"mapping\" it, spring will have \"images/logo.png\". <br/>  If I were to write the location as \"classpath:/guy/\" - spring would look for it under   <pre>my.jar!/guy/images/logo/png</pre>    By specifying \"classpath:/public/\" I am actually fixing the prefix back to public.   </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7293851146452637278/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/serving-static-files-from-jar.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7293851146452637278"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7293851146452637278"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/serving-static-files-from-jar.html",
                        "_title": "Serving Static Files From JAR"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6155082961192861866",
                "published": "2013-03-25T07:51:00.000-07:00",
                "updated": "2013-03-25T07:51:00.101-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "spring"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Overriding Spring MVC Context From Java Arguments And Environment Variables"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><h1> Overriding Spring MVC Context From Java Arguments And Environment Variables </h1>  <div>    <p>        Recently I added spring MVC to an existing project using Jetty. <br/>        Like all projects, I wanted this one to support DEV mode and PROD mode. <br/>        It is a Spring best practice to keep 2 context files (at least). <br/>        One file for Spring MVC controllers and stuff, <br/>        and the other for beans that can be used outside Spring MVC and reusable everywhere. <br/>    </p>    <p>        The Spring MVC context is by default named \"web-context.xml\"<br/>        I call the other context \"prod-context.xml\" or \"dev-context.xml\" according to environment<br/>        The default context should be \"prod-context.xml\". <br/>        In order to support PROD and DEV modes, I had to expose some way to specify which context to load. <br/>        What I really wanted is to modify my web.xml to use some variable. <br/>        However, that seemed impossible. <br/>    </p>    <p>        Later,  I tried injecting variables to the context.xml \"import\" tag. <br/>        Something like         <pre>  <import resource=\"classpath:#{systemProperty.myContext}\" />  </pre>        But apparently, I cannot do this either.      </p>    <h1> Overwriting ContextLoaderListener customizeContext </h1>      <p>        It seems that Spring prepared themselves to this scenario. <br/>        Reading the <a href=\"http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/web/context/ContextLoader.html#customizeContext(javax.servlet.ServletContext, org.springframework.web.context.ConfigurableWebApplicationContext)\" target=\"_blank\" title=\"Spring Documentation\" alt=\"Spring Documentation\">Spring documentation</a>, you can see ContextLoaderListener#customizeContext method is just for this purpose<br/>        <pre><br />            The default implementation is empty but can be overridden in subclasses to customize the application context.<br />        </pre>    </p>        So this is how the code should look like :       <pre class=\"prettyprint\"><br />import org.apache.commons.collections.CollectionUtils;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.web.context.ConfigurableWebApplicationContext;<br />import org.springframework.web.context.ContextLoaderListener;<br /><br />import javax.servlet.ServletContext;<br />import java.util.LinkedList;<br />import java.util.List;<br /><br />public class SmartContextLoader extends ContextLoaderListener {<br /><br />    private static Logger logger = LoggerFactory.getLogger( SmartContextLoader.class );<br /><br />    @Override<br />    protected void customizeContext( ServletContext servletContext, ConfigurableWebApplicationContext applicationContext ) {<br />        logger.info( \"initializing smart context loader.\");<br />        String property = System.getProperty( \"app.context\", System.getenv( \"app.context\" ) ); // default to cloudify<br />        property = property == null ? \"default-context.xml\" : property;<br />        List<String> locations = new LinkedList<String>(  );<br />        locations.add( \"WEB-INF/web-context.xml\" ); // got no idea why... but I need this!<br />        CollectionUtils.addAll( locations, property.split( \";\" ) ); //allow multiples<br />        logger.info( \"using the following locations [{}]\", locations );<br />        applicationContext.setConfigLocations( locations.toArray( new String[CollectionUtils.size( locations )] ) );<br /><br />    }<br />} <br /></pre></div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6155082961192861866/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/overriding-spring-mvc-context-from-java.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6155082961192861866"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6155082961192861866"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/overriding-spring-mvc-context-from-java.html",
                        "_title": "Overriding Spring MVC Context From Java Arguments And Environment Variables"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7260444241596258666",
                "published": "2013-03-18T07:26:00.000-07:00",
                "updated": "2013-03-18T07:26:00.763-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "gwt"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "firefox"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "chrome"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Running Selenium With GWT Dev"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Running Selenium With GWT Dev </h1> <p>  For those who are still stuck with GWT,<br/>  if you have Selenium tests, you should get your tests to run on GWT dev mode. <br/>  It will save you the GWT compile time (which can be minutes!) <br/>  and make your GWT bug fix process faster (by minutes!). <br/>  The code I will show here is relevant for Chrome and Firefox. <br/> </p> <h1> Chrome </h1> <pre class=\"prettyprint\"><br />ChromeOptions options = new ChromeOptions();<br />options.addExtensions( getResourceLocation( gwtChromeDevCrx ) );<br />DesiredCapabilities desired = DesiredCapabilities.chrome();<br />desired.setCapability( \"chrome.switches\", Arrays.asList( \"--start-maximized\" ) );<br />desired.setCapability( ChromeOptions.CAPABILITY, options ); // add the gwt dev plugin<br /><br />ChromeDriverService chromeService = new ChromeDriverService.Builder().usingAnyFreePort().usingDriverExecutable( getResourceLocation( chromeDriverPath ) ).build();<br />logger.info( \"Starting Chrome Driver Server...\" );<br />chromeService.start();<br />webDriver = new RemoteWebDriver( chromeService.getUrl(), desired );<br /> </pre> <p>  In the code above, you can see I am add an extension to ChromeOptions and <br/>  later I add the chrome options to the desired capabilities.<br/> </p> <h2> Downloading The GWT Dev Chrome Extensions </h2> <p>  I had problems downloading the chrome extension (crx file) for get dev. <br/>  For that, I browsed the chrome store and found the GWT extension. <br/>  <div style=\"font-family: 'Courier New', 'Lucida Console'; \">   https://chrome.google.com/webstore/detail/gwt-developer-plugin/<span style=\"color:red\">jpjpnpmbddbjkfaccnmhnkdgjideieim</span>?hl=en   </div>  Then I copied the item ID. (marked in red)<br/>  Then I opened the following URL in firefox   <div style=\"font-family: 'Courier New','Lucida Console';\">   https://clients2.google.com/service/update2/crx?response=redirect&x=id%3D<span style=\"color:red\">jpjpnpmbddbjkfaccnmhnkdgjideieim</span>%26uc   </div>  Now all is left is to store it somewhere and set the gwtChromeDevCrx to point to it.  </p>   <h1> Firefox </h1>   <pre class=\"prettyprint\"><br />FirefoxProfile profile = new FirefoxProfile();<br />profile.addExtension( getResourceLocation( gwtFirefoxDevXpi ) );<br />webDriver = new FirefoxDriver( profile );<br /> </pre>  <p>  As you can see, initializing Firefox is easier. <br/>  The Firefox plugin (xpi file) is available for download at google code. <br/>  <a href=\"https://code.google.com/p/google-web-toolkit/downloads/list?can=2&q=xpi\" title=\"GWT Dev Plugin Download At Google Code\" alt=\"GWT Dev Plugin Download At Google Code\">GWT Dev Plugin Download At Google Code</a><br/>  Store it somewhere and make gwtFirefoxDevXpi point to it. <br/> </p>  <h1> Troubleshooting </h1>   <p>   I had 2 problems while writing this code. <br/>   Both were resolved by upgrades.<br/> </p> <h2>unable to initialize chrome ['tab_index' missing or invalid (WARNING: The server did not provide any stacktrace information)</h2>   <p>  When you try to run with Chrome and GWT dev mode, you might get this error. <br/>  Simply <a href=\"https://code.google.com/p/chromedriver/downloads/list\" title=\"Download Chrome Driver\" alt=\"Download Chrome Driver\" target=\"_blank\">upgrade your chrome driver</a>. <br/> </p> <h2> LdrLoadDll: Blocking load of 'babyfox.dll'</h2>   <p>  Actually I am not sure if this is the error. Might be just an info print.<br/>  The entire stack is something like this    <pre><br />org.openqa.selenium.firefox.NotConnectedException: Unable to connect to host 127.0.0.1 on port 7055 after 45000 ms. Firefox console output:<br />*** LOG addons.manager: Application has been upgraded<br />*** LOG addons.xpi: startup<br />*** LOG addons.xpi: Skipping unavailable install location app-system-local<br />*** LOG addons.xpi: Skipping unavailable install location app-system-share<br />*** LOG addons.xpi: Ignoring file entry whose name is not a valid add-on ID: C:\\Users\\userId\\AppData\\Local\\Temp\\anonymous2657623847203509192webdriver-profile\\extensions\\webdriver-staging<br />*** LOG addons.xpi: checkForChanges<br />*** LOG addons.xpi-utils: Opening database<br />*** LOG addons.xpi-utils: Creating database schema<br />*** LOG addons.xpi: New add-on fxdriver@googlecode.com installed in app-profile<br />*** Blocklist::_loadBlocklistFromFile: blocklist is disabled<br />*** LOG addons.xpi: New add-on {82AF8DCA-6DE9-405D-BD5E-43525BDAD38A} installed in app-global<br />*** LOG addons.xpi: New add-on {972ce4c6-7e08-4474-a285-3208198ce6fd} installed in app-global<br />*** LOG addons.xpi: New add-on {BBDA0591-3099-440a-AA10-41764D9DB4DB} installed in winreg-app-global<br />*** LOG addons.xpi: Updating database with changes to installed add-ons<br />*** LOG addons.xpi-utils: Updating add-on states<br />*** LOG addons.xpi-utils: Writing add-ons list<br />*** LOG addons.manager: shutdown<br />*** LOG addons.xpi: shutdown<br />*** LOG addons.xpi-utils: shutdown<br />*** LOG addons.xpi-utils: Database closed<br />*** LOG addons.xpi: startup<br />*** LOG addons.xpi: Skipping unavailable install location app-system-local<br />*** LOG addons.xpi: Skipping unavailable install location app-system-share<br />*** LOG addons.xpi: Ignoring file entry whose name is not a valid add-on ID: C:\\Users\\userId\\AppData\\Local\\Temp\\anonymous2657623847203509192webdriver-profile\\extensions\\webdriver-staging<br />*** LOG addons.xpi: checkForChanges<br />*** LOG addons.xpi: No changes found<br />LdrLoadDll: Blocking load of &#039;babyfox.dll&#039; -- see http://www.mozilla.com/en-US/blocklist/<br /><br /> at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.start(NewProfileExtensionConnection.java:106)<br /> at org.openqa.selenium.firefox.FirefoxDriver.startClient(FirefoxDriver.java:244)<br /> at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:110)<br /> at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:188)<br /> at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:183)<br /> at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:179)<br /> at org.openqa.selenium.firefox.FirefoxDriver.<init>(FirefoxDriver.java:92)   <br />  </pre>   This is a Firefox vs. Selenium bug. <br/>  To fix this, upgrade your selenium. <br/>  Since every environment has a different FF version, <br/>  I suggest you simply create Maven profiles. Something like this:   <pre><br /><profile> <id>firefox_19</id> <properties> <selenium.version>2.30.0</selenium.version> </properties> </profile><br /><profile> <id>firefox_17</id> <properties> <selenium.version>2.28.0</selenium.version> </properties> </profile>   <br />  </pre> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7260444241596258666/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/running-selenium-with-gwt-dev.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7260444241596258666"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7260444241596258666"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/running-selenium-with-gwt-dev.html",
                        "_title": "Running Selenium With GWT Dev"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1343689462733265266",
                "published": "2013-03-11T06:58:00.000-07:00",
                "updated": "2013-03-11T06:58:00.445-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "logback"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "slf4j"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Setting Logback with Play!Framework 2.0"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Setting Logback with Play!Framework 2.0</h1>   <div class=\"content\">  <p>   Last time I wrote about <a href=\"/2013/03/slf4j-with-logback-in-maven-project.html\" title=\"how to setup a Maven Project with SLF4J using Logback\" alt=\"how to setup a Maven Project with SLF4J using Logback\" rel=\"prev\">how to setup a Maven Project with SLF4J using Logback</a>.<br/>   In this post I will explain how to do the same for Play!Framework 2.0.<br/>  </p> <h2> Steps to add Logback and SLF4J - DO NOT DO ANYTHING, it is already there</h2>   <p>  Well, the thing with Play!Framework is that you usually don't need to do anything, as most of it is already there.<br/>  So it SLF4J and Logback. <br/>  However... <br/>  There are a lot of troubleshooting.<br/> </p> <h2> Settings a logger.xml</h2>   <p>  In this post I will show how to set up Logback in Play!Framework 2.0 using a logger.xml file.<br/>  All Play has to say about it is in the \"application.conf\" file, a line specifying   <pre class=\"prettyprint\"># You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .</pre> </p> <p>  To get things going, all you need to do is place a logger.xml file under \"conf\" folder. <br/>  A basic logger.xml file looks like so (we will see soon that for Play!Framework this is not enough):    <pre  class=\"prettyprint\"><br /><configuration><br /><br />    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"><br />        <!-- encoders are assigned the type<br />     ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --><br />        <encoder><br />            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern><br />        </encoder><br />    </appender><br /><br />    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"><br />        <file>logFile.log</file><br />        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"><br />            <!-- daily rollover --><br />            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern><br /><br />            <!-- keep 1 days&#039; worth of history --><br />            <maxHistory>5</maxHistory><br />        </rollingPolicy><br /><br />        <encoder><br />            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern><br />        </encoder><br />    </appender><br /><br />    <root level=\"info\" additivity=\"false\"><br />        <appender-ref ref=\"STDOUT\"/><br />        <appender-ref ref=\"FILE\"/><br />    </root><br /><br /><br /></configuration>   <br />  </pre> </p> <h1> Troubleshooting </h1>   <h2> No log prints in windows </h2>   <p>  In Play!Framework 2.0.4, for some reason, windows did not get the log prints. <br/>  To resolve this you need to add an explicitly declare the logger.xml location like so :    <pre class=\"prettyprint\">play -Dlogger.file=conf/logger.xml run</pre>  Note that if you want to debug, you will have to write the following   <pre class=\"prettyprint\">play debug -Dlogger.file=conf/logger.xml run</pre>  important to place it before the -D flag.  </p> <h1> Still no log prints - OR - Log level is incorrect </h1>   <p>  Looking in \"application.conf\" you will see the following properties   <pre class=\"prettyprint\"><br />logger=INFO<br />logger.application=DEBUG<br />logger.play=INFO<br />  </pre>  Or something of that sort.. <br/>  Since you will configure your logger from logger.xml file, you need to switch these off.<br/>  <pre class=\"prettyprint\"><br />logger=OFF<br />logger.application=OFF<br />logger.play=OFF<br />  </pre>      And then redefine this in your logger.xml like so    <pre class=\"prettyprint\"><br /><logger name=\"application\" level=\"info\" additivity=\"false\"><br />    <appender-ref ref=\"STDOUT\"/><br />    <appender-ref ref=\"FILE\"/><br /></logger><br /><br /><logger name=\"play\" level=\"INFO\" additivity=\"false\"><br />    <appender-ref ref=\"STDOUT\"/><br />    <appender-ref ref=\"FILE\"/><br /></logger>   <br />  </pre>  Now, you should see the prints appear only once which is just as you would expect. <br/> </p></div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1343689462733265266/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/setting-logback-with-playframework-20.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1343689462733265266"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1343689462733265266"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/setting-logback-with-playframework-20.html",
                        "_title": "Setting Logback with Play!Framework 2.0"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5788320470121536868",
                "published": "2013-03-08T04:46:00.001-08:00",
                "updated": "2013-03-08T04:46:43.135-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "postmessage"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Using postMessage for JavaScript API clients"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1>Exposing cross domain JavaScript API with postMessage</h1> <div>  <p>   In a previous post <a href=\"/2013/02/being-your-own-rest-client.html\" alt=\"Being Your Own Rest Client\" title=\"Being Your Own Rest Client\">Being Your Own Rest Client</a> <br/>   I explained how REST and API are 2 different things <br/>   and using REST API from your front-end is not really recommended <br/>   Lately I have been using postMessage to create JavaScript API clients.<br/>   I know that CORS is already here and this is the way to go, <br/>   but I find something so appealing in postMessage that I just can't let it go. <br/>   For example, with postMessage, the API provider can use cookies! <br/>   This seems very powerful to me. <br/>   Using postMessage also forces the API to be in a DOM environment.<br/>   I wonder which cool usages this will bring with it.<br/>  </p>  <h1> Lets Write A Small API Using postMessage</h1>    <p>   The scenario here is that you have a JavaScript client, and you would like to let people reuse it. <br/>   In order to use postMessage we will need 2 wrappers around the JavaScript client:     <li> An HTML wrapper that simply imports your JavaScript client, intercepts messages and maps them to the client function</li>   <li> A JS wrapper that  will expose the same API as the original JavaScript client, but replaces the logic with <br/>    A postMessage </li>    </p>   <p>   The term 'client' might be a bit confusing. So lets realign the definition.     <li> The original \"client\" is now the provider/server as it will be server by the your server into the IFrame </li>   <li> The HTML wrapper is also part of the provider/server </li>   <li> The new JS wrapper is actually the reused JS client - so lets call it consumer/client</li>   To demonstrate this, I made the following pictures</br>  <a href=\"http://2.bp.blogspot.com/-xUIW4kuhdSE/UTndT-EX88I/AAAAAAAAVO4/GF2y-ba8aZ4/s1600/architecture_overview.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://2.bp.blogspot.com/-xUIW4kuhdSE/UTndT-EX88I/AAAAAAAAVO4/GF2y-ba8aZ4/s320/architecture_overview.png\" /></a><a href=\"http://2.bp.blogspot.com/-eJRxoayuLB4/UTndU1Ou6BI/AAAAAAAAVPA/ohGweweosHo/s1600/gmail-demo.png\" imageanchor=\"1\" ><img border=\"0\" src=\"http://2.bp.blogspot.com/-eJRxoayuLB4/UTndU1Ou6BI/AAAAAAAAVPA/ohGweweosHo/s320/gmail-demo.png\" /></a>  </p>  <h1> The API We Will Write and a User Story </h1> <p>  So lets imagine we wrote a service that handles tasks, and GMail wants to integrate with us! yey! <br/>  The user story is:    <div class=\"user-story\">   User logged in to GMail<br/>   User got an email - it is their mother telling them to remember to buy shoes<br/>   The user want to add this as a task to your service so they right click the email and select \"add to tasks\" from a popup menu<br/>  </div> </p> <p>  You might be surprised how a simple scenario like this is hard to implement well. <br/>  Important to note in the user story is that the user right-clicked the email, and never left the GMail UI. <br/>  The user is oblivious to the fact an external service was used and they never have to leave the GMail inbox section. <br/>  The only time where the user is aware of an external service is when they grant permissions to GMail to access this external service. <br/>  This permissions procedure should end with GMail having an API key they can use. <br/>  Since the user has to login to GMail, it is okay if GMail uses our JavaScript client, and the API key is already protected.<br/>  Eventually the user gets the same Look & Feel if we were to use Server-To-Server integration instead of postMessage.<br/>  This kind of seamless integration is not so obvious when using only JavaScript. <br/> </p> <p>  For example: GMail has a \"calendar\" plug-in. However this uses an iframe or a back-end which is not as good as we are offering here. <br/> </p> <h1> Lets write the client </h1>   <p>     This is our \"task-api-js-client.js\" file we expose to our customers    <pre class=\"prettyprint\"><br /><br />var TaskDetails =  function(){<br /><br /> var title;<br /> var content;<br /><br /> this.setTitle = function( _title ){ title = _title; return this; };<br /> this.setContent = function(_content){ content = _content; return this;};<br /><br /> this.getTitle = function( ){ return title; };<br /> this.getContent = function( ){ return content; }<br /><br />};<br /><br />var TaskApiClient =  function( apiKey ){<br /> // assuming consumer called this onload..<br /> var iframe = document.createElement('iframe');<br /> iframe.style.display = \"none\";<br /> iframe.src = \"//ourservice.com/provider.html\"; // this is the HTML. the HTML will import the JavaScript.<br /> document.body.appendChild(iframe); // now we are ready to communicate with our service<br /><br /> this.addTask = function( taskDetails ){<br />  iframe.contentWindow.postMessage(JSON.stringify({ 'name' : 'addTask',<br />            'task' : {<br />                'title' : taskDetails.getTitle() ,<br />                'content' : taskDetails.getContent}}),<br />            \"http://ourservice.com\");<br /> }<br />};<br />  </pre>   As you can see, the consumer side client is pretty thin. all it does is postMessages. <br/>  Now lets see the client on the provider side - here we can assume JQuery exists as this code runs in our IFrame.     <pre class=\"prettyprint\"><br />function receieveMessage( msg ) {<br /> var message = JSON.parse(msg.data);<br /> if ( message.name == \"addTask\"){<br />  $.ajax({ /**.. ajax call to addTask **/ })<br /> }<br />}<br /><br />window.addEventListener(\"message\", receiveMessage, false);<br />  </pre>   And that is it!   </p>  <h1> Difficulty - How to Implement an API That Returns a Result? </h1>   <p>  Since postMessage is asynchronous, getting result require a callback. <br/>  For the consumer, this is much like using Ajax. <br/>  Implementing a global callback for each message is easy.<br/>  In order to produce parallel callbacks, you will need to implement some kind of ID mechanism<br/>  Just to be clear, in Ajax you can do    <pre class=\"prettyprint\"><br />$.ajax({ url:'/myAjax', success:function(){ console.log(\"me 1\");}})<br />$.ajax({ url:'/myAjax', success:function(){ console.log(\"me 2\");}})<br />  </pre>   However, in order to do this with postMessage, you will need to implement this yourself. <br/>  postMessage can support, almost out of the box, a single callback per received \"message type\". <br/>  Although \"message type\" is not built into postMessage, it is best practice to use messages <br/>  containing meta-data such as message type. <br/> </p> <h1> A Word About Extensibility  </h1> <p>  What I like about postMessage combined with this method is that it is easy to extend. <br/>  Unlike Ajax - where you need to modify the options sent on the method, with postMessage<br/>  You can simply bind \"receiveMessage\" anywhere in your code, and receive the message.<br/> </p> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5788320470121536868/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/using-postmessage-for-javascript-api.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5788320470121536868"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5788320470121536868"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/using-postmessage-for-javascript-api.html",
                        "_title": "Using postMessage for JavaScript API clients"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/-xUIW4kuhdSE/UTndT-EX88I/AAAAAAAAVO4/GF2y-ba8aZ4/s72-c/architecture_overview.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6936315518028321441",
                "published": "2013-03-05T01:09:00.000-08:00",
                "updated": "2013-03-05T01:09:00.094-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "logger"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "SLF4J with Logback in a Maven Project"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\"> <h1> SLF4J with Logback in a Maven Project</h1>   <div class=\"content\"> <p>  I recently started migrating my projects to SLF4J. <br/>  SLF4J is a single API for all logger implementations.<br/>  There are at least 3 implementations I know about:   <ul>   <li><a href=\"http://logging.apache.org/log4j/1.2/\" title=\"log4j\" alt=\"log4j\" target=\"_blank\">Log4J</a></li>   <li><a href=\"http://docs.oracle.com/javase/1.4.2/docs/api/java/util/logging/package-summary.html\" title=\"Java Utils Logging\" alt=\"Java Utils Logging\" target=\"_blank\"> Java Logging Utils </a></li>   <li><a href=\"http://logback.qos.ch/\" alt=\"Logback\" title=\"Logback\" target=\"_blank\">Logback - the new Log4J</a></li>  </ul> </p> <h2> Why use SLF4J? </h2>   <p>  When you write a Java library which will be used by unknown consumer, logging is always a problem.<br/>  You might choose using implementation A, while the consumer uses implementation B. <br/>  And there are those who use \"System.out\".. :( <br/>  SLF4J will resolve this issue. <br/>  When you use SLF4J you let the consumer decide which logging implementation they want. <br/> </p> <h2> Nice API </h2> <p>  SLF4J offers an API that was dearly missing in precious implementations. <br/>  While being very similar to LOG4J using    <pre class=\"prettyprint\"><br />logger.info(\"...\");<br />logger.debug(\"...\");<br />  </pre>  It has a built in formatting for strings using the \"{}\" placeholders.<br/> </p> <h2> Original Configuration </h2>   <p>  Even though SLF4J wraps the API, it leaves the configuration as it was. <br/>  This means that if you have a project using LOG4J, you can start using SLF4J right away, without modifying your configuration.<br/>  On the other hand, it means that if you decide to modify the underlying implementation, you would have to rewrite configuration.<br/> </p> <h2> Get rid of level checks inside your code</h2>   <p>  Using SLF4J , like Logback and logging utils, makes the need to check log level redundant<br/>  Once you had to write code like    <pre class=\"prettyprint\"><br />logger.isDebugEnabled() { logger.debug(\" myArg=[\" + myArg + \"]\"); }   <br />  </pre>  The need for log level is required since string concatenation had bad performance. <br/>  SLF4J uses a form of String formatting like so    <pre class=\"prettyprint\"><br />logger.debug(\"myArg={}\", myArg)<br />  </pre>  and so there is no string concatenation.<br/>  With this method, SLF4J can check the log level before formatting the String.   </p> <h2> How to print formatted string and exception? </h2>   <p>  Looking at the API it is not clear how to use    <pre class=\"prettyprint\">logger.error</pre>  to print a formatted string and an exception with stacktrace.<br/>  You can always use the following   <pre class=\"prettyprint\"> logger.error(String.format(\"this is my %s\", arg), e); </pre>  But as <a href=\"http://stackoverflow.com/a/6374166\">Ceki answer in stackoverflow on how to log formatted message and exception in SLF4J</a> states, it is possible with the SLF4J<br/>  API, you simply need to pass the exception as the last argument. <br/>  <pre class=\"prettyprint\">logger.error(\"this is my {}\", arg, e);</pre>  Sometimes, you will need to cast the varargs to Object[]</br>  <pre class=\"prettyprint\">logger.error(\"this is my {}\", new Object[]{ arg, e});</pre> </p> <h2> Settings SLF4J with Logback in a Maven Project</h2> <p>  Setting up SLF4J with Logback is quite easy. <br/>  Similar to <a href=\"/2010/08/setting-up-log4j-in-maven-project.html\" alt=\"setting up LOG4J with Maven\" title=\"setting up LOG4J with Maven\"> Log4J settings </a> we will use the resource folder here well. <br/>  This time we will use a file named \"logger.xml\" which looks something like this at the root of our resources folder.<br/>  <pre class=\"prettyprint\"><br /><configuration><br /><br />    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"><br />        <!-- encoders are assigned the type<br />     ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --><br />        <encoder><br />            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern><br />        </encoder><br />    </appender><br /><br />    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"><br />        <file>logFile.log</file><br />        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"><br />            <!-- daily rollover --><br />            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern><br /><br />            <!-- keep 1 days&#039; worth of history --><br />            <maxHistory>5</maxHistory><br />        </rollingPolicy><br /><br />        <encoder><br />            <pattern>%d{HH:mm:ss.SSS}  %-4relative [%thread] %-5level %logger{35} - %msg%n</pattern><br />        </encoder><br />    </appender><br /><br />    <root level=\"info\" additivity=\"false\"><br />        <appender-ref ref=\"STDOUT\"/><br />        <appender-ref ref=\"FILE\"/><br />    </root><br /><br /><br /></configuration>   <br />  </pre> </p> <p>  You maven dependencies should look like this    <pre class=\"prettyprint\"><br /><dependency><br />    <groupId>org.slf4j</groupId><br />    <artifactId>slf4j-api</artifactId><br />    <version>1.6.6</version><br /></dependency><br /><br /><dependency><br />    <groupId>ch.qos.logback</groupId><br />    <artifactId>logback-classic</artifactId><br />    <version>1.0.9</version><br /></dependency>   <br />  </pre>  </p> <p>  In you Java you should have the following code   <pre class=\"prettyprint\"><br />   private static Logger logger = LoggerFactory.getLogger( MyClass.class );<br />  </pre>  With the following imports   <pre class=\"prettyprint\"><br />   import org.slf4j.Logger;<br />   import org.slf4j.LoggerFactory;<br />  </pre> </p> <h1> Troubleshooting</h1>   <p>  The most famous problem with SLF4J is when you have multiple implementations available.<br/>  In this case, it seems <a href=\"http://stackoverflow.com/a/11434477/1068746\" title=\"stackoverflow question - slf4j multiple implementations\"  alt=\"stackoverflow question - slf4j multiple implementations\" target=\"_blank\">there's no way to force SLF4J to use a certain implementation</a>  Instead you need to clean you classpath. <br/>  In Maven, this means you need to exclude transitive dependencies ( those dependencies that originate from other dependencies ).<br/>  So for example, if you depend on \"project-X\" which brings LOG4J with it, you should write the following   <pre class=\"prettyprint\"><br /><dependency><br />    <groupId>project.x</groupId><br />    <artifactId>project-x</artifactId><br />    <version>X.X.X</version><br />    <exclusions><br />        <exclusion><br />            <groupId>log4j</groupId><br />            <artifactId>log4j</artifactId><br />        </exclusion><br />    </exclusions><br /></dependency>   <br />  </pre> </p> <p>  If you need to find out which dependency brings LOG4J with it, simply use \"mvn dependency:tree\" command to help you. <br/>  Go to the folder with the POM, and run this command. You should get output looking like this<br/>  <pre class=\"prettyprint\"><br />[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ cloudify-repository ---<br />[INFO] my.project:my-project:jar:1.0-SNAPSHOT<br />[INFO] +- org.springframework:spring-context:jar:3.1.3.RELEASE:test<br />[INFO] |  +- org.springframework:spring-aop:jar:3.1.3.RELEASE:test<br />[INFO] |  |  \\- aopalliance:aopalliance:jar:1.0:test<br />[INFO] |  +- org.springframework:spring-beans:jar:3.1.3.RELEASE:test<br />[INFO] |  +- org.springframework:spring-core:jar:3.1.3.RELEASE:test<br />[INFO] |  |  \\- commons-logging:commons-logging:jar:1.1.1:test<br />[INFO] |  +- org.springframework:spring-expression:jar:3.1.3.RELEASE:test<br />[INFO] |  \\- org.springframework:spring-asm:jar:3.1.3.RELEASE:test<br />[INFO] +- org.sonatype.sisu:sisu-inject-bean:jar:2.1.1:test<br />[INFO] |  \\- org.sonatype.sisu:sisu-guice:jar:no_aop:2.9.4:test<br />[INFO] +- junit:junit:jar:4.8.2:test<br />[INFO] +- org.slf4j:slf4j-api:jar:1.6.6:compile<br />[INFO] +- ch.qos.logback:logback-classic:jar:1.0.9:compile<br />[INFO] |  \\- ch.qos.logback:logback-core:jar:1.0.9:compile<br />[INFO] \\- org.eclipse.jgit:org.eclipse.jgit:jar:2.2.0.201212191850-r:compile<br />[INFO]    \\- com.jcraft:jsch:jar:0.1.44-1:compile   <br />  </pre> </p> </div> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6936315518028321441/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/slf4j-with-logback-in-maven-project.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6936315518028321441"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6936315518028321441"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/03/slf4j-with-logback-in-maven-project.html",
                        "_title": "SLF4J with Logback in a Maven Project"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7588534720172811991",
                "published": "2013-02-19T14:43:00.002-08:00",
                "updated": "2013-07-26T21:47:51.390-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "html5"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "javascript"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "How to make postMessage support multi origins and multi messages"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog prettify\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1>How to make postMessage support multi origins and multi messages?</h1> <div>  <p>   In my <a href=\"/2013/02/postMessage-plugin-part1.html\" target=\"_blank\" alt=\"HTML5 - cross domain messaging with postMessage\" title=\"HTML5 - cross domain messaging with postMessage\" rel=\"prev\">previous post I talked about HTML5 - cross domain messaging with postMessage</a>.    I showed how to use a JQuery plugin written by Ben Alman that wraps this method and falls back on hash tags<br/>   in the URL for older browsers. <br/>   In this post I will talk about how to improve the usage in this plugin to support multiple messages<br/>   from different origins. <br/>    </p> <h1> The Problem </h1>    <p>   If you add another call to <code>$.receiveMessage</code> you will get some unwanted <br/>   behavior as you will override the previous call instead of adding another handler to the event.<br/>   I've seen people coming across the issue of handling multiple messages:     <ul>    <li><a href=\"http://stackoverflow.com/q/8479911/1068746\" target=\"_blank\" alt=\"stackoverflow question about multiple messages with postMessage\" title=\"stackoverflow question about multiple messages with postMessage\">Reference #1</a></li>    <li><a href=\"http://stackoverflow.com/questions/11253517/postmessage-multiple-postmessage-events-functions-callbacks\" alt=\"stackoverflow question about multiple messages with postMessage\" target=\"_blank\" title=\"stackoverflow question about multiple messages with postMessage\">Reference #2</a></li>   </ul>    There is also the issue of multiple origins. <br/>   Some resources will tell you to use an asterisk (\"*\") or some regular expression but <br/>   it seems that Ben Alman's plugin has a nicer, more JQuery/JavaScript solution, <br/>   and I wanted to share it with you. <br/>   If you try to use asterisks with the plugin, it will not work. <br/>  </p>  <h1> Adding support to multiple messages and multiple origins </h1>    <p>   Looking and Ben Alman's code you can see the code for filtering origins    <pre class=\"prettyprint\"><br />$.receiveMessage = ... { <br /> ...<br />  if ( ( typeof source_origin === 'string' && e.origin !== source_origin )<br />  || ( $.isFunction( source_origin ) && source_origin( e.origin ) === FALSE ) ) {<br />  ...<br /> }<br /> ...<br />}<br />   </pre>   As you can see, the plugin checks if \"source_origin\" is a function. If so, <br/>   it invokes the function giving it the origin. <br/>   The good thing about this code is that it is so flexible, I can do whatever I want.<br/>   For example, if I pass \"function( origin ) { return true; }\" to the \"receiveMessage\" function, <br/>   I will receive all the messages.<br/>   This way I can add support for as many origins as I'd like.    </p>  <h1> Multiple origins and multiple messages </h1>    <p>   Here is my code that allows handling multiple origins and multiple messages using Ben Alman's Plugin.     <pre class=\"prettyprint\"><br />$(function () {<br />    var callbacks = {};<br />    callbacks[\"origin1\"] = {};<br />    callbacks[\"origin1\"][\"message1\"] = function (e) {<br />        console.log([\"message1 from origin1\", JSON.parse(e.data) ]);<br />        alert(\"this is message1 from origin1 with data\" + e.data );<br />    };<br />    callbacks[\"origin1\"][\"message2\"] = function(e){<br />        console.log([\"message2 from origin1\", JSON.parse(e.data) ]);<br />        alert(\"this is message2 from origin1 with data\" + e.data );<br />    };<br /><br />    callbacks[\"origin2\"] = {};<br />    callbacks[\"origin2\"][\"message1\"] = function(e){<br />        console.log([\"message2 from origin2\", JSON.parse(e.data) ]);<br />        alert(\"this is message2 from origin2 with data\" + e.data );<br />    };<br /><br />    // and so on and on..<br /><br /><br />    $.receiveMessage(function (e) {<br />                try {<br />                    var msg = JSON.parse(e.data);<br />                    callbacks[e.origin][msg.name](e);<br />                } catch (exc) {<br />                    console.log([\"problem invoking callback for \", e, exc, callbacks])<br />                }<br />            },<br />            function (origin) {<br />                return true;<br />            }<br />    ); // support for different domains<br />})    <br />   </pre>  </p>  <p>   I first declare a JSON of callbacks. <br/>   I map from origins to a map of message handlers. <br/>   I base this code on the assumption messages have the following structure<br/>   <pre class=\"prettyprint\"><br />    var myMessage = { \"name\" : \"message1\", moreInfo: \"moreValues\" };<br />   </pre>   end then are sent with something like this :     <pre class=\"prettyprint\"><br />    $.postMessage( JSON.stringify( myMessage ), myUrl , parent );<br />   </pre>  </p>  <p>   <!--In my next, and <a href=\"/2013/02/postMessage-plugin-part3.html\" alt=\"postMessage and its implications\" title=\"postMessage and its implications\" rel=\"next\">final post about postMessage</a>, I will discuss about:     <ul>    <li> The implications of this new function </li>    <li> How can we use this function to finally make a cross domain REST client in JavaScript?</li>    <li> Why should you prefer JavaScript clients over anything else?</li>   </ul>-->    </p><h1> Why can't I simply call $.receiveMessage twice? </h1>  <p>It seems that Ben Alman decided to be clever and allow only a single callback to the event. <br/>Reading the code, the important line you should look at is :  <pre class=\"prettyprint\"><br />rm_callback && p_receiveMessage();<br /></pre>This is a clever one-liner that does the same as  <pre class=\"prettyprint\"><br />if ( rm_callback ) { p_receieveMessage(); } <br /></pre>When you call p_receieveMessage with no arguments, you will reach the line that remove the event listener <pre class=\"prettyprint\"><br />window[ callback ? addEventListener : 'removeEventListener' ]( 'message', rm_callback, FALSE );<br /></pre>since callback is null/undefined, you will get the string 'removeEventListener' which will do just that - remove the listener. </p><p>So technically, you can also modify the plugin that Ben wrote and remove the clever line <pre><br />rm_callback && p_receiveMessage();<br /></pre>You might wish to implement this solution instead. <br/>This solution suites better if you want to assign listeners from different partials in the same template. <br/>This will simulate a behavior closer to pure JavaScript. <br/>You can still remove listeners by simply calling p_receiveMessage with no arguments. <br/></p><p>Personally, I'd rather retrigger the message event on the body.  <pre><br />$(\"body\").trigger(\"message\", message );<br /></pre>And then I am not dependent on implementations.  </p> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7588534720172811991/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/02/postMessage-plugin-part2.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7588534720172811991"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7588534720172811991"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/02/postMessage-plugin-part2.html",
                        "_title": "How to make postMessage support multi origins and multi messages"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5306132937306822840",
                "published": "2013-02-12T08:20:00.000-08:00",
                "updated": "2013-03-02T06:29:21.860-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "html5"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "javascript"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "HTML5 - cross domain messaging with postMessage"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1>HTML5 - cross domain messaging with postMessage</h1> <div>  <p>   <code>postMessage</code> an HTML5 modification that was added to JavaScript in order to allow <br/>   passing messages across domains. <br/>   Now it is easy to send and receive messages to and from an <code>iframe</code><br/>   and define a messages whitelist keeping your frame safe from evil messages.<br/>    </p>  <h1>Ben Alman's JQuery postMessage plugin</h1>  <p>   In this post I will explore <a href=\"http://benalman.com/projects/jquery-postmessage-plugin/\" target=\"_blank\" alt=\"Ben Alman's postMessage JQuery plugin\">Ben Alman's postMessage JQuery plugin</a>.<br/>   I recommend using this plugin as it uses hash tags as fallback for browsers that don't support<br/>   the postMessage function.<br/>   Lets see a simple example of how to use this plugin<br/>   </p>  <p>   The following <a href=\"https://gist.github.com/4684027\" alt=\"code sample for using postMessage\" title=\"code sample for using postMessage\" target=\"_blank\">code sample for using postMessage</a> is also available as a gist on github.<br/>  </p>  <h2> Sender Code </h2>  <pre class=\"prettyprint\"><br /><!DOCTYPE HTML><br /><html lang=\"en-US\"><br /><head><br />    <meta charset=\"UTF-8\"><br />    <title>Post Message Example</title><br />    <script src=\"/assets/javascripts/jquery.min.js\"> </script><!-- jquery --><br />    <script src=\"/assets/javascripts/jquery.ba-postmessage.min.js\"> </script><!-- plugin --><br /></head><br /><body><br /><br /><script type=\"text/javascript\"><br />    console.log(\"posting message\");<br />    var origin = \"http://localhost:9000\";<br />    var message = \"hello world!\";<br />    $.postMessage(  message , origin , parent );<br /></script><br /></body><br /></html><br />  </pre>  <h2> Receiver Code </h2>  <pre class=\"prettyprint\"><br /><!DOCTYPE HTML><br /><html lang=\"en-US\"><br /><head><br />    <meta charset=\"UTF-8\"><br />    <title>Post Message Example</title><br />    <script src=\"/assets/javascripts/jquery.min.js\"> </script><!-- jquery --><br />    <script src=\"/assets/javascripts/jquery.ba-postmessage.min.js\"> </script><!-- plugin --><br /></head><br /><body><br /> <br /><iframe src=\"/assets/pages/postMessage/post.html\"></iframe><br /><script type=\"text/javascript\"><br />    console.log(\"adding receive message handler\");<br />    var origin = \"http://localhost:9000\"<br />    $.receiveMessage( function(e){<br />                alert(e.data);<br />            }, origin );<br /></script><br /></body><br /></html><br />  </pre>     <h1> Gist walk through </h1>    <p>   If you try to run this example, after you setup the environment you should open \"recieve.html\".<br/>   This HTML file embeds an iframe pointing to \"post.html\"<br/>   Once post.html loads it sends a message to the parent - in our case, receive.html<br/>   receive.html listens on the \"postMessage\" event, alerting the data. <br/>  </p>  <p>   Please note the use of \"origin\" in the gist. <br/>   Since I am showing a demo from localhost to localhost, I can use \"document.origin\", <br/>   however, the value should be the \"target_url\" - which is the host. <br/>   If you have an IFrame with a URL you can simply use the \"src\" value. <br/>   Ben Alman's plugin will convert it to the host name. <br/>  </p>  <p>     In my next post I will talk about how to use Ben Alman's plugin to <a href=\"/2013/02/postMessage-plugin-part2.html\" title=\"handle multiple messages from multiple origins using postMessage plugin\" alt=\"handle multiple messages from multiple origins using postMessage plugin\" ref=\"next\">handle different messages</br>   from different origins</a>. <br/>  </p>    </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5306132937306822840/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/02/postMessage-plugin-part1.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5306132937306822840"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5306132937306822840"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/02/postMessage-plugin-part1.html",
                        "_title": "HTML5 - cross domain messaging with postMessage"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1639229534893919768",
                "published": "2013-02-05T22:56:00.000-08:00",
                "updated": "2013-03-08T04:35:27.189-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rest"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Being Your Own REST Client"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"mograblog\"> <h1> Being your own REST API Client</h1> <p> REST and API are two words that got stuck together. <br/> Using REST between your client and server is one things. <br/> Exposing an API - be it REST or not - is a different thing. <br/> Thinking these are the same thing is a mistake I see a lot lately. <br/></p><p> First of all, JavaScript APi clients is a new thing.   CORS is finally here, allowing JavaScript REST clients to be reusable.<br/> Thank god! I can finally write a JavaScript REST client, and it will be reusable!<br/> Well, do not hurry please.<br/></p><p> Being your own REST API client, under the same domain, is not a good idea as it does not reflect the real API use case.<br/> There are a lot of things you will be missing out on.<br/> Technically - API provider is a different product than a consumer.<br/> The correct way to implement it is by actually writing 2 different products.<br/> If you are writing a site, and you think it is cool to use REST between back-end and front-end <br/> you will run into pitfalls. <br/></p> <p> However, there are ways to get closer without banging your head against the wall. <br/> For example, lets see how to write 2 controllers in Play!Framework 2.x .<br/> The first controller is the provider and the second controller is the consumer's back-end. <br/> The consumer's controller will call the provider's controller.<br/></p> <h1>How will this look like in Play 2.0 </h1> <p> <pre><br />========================<br />PROVIDER<br />========================<br /><br />public class Provider { <br /> @Security.Authenticated( value = ProviderAuthenticator.class )<br />    public static Result listItems( String authToken ){<br />        return ok(\"this is from provider : \" + authToken );<br />    }<br /><br />     public static class ProviderAuthenticator extends Security.Authenticator {<br /><br />        public ProviderAuthenticator() {<br />            super();    <br />        }<br /><br />        @Override<br />        public String getUsername(Http.Context ctx) {<br />            String[] tokens = null;<br />            if ( \"POST\".equalsIgnoreCase(request().method())){<br />                tokens = ctx.request().body().asFormUrlEncoded().get(\"token\");<br />            }<br />            else { // \"GET\"<br />                tokens = ctx.request().queryString().get(\"token\");<br />            }<br /><br />            return tokens == null || tokens.length ==0 ? null : tokens[0];<br />        }<br /><br />        @Override<br />        public Result onUnauthorized(Http.Context ctx) {<br />            return super.onUnauthorized(ctx);   <br />        }<br />    }<br />}<br /><br /><br />=======================<br />Consumer<br />=======================<br /><br />public class Consumer { <br />    @Security.Authenticated( value = ConsumerAuthenticator.class )<br />    public static Result myConsumer(){<br />        return myProvider(session().get(\"token\"));<br />    }<br /><br />    public static class ConsumerAuthenticator extends Security.Authenticator {<br /><br />       public ConsumerAuthenticator() {<br />           super();   <br />       }<br /><br />       @Override<br />       public String getUsername(Http.Context ctx) {<br />           return ctx.session().get(\"token\");<br />       }<br /><br />       @Override<br />       public Result onUnauthorized(Http.Context ctx) {<br />           return super.onUnauthorized(ctx);   <br />       }<br />   }<br />} <br /><br /><br /><br />========================================<br />THIS IS HOW THE AJAX CALL WOULD LOOK LIKE<br />========================================<br />< script > $.ajax({url:'/dashboard/listItems'})  </script ><br /><br />=========================================<br />THIS IS HOW THE ROUTES FILE WOULD LOOK LIKE<br />=========================================<br /><br /># Consumer<br />GET  /dashboard/items  controllers.Consumer.listItems<br /><br /># Provider - REST<br />GET  /api/items    controllers.Provider.listItems( authToken:String )<br /><br /><br /></pre> </p><h2> Conclusions </h2>  <p> REST and API are 2 totally different things.<br/> Understand what each means and how to use them.<br/> Make sure you really need it before you use it.<br/> Do not be lightheaded with the decision of whether to use it or not,<br/> this decision can complex the entire development process and open security holes in your website.<br/> When in doubt, you probably do not need to expose an API, however you should still  <br/> use REST like mapping between front-end and back-end.  </p> </div> <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1639229534893919768/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/02/being-your-own-rest-client.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1639229534893919768"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1639229534893919768"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/02/being-your-own-rest-client.html",
                        "_title": "Being Your Own REST Client"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5103002120090794661",
                "published": "2013-01-29T14:36:00.000-08:00",
                "updated": "2013-01-29T14:36:00.371-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "sublime"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "html"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "chrome"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Showing HTML in textarea"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\" class=\"mograblog\"><h1> Showing HTML in textarea </h1><p> Every now and then you get to show HTML in a textarea. <br/> A common usage for this would be to copy some HTML code you should embed in your site <br/></p><p> In order to show the HTML properly, you need to escape it first. <br/> So your code should look something like  <pre><textarea><div>my div</div></textarea></pre></p>  <p> I write HTML in 4 environments. <br/> <ul>  <li><a href=\"https://www.google.com/intl/en/chrome/browser/\" target=\"_blank\" title=\"Chrome\">Chrome</a></li>  <li><a href=\"http://www.sublimetext.com/\" target=\"_blank\" title=\"Sublime Text Editor\">Sublime Text Editor</a></li>  <li><a href=\"http://www.playframework.org/\" target=\"_blank\" title=\"Play 1.x\">Play 1.x</a></li>  <li><a href=\"http://www.playframework.org/\" target=\"_blank\" title=\"Play 2.x\">Play 2.x</a></li> </ul> Each of which has a nifty way to help you escape HTML.  </p><p> <strong>Chrome</strong> has an extension called <a href=\"https://chrome.google.com/webstore/detail/html-escape-helper/jbecnlhnhpflhdghljloofiahhdidngj\" target=\"_blank\" title=\"HTML Escape Helper\"> HTML Escape Helper</a>. <br/> Once you install it, all you need to do it copy paste HTML into the extension, <br/> and then the helper will automatically escape the HTML and place the output in your clipboard.<br/></p><p> <strong>Sublime Text Editor</strong> has a nice package called <a href=\"https://github.com/colinta/SublimeStringEncode\" title=\"Sublime String Encode\" target=\"_blank\">Sublime String Encode</a>. <br/> This extension adds the command \"StringEncode:HTML Entitize\" that escapes the selected HTML. <br/> To see how you can <a href=\"/2013/01/ste-installing-extensions.html\" title=\"Install Extensions In Sublime Text Editor\">install extensions in your Sublime Text Editor</a> read my post.  </p>  <p> <strong>Play 1.x</strong> offers the function \"raw()\" to escape HTML. <br/> You simply write something like   <pre><br />  ${\"<div>my div</div>\".raw()}<br /> </pre> and you get what you want.  </p><p> Play 2.x is a bit trickier to understand, especially for those coming from play 1.x. <br/> Fortunately, the outcome is similar. <br/> You simply write  <pre><br />  @Html(\"<div>my div</div>\").toString()<br /> </pre> What play 2.x offers that play 1.x does not is the ability to escape tag output.<br/> Perhaps scala templates in play 1.x allowed this as well, I don't know. Anyway, this was not supported in play 1.x default template engine.<br/> Since in play 2.x, tags are just scala functions, you can do just the same  <pre><br />  @views.html.my.template(args).toString()<br /> </pre> And you get pretty much the same result. </p><h1> Troubleshooting </h1>  <p> Sometimes, you get weird indentation in the text area caused by newlines and spaces. <br/> If you see these, you should be aware that like \"pre\" tags, textarea keeps all newlines and spaces. <br/> Usually, you would start a new line after you opened a tag. <br/> The content within a tag is usually indented. <br/> These newlines and spaces are not visible once the HTML is rendered. <br/> However, in \"textarea\" and \"pre\" tags, you should not do so, as the newlines and spaces are kept. <br/></p><p> I sometimes find it most useful to write a small JavaScript function, <br/> using JQuery, to remove leading and trailing spaces from these tags. <br/> This script looks something like this:  <pre>$(\"pre\").each(function(index,item){ try{$(item).html($(item).html().trim())} catch(e){ console.log(e)} });</pre> This at least allows me to create a newline. <br/> Indentation is easily remove using <span class=\"kbd\"> shift + tab </span>  </p>   </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5103002120090794661/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/showing-html-in-textarea.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5103002120090794661"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5103002120090794661"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/showing-html-in-textarea.html",
                        "_title": "Showing HTML in textarea"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6024930852950452194",
                "published": "2013-01-22T09:47:00.000-08:00",
                "updated": "2013-01-22T09:47:00.166-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "sublime"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Installing Extensions - Sublime Text Editor "
                },
                "content": {
                    "_type": "html",
                    "__text": "<div id=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Installing Extensions Sublime Text Editor </h1> <p>  I recommend Sublime Text Editor. <br/>  It has some really nice and strong features, and it has a lot of extensions.<br/>  Extensions in Sublime is called a \"package\" I think... but I will call it \"extension\". <br/>  You'll just need to cope with that.<br/> </p>  I found a lot of extensions useful, but one stood out - <a href=\"http://wbond.net/sublime_packages/package_control\" target=\"_blank\" title=\"Sublime Package Control\">Sublime Package Control</a> <br/>  This extension helps you install more extensions. <br/>  It has a nice integration with github and some more cool features</br> </p> <p>  If you are looking for a command in Sublime, all you have to do it press <span class=\"kbd\">ctrl+shift+p</span>.<br/>  The \"Package Control\" extension adds the command \"Package Control: Install Package\". <br/>  Once you click it, you get a nice menu to all the extensions the Package Control can install for you. <br/> </p> <a href=\"http://2.bp.blogspot.com/-Z6jZBFdtJcY/UO2tIQo1mbI/AAAAAAAAVNs/nJXmygk_SfU/s1600/sublime_commands.png\" imageanchor=\"1\" style=\"\"><img title=\"Sublime Commands Menu\" alt=\"Sublime Commands Menu\" border=\"0\" height=\"155\" width=\"320\" src=\"http://2.bp.blogspot.com/-Z6jZBFdtJcY/UO2tIQo1mbI/AAAAAAAAVNs/nJXmygk_SfU/s320/sublime_commands.png\" /></a> <a href=\"http://1.bp.blogspot.com/-0rdjlFrrSbA/UO2tJCmNVZI/AAAAAAAAVN4/dBidfCNNfDA/s1600/sublime_package_menu.png\" imageanchor=\"1\" style=\"\"><img border=\"0\" height=\"318\" width=\"320\" alt=\"Sublime Package Menu\" title=\"Sublime Package Menu\"  src=\"http://1.bp.blogspot.com/-0rdjlFrrSbA/UO2tJCmNVZI/AAAAAAAAVN4/dBidfCNNfDA/s320/sublime_package_menu.png\" /></a>   </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6024930852950452194/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/ste-installing-extensions.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6024930852950452194"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6024930852950452194"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/ste-installing-extensions.html",
                        "_title": "Installing Extensions - Sublime Text Editor "
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/-Z6jZBFdtJcY/UO2tIQo1mbI/AAAAAAAAVNs/nJXmygk_SfU/s72-c/sublime_commands.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1985952187620330440",
                "published": "2013-01-15T20:08:00.000-08:00",
                "updated": "2013-01-15T20:08:00.138-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Implementing Base Templates In Play 2.0 Without Passing Arguments"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\">I just migrated from Java+Play1.0 to Java+Play2.0 and the templates are the hardest part so far, and the best way I found to implement a base template (for title, head etc..) is by using the Http.Context.  There is a very nice syntax you can achieve with tags. <pre><br />views<br />  |<br />  \\--- tags<br />         |<br />         \\------context<br />                  |<br />                  \\-----get.scala.html<br />                  \\-----set.scala.html<br /></pre>where get.scala.html is : <pre><br />@(key:String)<br />@{play.mvc.Http.Context.current().args.get(key)}<br /></pre>and set.scala.html is: <pre><br />@(key:String,value:AnyRef)<br />@{play.mvc.Http.Context.current().args.put(key,value)}<br /></pre>means you can write the following in any template <pre><br />@import tags._<br />@contest.set(\"myKey\",\"myValue\")<br />@context.get(\"myKey\")<br /></pre>So it is very readable and nice.  This is the way I chose to go. stian - good advice. Proves it is important to scroll down to see all answers. :)  <h1>Passing HTML variables</h1>I haven't figured out yet how to pass Html variables. <pre><br />@(title:String,content:Html)<br /></pre>however, I know how to pass them as block. <pre><br />@(title:String)(content:Html)<br /></pre>so you might want to replace set.scala.html with <pre><br />@(key:String)(value:AnyRef)<br />@{play.mvc.Http.Context.current().args.put(key,value)}<br /></pre>this way you can pass Html blocks like so <pre><br />@context.set(\"head\"){ <br />     <meta description=\"something here\"/> <br />     @callSomeFun(withParameter)<br />}<br /></pre><h1>Side-Effect With My \"Set\" Implementation</h1>A common use-case it template inheritance in Play.  You have a base_template.html and then you have page_template.html that extends base_template.html.  base_template.html might look something like <pre><br /><html> <br />    <head><br />        <title> @context.get(\"title\")</title><br />    </head><br />    <body><br />       @context.get(\"body\")<br />    </body><br /></html><br /></pre>while page template might look something like <pre><br />@context.set(\"body){<br />    some page common context here.. <br />    @context.get(\"body\")<br />}<br />@base_template()<br /></pre>and then you have a page (lets assume login_page.html) that looks like <pre><br />@context.set(\"title\"){login}<br />@context.set(\"body\"){<br />    login stuff..<br />}<br /><br />@page_template()<br /></pre>The important thing to note here is that you set \"body\" twice. Once in \"login_page.html\" and then in \"page_template.html\".  It seems that this triggers a side-effect, as long as you implement set.scala.html like I suggested above. <pre><br />@{play.mvc.Http.Context.current().put(key,value)}<br /></pre>as the page would show \"login stuff...\" twice because put returns the value that pops out the second time we put same key. (see put signature in java docs).  scala provides a better way to modify the map <pre><br />@{play.mvc.Http.Context.current().args(key)=value}<br /></pre>which does not cause this side effect. <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1985952187620330440/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/implementing-base-templates-in-play-20.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1985952187620330440"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1985952187620330440"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/implementing-base-templates-in-play-20.html",
                        "_title": "Implementing Base Templates In Play 2.0 Without Passing Arguments"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2507337647282773438",
                "published": "2013-01-08T12:44:00.000-08:00",
                "updated": "2013-01-08T12:44:00.592-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "eclipse"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Integration Between Maven And Eclipse Sucks"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1>Integration Between Maven And Eclipse Sucks</h1> <div>   <p>   Even though I don't support working from the IDE, I have to give support     to developers that do. <br/>   For example, when I assimilate Maven into the project, I must make sure all     workspaces adjust accordingly. <br/>   Even though Maven has support for \".project\" file auto-generation,     there are still so many problems along the way that I have to sit down with each     and help resolve all the issues. <br/>   In the last project, I assimilated Maven into a GWT project.<br/>   This project has dependencies of GWT module type. <br/>   These dependencies are simple jars, however, GWT compiler needs their sources in order to use them later on. <br/>   All in all I came across 7 different problems. I will show you how I resolved 4 problems<br/>   The other problems are related to GWT not synchronizing with Maven.<br/>   It is important to note, I did not come across any problems while working with Intellij. Intellij's approach is to enable console commands from the IDE, while Eclipse's approach is to hide Maven in the background. This is the main reason why Intellij introduces less problems.    </p>  <p>   Here is a list of all the problems I resolved.    Note that I gathered 2 problems into 1 post.     <ul>    <li> <a href=\"/2012/12/eclipse-ignores-maven-settings.html\" title=\"Maven Ignores My Maven Settings\" rel=\"next\">Maven Ignores My Maven Settings </a></li>    <li> <a href=\"/2013/01/troubleshooting-missing-artifact-in.html\" title=\"Missing Artifacts\">Missing Artifacts ( 2 in the price of 1 )</a></li>    <li> <a href=\"http://stackoverflow.com/questions/10564684/how-to-fix-error-updating-maven-project-unsupported-iclasspathentry-kind-4\" title=\"stack overflow thread about iclasspathentry kind 4\" target=\"_blank\">Maven Update Causes \"Unsupported IClasspathEntry kind=4\"  </a> - A link to stackoverflow. I cannot write something better than the solution they give there.</li>   </ul>   </p>  <h2> Why I Love Intellij </h2>  <p>   Numerous problems like these in Eclipse are the reason why I love Intellij so much. <br/>   It's not that you don't experience problems with Intellij, you do, but it is quite rare. <br/>   Intellij came up with a simple yet powerful solution for the entire Maven integration. <br/>   Intellij presents a simple view for all Maven goals and phases. <br/>   If you want to invoke a plugin, you should do it via the Maven configuration. <br/>   So technically Intellij simply provides a cool GUI for console commands. <br/>   Combined with the \"profiles\" feature in Maven, you can easily run Maven commands specific for development <br/>   Most common use case is the \"skipTests\" flag. <br/>   When you develop, you usually run install without tests for a while, and after a while you can run all the tests. <br/>  </p>  <p>   Intellij's take on Maven aligns to my <a href=\"/2012/12/proper-workspace-1.html\" title=\"Workspace Best Practice Part 1\" target=\"_blank\">Workspace Best Practice</a> paradigm that says you should not do everything     from the IDE as the IDE usually has different configuration than production. <br/>   Sure I invoke the command from Intellij, but in Intellij's case, it executes exactly as it would on the command line, with minimum IDE interference.   </p><p>To be fair, Intellij does not lack problems. <br/>To share a few, it always adds \"resources\" folder to the project's source roots. This is a bit annoying as in some scenarios it requires files at \"resources\" to be compiled. Resources does not contain code, hence it is note logical to mark it as such. <br/>I have a Java project with some groovy resources that contain illegal groovy code. Strange, I admit, but necessary. Every time I modify the Maven dependencies, I start getting compilation errors. I would like to know how to tell Intellij to ignore Groovy files in certain projects.  </p> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2507337647282773438/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/integration-between-maven-and-eclipse.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2507337647282773438"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2507337647282773438"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/integration-between-maven-and-eclipse.html",
                        "_title": "Integration Between Maven And Eclipse Sucks"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8238256122513220387",
                "published": "2013-01-01T02:42:00.000-08:00",
                "updated": "2013-01-08T08:22:31.247-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "eclipse"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Troubleshooting Missing Artifact in Eclipse Maven Repository - "
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Missing Artifact In Maven Eclipse (Juno) </h1>   <div>  <p>   I found 2 reasons that cause this error in Eclipse.<br/>   <ul>    <li> Maven Repository Index Does Not Refresh </li>    <li> Disable Workspace Resolution While Project In Workspace</li>   </ul>   I have a solution for both.<br/>  </p>  <h2> Maven Repository Index Does Not Refresh </h2>  <p>   I don't have a way to reproduce the problem, but the symptoms are quite clear. <br/>   <ul>    <li>Eclipse claim that the artifact is missing, but when you go to your local repository<br/>     you see the JAR is there.</li>    <li>When you open Maven Repository View, and you browse do the artifact it is indeed missing</li>   </ul>   It seems that Maven's view of the repository does not match its real state.    </p>  <h3> The Solution </h3>  <p>   The solution for this is quite simple.     On the repository view ( Window ==> View ==> Other ==> Maven Repository )<br/>   you should focus on the unsynched repository ( mine was the local repository )<br/>   and then right click and choose \"reindex\"<br/>   If reindex is disabled, it means you are not standing on the repository node, but on some other node. <br/>  </p>  <p>   It is unclear to me at all why Eclipse would have a feature for exploring Maven repository. <br/>   If Maven does not have    </p> <a href=\"http://4.bp.blogspot.com/-nD2xn81cO0E/UMxUXbDcNXI/AAAAAAAAVLc/JRj_cSTJfbM/s1600/eclipse_maven_repository.png\" imageanchor=\"1\" style=\"\"><img border=\"0\" height=\"141\" width=\"320\" src=\"http://4.bp.blogspot.com/-nD2xn81cO0E/UMxUXbDcNXI/AAAAAAAAVLc/JRj_cSTJfbM/s320/eclipse_maven_repository.png\" /></a>     <h2> Disable workspace Resolution While Project In Workspace </h2>    <p>   To reproduce this you need to projects : projectA and projectB. <br/>   Both project use Maven. <br/>   projectA should have a dependency on projectB.<br/>   Set up an Eclipse workspace with both projects. <br/>   Right click on projectA and go to \"Maven ==> Disable Workspace Resolution\"<br/>   Clean / Update / Rebuild projects. <br/>   You get a \"Missing Artifact\" error message. <br/>  </p>  <p>   It seems to me that this is a bug in Eclipse's integration with Maven.<br/>   If both projects are open in the workspace, Eclipse forces you to use Integration Resolution.<br/>   To resolve this you must resort to closing the project you are not working on. <br/>  </p> <a href=\"http://4.bp.blogspot.com/--B3p3BBEQEg/UMxV_RVIVmI/AAAAAAAAVLo/QpiqMbhKUOk/s1600/maven_enable_workspace_resolution.png\" imageanchor=\"1\" style=\"\"><img border=\"0\" height=\"290\" width=\"320\" src=\"http://4.bp.blogspot.com/--B3p3BBEQEg/UMxV_RVIVmI/AAAAAAAAVLo/QpiqMbhKUOk/s320/maven_enable_workspace_resolution.png\" /></a>   </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8238256122513220387/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/troubleshooting-missing-artifact-in.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8238256122513220387"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8238256122513220387"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/troubleshooting-missing-artifact-in.html",
                        "_title": "Troubleshooting Missing Artifact in Eclipse Maven Repository - "
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-nD2xn81cO0E/UMxUXbDcNXI/AAAAAAAAVLc/JRj_cSTJfbM/s72-c/eclipse_maven_repository.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2618943174763169910",
                "published": "2012-12-25T00:00:00.000-08:00",
                "updated": "2012-12-25T00:00:10.965-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "eclipse"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Eclipse Ignores Maven Settings"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Eclipse Ignores Maven Settings </h1>   <div>  <p>   I defined a custom local repository for Maven, but eclipse simply ignored it. <br/>   You can define local repository location easily by modifying <code>M2_HOME/conf/settings.xml.</code><br/>   This resulted in a strange behavior. The commands were successful when running from command line    but failed on missing artifacts from Eclipse. <br/>   Eclipse complained about missing artifacts, but when I check, I saw they were there. <br/>  </p>  <p>   Another strange side-effect I noticed was that Eclipse thought my Maven repository was in a different location. <br/>   It seems that eclipse save Maven repository location in a variable called \"M2_REPO\". <br/>   You can see it by going to \"Window ==> Preferences ==> Java ==> Build Path ==> Classpath Variables\".<br/>   The annoying thing is that Maven sets this variable as \"non modifiable\".   </p>  <p>   While I read a lot of threads about this issue, <a href=\"http://www.mkyong.com/maven/how-to-configure-m2_repo-variable-in-eclipse-ide/\" target=\"_blank\" title=\"mkyong suggests to run maven plugin to modify m2_repo\">everyone suggested something crazy like running a Maven plugin that modified M2_REPO variable.</a>   The command looks something like:   <pre>mvn -Declipse.workspace=<path-to-eclipse-workspace> eclipse:add-maven-repo</pre>   You can read all about it in the <a href=\"http://maven.apache.org/guides/mini/guide-ide-eclipse.html\" target=\"_blank\" title=\"Official Maven Eclipse Plugin Site\">official Maven Eclipse plugin site</a>.<br/>   However this will resolve this single problem. <br/>   I wanted a solution that will synchronize Maven with all my changes for Maven settings.    </p>  <h3> The Solution </h3>  <p>   The answer is quite simple. <br/>   It seems that Eclipse comes with an embedded Maven version. <br/>   This is extremely bad. <br/>   You can easily modify this by going to <code>Window ==> Preferences ==> Maven ==> Installtion </code> and     tell Eclipe to not use the embedded version and instead define an external installtion.    </p> <a href=\"http://2.bp.blogspot.com/-ggf38JweP7Y/UMxSo9ugEVI/AAAAAAAAVLM/I4L5cL1-F7Y/s1600/eclipse_maven_settings.png\" imageanchor=\"1\" style=\"\"><img border=\"0\" height=\"311\" width=\"320\" src=\"http://2.bp.blogspot.com/-ggf38JweP7Y/UMxSo9ugEVI/AAAAAAAAVLM/I4L5cL1-F7Y/s320/eclipse_maven_settings.png\" /></a> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2618943174763169910/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/eclipse-ignores-maven-settings.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2618943174763169910"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2618943174763169910"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/eclipse-ignores-maven-settings.html",
                        "_title": "Eclipse Ignores Maven Settings"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/-ggf38JweP7Y/UMxSo9ugEVI/AAAAAAAAVLM/I4L5cL1-F7Y/s72-c/eclipse_maven_settings.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5381189313101053646",
                "published": "2012-12-18T12:52:00.000-08:00",
                "updated": "2013-01-08T09:03:11.114-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play2.0"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Play 2.0 DB migrations shell script"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Play 2.0 DB Migrations Shell Script</h1>   <div>  <p>   I recently joined a Play!Framework 2.X project. <br/>   After 2 years developing with Play!Framework 1.X, it is certainly a big difference. <br/>   One of the things I miss most is the nice <a href=\"http://www.playframework.org/modules/migrate\" title=\"Play!Framework 1.x migrate module\">migrate module</a>.<br/>   2.x has something called evolutions, which might be as powerful, but I really didn't like it<br/>     So I decided to write my own simple migrate module. <br/>   Since I didn't have the motivation to learn how to write a module for Play 2, I decided to implement it with a simple Shell script.    </p>     <h2> Database Migrate Module </h2>    <p>   A Database migration module is something I got familiar with while learning RoR. <br/>   Basically, it has the ability to:     <ul>    <li> Creating your DB schema </li>    <li> * Upgrade your DB schema from version x to version y</li>    <li> Downgrading your DB schema from version y to version x</li>    <li> * It auto detects the current version </li>    <li> It auto detects the latest version </li>    <li> * Manage schema version </li>   </ul>    You usually use the features marked with asterisks. (*). <br/>   You can do well without the rest.<br/>   Detecting the latest version is nice, and even though you don't really need it,<br/>   you can easily support it or something close to it. ( for example, assume you have 100 version upgrade if not told otherwise... ) <br/>  </p>  <h2> My Implementation </h2>    <p>   <pre name=\"code\" class=\"bash\"><br /># get all sysconf variables we have for play<br /><br />. /etc/sysconfig/play_app<br /><br />UPGRADE_TO=$1<br /><br />if [ \"$UPGRADE_TO\" = \"\" ];then<br />        echo \"ERROR : missing argument version\"<br />        echo \"usage db_migrate version\"<br />        exit 1<br />fi<br /><br /># echo \"upgrading to $UPGRADE_TO\"<br /><br />DB_VERSION=`mysql -u $DB_USER -p$DB_PASSWORD $DB -e \"select version from patchlevel\" --skip-column-names --raw `<br />echo \"current DB version is $DB_VERSION\"<br />if [ $DB_VERSION -ge $UPGRADE_TO ]; then<br />        echo \"DB version is bigger. will not run migrate scripts\"<br />        exit 0<br />else<br />        DB_VERSION=` expr $DB_VERSION + 1 `<br />        for i in `seq $DB_VERSION $UPGRADE_TO`<br />        do<br />                CURR_FILE=\"$APP_ROOT/conf/evolutions/default/$i.sql\"<br />                if [ -f $CURR_FILE ]; then<br />                        echo \"          migrating $CURR_FILE\"<br />                        `mysql -u $DB_USER -p$DB_PASSWORD $DB  < $CURR_FILE`<br />                        RETVAL=$?<br />                        if [ \"$RETVAL\" -ge \"0\" ]; then<br />                                echo \"failed migrating $i with error $RETVAL\"<br />                                exit 1<br />                        fi<br />                else<br />                        echo \"missing file $CURR_FILE\"<br />                        exit 1<br />                fi<br />        done<br />fi<br /><br />echo \"done migrating\"<br /><br />   </pre>  </p>  <p>   This script is pretty straight forward. <br/>   The only input is the new version we want to have.<br/>   It reads configuration from <code> /etc/sysconfig/play_app </code> file, <br/>   and uses it to find out the current DB version. <br/>   Then it loops from the current version to the desired version, while running each migration file in between. <br/>   It fails on first failure and exists. <br/>   </p>  <p>   The script assumes naming Play & Evolutions folder structure and filename conventions.<br/>   As I mentioned above, if target DB version is not specified you can easily add support for it. <br/>   While the \"correct\" why to do it is probably sort all the files by name and extract the version part, you can also easily add a small loop that goes over each version and checks if a file exists, thus finding the latest DB schema upgrade. <br/>   I found this is unnecessary for me at the moment.    </p>  <p>     The script also assumes a MYSQL database - easily modified though for your own needs - that has the following table <pre><br />CREATE TABLE `patchlevel` (<br />  `version` bigint(20) NOT NULL DEFAULT '0',<br />  PRIMARY KEY (`version`)<br />)<br /></pre>  </p>  <h2> Evolutions </h2>    <p>   Every DB version control has SQL files that write the upgrade and downgrade. <br/>   Each such file has a name that indicates its correlating DB version. <br/>   For example, Evolutions use numbers to indicate the DB version and a filename with <code> N.sql</code> as pattern where N is the version number.<br/>   Each such file contains both the upgrade and the downgrade code, and Evolutions detect    which is which by commenting \"!- Ups\" before the upgrade code and \"!- Downs \" before the downgrade code.       I decided to keep using the same convention but keep only the upgrade code. <br/>   As I said - you don't usually use the downgrade feature. <br/>  </p>  <h2> Configuration </h2>    <p>   Unlike Evolutions, I don't have the luxury of using existing configuration. <br/>   You will have to add configuration in order to use my script. <br/>   However, every self respecting developer will have additional scripts with     configuration, so it's a reasonable assumption.<br/>  </p>  <p>   UNIX systems have a unique way to specify configurations. <br/>   I will write more about this in a different post but for now, lets say you write a file named play_app placed in /etc/sysconfig<br/>   You need to modify \"play_app\" with the name of your application.<br/>   This file looks something like  <pre><br />DB_USER=my_user<br />DB_PASSWORD=my_password<br />APP_ROOT=/var/play_apps/my_app<br /></pre>   and all the scripts that want to use this configuration simply have to run     <pre> . /etc/sysconfig/play_app </pre>   This is a good method since it is highly reusable. <br/>   You can even use it in system V init files. <br/>   You can also add it to you profile initialization. (.bashrc, .cshrc).<br/>   The first dot in the command above means to run it in the current shell,     this is the trick for keeping the variables declared. Otherwise,     like in block scope, these definition will be lost once play_app script exists.   </p> </div> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5381189313101053646/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/play-20-db-migrations-shell-script.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5381189313101053646"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5381189313101053646"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/play-20-db-migrations-shell-script.html",
                        "_title": "Play 2.0 DB migrations shell script"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3163411211042376379",
                "published": "2012-12-11T07:08:00.000-08:00",
                "updated": "2012-12-11T07:08:00.031-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Workspace Best Practice - Part 2"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div id=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1>Setting a proper development workspace - Part 2 - Solving The Problem </h1> <div>  <p>   In the previous post I talked about <a href=\"/2012/12/proper-workspace-1.html\" rel=\"prev\">how developers get accustom to bad practice</a> <br/>   best workspace habits and the consequences. <br/>   Today, I will talk about ways to improve your workspace and work less <br/>  </p>  <h2> Developers! Know Your Product </h2>    <p>   Developers should know their product. <br/>   A developer usually works on a small component within a big product, <br/>   However, this should not free the developer from knowing other components<br/>   The dependencies between your component and other components is the heart and soul of the product<br/>   Since these dependencies are defined by the build system <br/>   you can say that the build is the heart and soul of the product. <br/>   This tells you what the product can do and what it can not do. <br/>  </p>  <h2> You Cannot Avoid A Build System Anyway </h2>    <p>   The important thing to get from this post is that even if you run the code from the IDE, <br/>   it does not dismiss the need for an external build. <br/>   Eventually, there is a product to sell, this product has a build which includes <br/>   components other than the one you are working on<br/>   If you run the code from the IDE, this means you deliver something other than you are developing. <br/>   Moreover, you develop a build system and you do not reuse it. <br/>   Not reusing, in development world, is bad practice. <br/>   Instead, you can say, you maintain 2 build systems so you double the work <br/>  </p>  <h2> Use A Build Script </h2>    <p>   Having a strong build script has its benefits while it lacks the flaws mentioned before. <br/>   <ul>    <li>Writing an automation for every task becomes easier and accessible for everyone. </li>    <li>Making the build better automatically makes the development environment better<br/>     So you get 2 in the price of 1     </li>    <li>Integrating with a 3rd-party for build automation is a built in feature.</li>    <li>Everyone are looking at the same outcome</li>   </ul>  </p>  <h2> What Is A Build System ? </h2>    <p>   I keep using the term \"build system\", but in fact this term is obscured. <br/>   Every project has to compile, be packaged (jar, zip, war, exe etc..) and placed <br/>   in a known location. <br/>  </p>  <h2> ANT and Maven ? </h2>    <p>   ANT is a script written with XML. <br/>   It runs on Java so it supports all platforms. <br/>   ANT is like a \"batch\" or a \"shell\" cross platform file. <br/>   There are many good reasons to use ANT but it is not project oriented. <br/>   You can use it to create build system just like you can use batch or shell files.<br/>   Writing ANT for an entire build is cumbersome. <br/>   If you want to use ANT, use it for small tasks that don't apply directly to a project. <br/><br/>    Maven is a project oriented build system. It also uses XML<br/>   Since Maven is project oriented, it has built-in support for project needs<br/>   Maven defines the terms life-cycle and phases.<br/>   A Maven phase is one of the required automated tasks for a build: compile, package, install, etc.. <br/>   A life-cycle is a collection of phases that run one after the other. <br/>   For example, a typical life-cycle can have the following phases:     <ul>    <li> Compile </li>    <li> Package </li>    <li> Install </li>   </ul>   A life-cycle saves you the need to declare that compile comes before packaging. <br/>   So if you tell Maven to package the project, it know it has to compile it first. <br/>  </p>  <p>   I personally love Maven. It is very flexible and you can a lot with it.<br/>   I also love it because it uses Java which I already know well. <br/>   However, Maven got a lot of criticism around it being to verbose. <br/>   This is of course due to the XML syntax it uses. <br/>   However, Java gets the same criticism, and I don't see it going anywhere anytime soon... <br/>      </p>  <p>   Maven like systems that use shorter syntax are now available. <br/>   From SBT and Gradle and what not.. <br/>   I don't recommend any of those. <br/>  </p>  <h2> Don't Use Just One Technology! </h2>    <p>   Even if you have an automatic build system that is flexible and all that, <br/>   don't make the mistake of being satisfied with it. <br/>   Most developers forget they are working on a computer and they start <br/>   doing a lot of stuff manually.. weird! <br/>   I strongly recommend you have a collection of small scripts available<br/>   Open a \"utils\" folder under your project and write several scripts there to help you out. <br/>   In order to let everyone enjoy your scripts, you should follow these rules:     <ul>    <li> Write them in a language that support all platforms. <br/>     I personally like Python for these things, but there are many options out there today<br/>    </li>    <li> Use relative paths or Environment variable as much as possible. </li>    <li> Maintain a common properties file for all scripts.        You can try to reuse one but usually there's no need.      </li>    <li> Always maintain a documented usage example or well prompted console </li>   </ul>  </p>  <p>   Here are a few examples of scripts I used in my environments    <ul>    <li> Clone database scheme from staging </li>    <li> Copy only a certain set of resources - for example only JavaScript files under tomcat</li>    <li> Fetch data from staging locally using winscp. </li>    <li> Update resources from remote sources. <br/>      Some resources from 3rd parties you don't want to blindly update. <br/>      You might want to test them first.      </li>   </ul>   These scripts are a great documentation for steps you take every day. <br/>   They are also great for knowledge transfer when needed. <br/>  </p> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3163411211042376379/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/proper-workspace-2.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3163411211042376379"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3163411211042376379"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/proper-workspace-2.html",
                        "_title": "Workspace Best Practice - Part 2"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4074457118579256067",
                "published": "2012-12-04T06:52:00.000-08:00",
                "updated": "2012-12-04T06:52:00.159-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Workspace Bad Practive"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div id=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1>Setting a proper development workspace - Part 1 - Bad Practice </h1> <div>  <p>   This is the 7th time I joined a project. <br/>   Every time it is the same thing. <br/>   A crappy workspace that people are too used to it they lack the motivation to change it. <br/>   My first goal in every project I joined was to improve the workspace.<br/>  </p>  <p>   IDEs are great, but it seems that people don't use them properly and it frustrates me.<br/>   First of all, no one ever shows you how to use the IDE properly. <br/>   When you do a degree, you are simply told which project to create, and how to compile/run <br/>   So most developers don't know how to import project from existing sources (ridiculous, right?)<br/>   This causes 2 major errors in almost every developer's workspace:    <ul>    <li> Commit the IDE files to your source control </li>    <li> Compile, build and run the project from your IDE </li>   </ul>  </p>  <h2> Bad Workspace Consequences </h2>    <p>   Obviously, if all 7 projects I joined so far had these bad habits in common <br/>   there are probably some good reasons to behave this way. <br/>   I can't think of one though.. All these projects suffered from severe <br/>   performance issues.     <ul>    <li> The developers could not complete simple tasks in reasonable time </li>    <li> Developers usually don't have tests, or don't run them because they don't know how to <br/>      Even though I think that running from the IDE is bad, I expect those who use this feature       to run tests from the IDE, but developers never take the time to learn how to. <br/>      Tests in general don't get enough appreciation, which is sad and too time consuming. <br/>    </li>    <li> The entire workspace is committed to the source repository because <br/>      developers lack the capability to recreate it. <br/>         This includes binary resources that there is no reason to have in the \"source control\"<br/>      The source repository is too heavy, checking out the source takes forever. <br/>         This in turn causes developers to check-out only a part of the code. <br/>         Checking out part of the code is like reading only chosen chapter from a book. <br/>         Either divide the book to smaller books or read the entire thing. <br/>     </li>   </ul>  </p>  <h2> Working from the IDE is BAD!</h2>  <p>   Working from inside the IDE has a lot of flaws. <br/>   <ul>     <li>You soon find yourself needing the IDE to do everything, even the simplest task </li>     <li>Building the project suddenly becomes complicated. </li>     <li>Dependencies are obscured and mistakes are bound to happen. <br/>      This actually happened in this project 2 weeks after I joined.</li>     <li>There are unavoidable overheads made for simple actions.</li>     <li>Running from the IDE is always slower and resource consumption can be a drag.<br/>      For example : running a failed ANT task from Intellij freezes the entire computer. <br/>      (At least it did so in older versions)      </li>     <li>      Most importantly, you force everyone to use the same IDE. <br/>      The sad thing is you do it because you are helpless rather than a preference.<br/>      Forcing a developer to use a specific IDE has devastating consequences in performance.<br/>      There is not a single IDE suitable for all tasks. IDEs develop slower than they should <br/>      While Eclipse might have faster integrations with new technologies, it usually lacks<br/>        important features other (non free) IDEs have later<br/>     </li>    </ul>  </p><p>   Read my next post about <a rel=\"next\" href=\"/2012/12/proper-workspace-2.html\">how to solve this workspace problem</a></p> </div> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4074457118579256067/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/proper-workspace-1.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4074457118579256067"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4074457118579256067"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/12/proper-workspace-1.html",
                        "_title": "Workspace Bad Practive"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-744345181543169386",
                "published": "2012-11-21T09:07:00.001-08:00",
                "updated": "2013-01-08T08:59:49.639-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "About Running Maven Plugins and Running Maven Jetty Plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> About Running Maven Plugins and Running Maven Jetty Plugin </h1>   <p>  When I followed tutorials and guides for using <a href=\"http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin\" target=\"_blank\"> Maven Jetty Plugin</a><br/>  I kept seeing the same instructions saying:     <pre><br />mvn jetty:run<br />  </pre>   But when I tried it, I kept getting failures. <br/>  So I investigated and here is what I found. <br/> </p>  <h3> Executing A Maven Plugin </h3> <p>  When you run a Maven plugin you may use the following pattern   <pre><br />mvn groupId:artifactId:version:goal<br />  </pre>   However, this is quite long and exhausting. So Maven came up with a method to shorten the command. <br/>  As an example, we will have a look at the Jetty Maven Plugin. <br/>  The full command for running it with version: 7.2.0.v20101020 is:    <pre><br />mvn org.mortbay.jetty:jetty-maven-plugin:7.2.0.v20101020:run<br />  </pre>    </p>  <h3> Plugin Groups</h3>   <p>  The Plugin Groups is a settings configuration. <br/>  Without this, you won't be able to shorten the command. <br/>   If you go to your settings.xml file (under <code>%M2_HOME%/conf</code>)<br/>  search for pluginGroups section and you can specify a pluginGroup by adding:    <pre><br /><pluginGroup>org.mortbay.jetty</pluginGroup><br />  </pre>    You might think that by adding this line, you can simply get rid of the groupId section in the plugin execution. <br/>   Apparently, you cannot. <br/>   First of all - if you want to specify the version, you must specify the groupId as well. <br/>   If you do not specify the groupId, you must not specify the version.<br/>   You can control the version by specifying details in the POM like so:     <pre><br /><build><br />    <plugins><br />        <plugin><br />            <groupId>org.mortbay.jetty</groupId><br />            <artifactId>jetty-maven-plugin</artifactId><br />            <version>7.2.0.v20101020}</version><br />        </plugin><br />    </plugins><br /></build><br />   </pre>   <br/>   If the plugin's artifaceId has one of the following patterns:     <ul>    <li>maven-${prefix}-plugin - for plugins from the Apache Maven project</li>    <li>${prefix}-maven-plugin - for plugins from other sources</li>   </ul>    you cannot specify the entire artifaceId. <br/>   Instead you need to specify only the \"prefix\" part. <br/>    Since the Jetty Maven Plugin suites the second pattern, we need to replace the artifactId with simply \"jetty\". <br/>   Once you remove the groupId, version and switch artifactId to \"jetty\" you get the famous command:     <pre><br />Mvn jetty:run<br />   </pre>    The pluginGroups section support the following values by default:    <ul>    <li>org.apache.maven.plugins</li>    <li>org.codehaus.mojo</li>   </ul>   so if you set your groupId to once of these, you won't need to modify the settings.  </p> <h3> Feature Or Bug? </h3> <p>  Seems to me that the expected behavior would be :    <ul>   <li>If you define a pluginGroup - you can just neglect the groupId but still specify the version</li>   <li>If you specify the groupId, but not the version, it should use the defined version in the POM. (it does not, it takes the latest)</li>   <li>The artifactId patterns should be optional always! - They are not. Once you define pluginGroup you cannot specify the full artifactId</li>  </ul> </p> <h3> References </h3> <p>  <ul>   <il><a href=\"http://maven.apache.org/guides/introduction/introduction-to-plugin-prefix-mapping.html\" target=\"_blank\">Plugin Prefix Resolution</a> - This document does not make it clear that pluginGroup is required.</il>  </ul> </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/744345181543169386/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/about-running-maven-plugins-and-running.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/744345181543169386"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/744345181543169386"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/about-running-maven-plugins-and-running.html",
                        "_title": "About Running Maven Plugins and Running Maven Jetty Plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5748195329294592890",
                "published": "2012-11-20T07:52:00.000-08:00",
                "updated": "2013-01-09T09:50:53.629-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "sublime"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Open Files From Console With Sublime"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" class=\"mograblog\" style=\"text-align: left;\" trbidi=\"on\">  <h1> Introduction </h1>   <p>  <a href=\"http://www.sublimetext.com/\" target=\"_blank\">Sublime Text Editor</a> is a great new text editor. <br/>  Its motto is \"The Text Editor You'll Fall In Love With\" and indeed I did. <br/>  I have been a notepad++ user for a long time, but I think I will make the switch. <br/>  I find it so useful, I am even writing this very post in sublime. <br/>  Later I will copy-paste the content to Blogger. <br/>  Wouldn't it be great to have <a href=\"http://sublimetext.info/docs/en/extensibility/plugins.html\" target=\"_blank\">an add-on to sublime</a> though that would work with Blogger?   </p> <p>  One thing I think you have to know before starting to use Sublime is the shortcut <kbd>CTRL+SHIFT+P</kbd>    which simply opens the command palette. <br/>  When you start off you get a nice set of commands in the palette <br/>  However, I could not find a command to install more plugins<br/>  For that, I had to    <a href=\"http://wbond.net/sublime_packages/package_control/installation\" target=\"_blank\">install Package Control</a> first. <br/>  After that, it is a piece of cake. I has a nice integration with <a href=\"https://github.com/\" target=\"_blank\">Github</a> too.<br/>  By the way - spell check is not in the command palette. To toggle spell check you need to press <kbd>F6</kbd>.<br/> </p> <p>  One last thing I had to do was to make Sublime available from command line. <br/>  I just could not do without the option to type   <pre>sublime guy.txt</pre>  and get the Sublime open with this file. <br/>  Since I work in Windows, it was not as easy as one might think. <br/>  I added the \"Sublime Text Editor\" to my Path system variable. <br/>  But the command said \"sublime_text\" and I just couldn't bring myself to write this every time. <br/>  I activated the console as Administrator. <br/>  I went to the Sublime installation folder and wrote   <pre><br />   echo sublime_text %* > s.bat<br />  </pre>  This allowed me to write    <pre><br />   s guy.txt<br />  </pre>  </p> <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5748195329294592890/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/open-files-from-console-with-sublime.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5748195329294592890"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5748195329294592890"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/open-files-from-console-with-sublime.html",
                        "_title": "Open Files From Console With Sublime"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8630085625250220431",
                "published": "2012-11-13T13:23:00.000-08:00",
                "updated": "2012-12-08T13:28:11.569-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "mysql"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Mysql lower case on windows! Annoying!!!!"
                },
                "content": {
                    "_type": "html",
                    "__text": "<style>pre{ background: #CECECE; padding:20px; border-radius:10px; } code {background: black; color:white;} </style> <br/><br/>try running the following query on a MYSQL instance running on windows <br /><br /><br /><pre><somehtml></somehtml>CREATE TABLE `GUY` (<br /><br />  `id` bigint(20) NOT NULL AUTO_INCREMENT,<br /><br />  PRIMARY KEY (`id`)<br /><br />) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;<br /><br /></pre><br /><br />You get a table named \"guy\" (lower case) instead of \"GUY\". (upper case)<br/>As it turns out, mysql in windows in case insensitive as opposed to Unix. <br/><br /><br />You might resort to changing the schema or adjusting your code, but it seems there is a solution to the problem.  <br />After reading <a href=\"http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html\">MySql documentation</a>, I found the following<br /><pre>How table and database names are stored on disk and used in MySQL is affected by the lower_case_table_names system variable, which you can set when starting mysqld. lower_case_table_names can take the values shown in the following table. On Unix, the default value of lower_case_table_names is 0. On Windows the default value is 1. On Mac OS X, the default value is 2.<br /></pre><br />And below that is a table that elaborates on each value. <br /><br/>They don't recommend using \"0\" value for windows, if you are using MyISAM engine, however I always use InnoDB, so in my case I simply set that parameter to 0. <br /><br /><h1>How to set lower_case_table_names in Windows </h1><br />Since I am using a service to run mysql,  I had to figure out how to modify the properties for the service. <br/>When I tried right clicking \"properties\" and add \"start parameters\" I discovered those parameters are deleted every time, which meant I had to reenter them manually. <br /><br />You can achieve the same by changing the file \"my.ini\" found by default at <code> c:\\Program Files\\Mysql\\Mysql-version\\my.ini </code> <br /><br />This file needs Administration permissions to edit it ==> So you might want to start notepad++ as admin (right click , run as admin) and then open the file from within notepad++.<br /><br />simply add the line <br /><pre>lower-case-table-names=0<br /></pre><br /><br />Now restart the service and rerun the query. Make sure the table name is \"GUY\" and not \"guy\". <br /><br /><h1>Deprecation ALERT!!! </h1><br />If it doesn't work for you, try to replace lower-case-table-names=0 with <br /><pre>--character-set-server=0<br /></pre><br /><h1>References </h1><br /><li><a href=\"http://dev.mysql.com/doc/refman/5.0/en/identifier-case-sensitivity.html\">Mysql Documentation</a></li>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8630085625250220431/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/mysql-lower-case-on-windows-annoying.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8630085625250220431"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8630085625250220431"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/mysql-lower-case-on-windows-annoying.html",
                        "_title": "Mysql lower case on windows! Annoying!!!!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1842817895955041139",
                "published": "2012-11-08T07:56:00.000-08:00",
                "updated": "2012-11-08T07:56:11.956-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Adding a page turn CSS3 3D effect to your blog"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> Reference </h1>   <ul><li><a href=\"https://github.com/blasten/turn.js\">JQuery Plugin</a></li><li><a href=\"http://www.netmagazine.com/tutorials/create-page-turn-effect\">Another example</a><li><a href=\"http://www.romancortes.com/blog/pure-css3-page-flip-effect/\">One Page Turn Only With CSS3!</a><li><a href=\"http://tympanus.net/codrops/2012/05/07/experimental-page-layout-inspired-by-flipboard/\">Experimental Page Layout Inspired By Flipboard</a></li><li><a href=\"http://www.codingjack.com/playground/swipe/\">Touch Swipe</a></li><li><a href=\"http://persistent.info/webkit/flipboard/flipboard.html#creases\">Flipboard with css3</a></li></ul> <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/adding-page-turn-css3-3d-effect-to-your.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1842817895955041139"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1842817895955041139"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3933178584185576973",
                "published": "2012-11-06T13:49:00.003-08:00",
                "updated": "2012-11-06T13:49:58.369-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Creating Archetype and Lifecycle Maven Plugins - Part 1"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">This is a 3 piece post in which we will create a Maven plugin, define a new packaging for Maven and add an archetype to this new packaging and make this archetype appear in the archetype catalog.  <br /> <h1> References </h1>  <ul><li><a href=\"https://community.jboss.org/wiki/CreatingACustomLifecycleInMaven\">Custom Lifecycle</a></li><li><a href=\"http://maven.apache.org/guides/mini/guide-creating-archetypes.html\">Custom Archetype</a></li><li><a href=\"http://maven.apache.org/archetype/maven-archetype-plugin/specification/archetype-catalog.html\"> Archetype Catalog </a></li></ul> </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/creating-archetype-and-lifecycle-maven.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3933178584185576973"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3933178584185576973"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3934352258844967721",
                "published": "2012-11-06T13:35:00.000-08:00",
                "updated": "2012-11-06T13:35:50.706-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Performing \"sort\" easily and safely in Java"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><pre><code>  <br /><br /><br /><br />import java.util.Comparator;<br /><br />import org.apache.commons.collections.comparators.NullComparator;<br /><br /><br />public class SiteItemComparators<br />{<br /> private static NullComparator nullComparator = new NullComparator( new NonNullStringComparator() );<br /><br /> public static class ByAccount implements Comparator<ApiResultListSites.SiteItem><br /> {<br />  public static ByAccount instance = new ByAccount();<br />  @Override<br />  public int compare( ApiResultListSites.SiteItem siteItem, ApiResultListSites.SiteItem siteItem1 )<br />  {<br />   return nullComparator.compare( siteItem.account_id, siteItem1.account_id );<br />  }<br /> }<br /><br /><br /> public static class ByDisplayName implements Comparator<ApiResultListSites.SiteItem><br /> {<br />  public static ByDisplayName instance = new ByDisplayName();<br />  @Override<br />  public int compare( ApiResultListSites.SiteItem siteItem, ApiResultListSites.SiteItem siteItem1 )<br />  {<br />   return nullComparator.compare( siteItem.display_name, siteItem1.display_name );<br />  }<br /> }<br /><br /> public static class NonNullStringComparator implements Comparator<String><br /> {<br />  @Override<br />  public int compare( String s, String s1 )<br />  {<br />   return s.compareToIgnoreCase( s1 );<br />  }<br /> }<br />}<br /><br /><br /><br /></code></pre> <h1> The importance of the natural order (asc) </h1> We can use   * This allows us to use Collections.min and Collections.max <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/performing-sort-easily-and-safely-in.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3934352258844967721"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3934352258844967721"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7118493132829846757",
                "published": "2012-11-06T13:06:00.000-08:00",
                "updated": "2012-12-08T13:28:54.594-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "html"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Some HTML tags I've never heard about before"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><br /></div>  http://www.w3schools.com/tags/tag_phrase_elements.asp"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/some-html-tags-ive-never-heard-about.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7118493132829846757"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7118493132829846757"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2797107704813491179",
                "published": "2012-11-06T13:05:00.003-08:00",
                "updated": "2012-12-08T13:28:26.074-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "hibernate"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "How to export DB Schema in Play! 1.2.1"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> So I am writing an application in Play 1.2.1<br/>And I want to use the cool <a href=\"http://www.playframework.org/modules/migrate\" rel=\"external\">migrate module</a>. This means I need to start writing SQL now. <br/>And I am bad at it.. Sometimes I forget to put \"OneToOne\" and it takes me a while to see it<br/>I found it useful to tell hibernate to export the DB scheme, thus quickly finding out the problems. <br/> For this post I created the following models <pre name=\"code\" class=\"java\"><br />package models;<br />import javax.persistence.Entity;<br />import play.db.jpa.Model;<br />@Entity<br />public class Account extends Model{<br />}<br /><br />package models;<br />import javax.persistence.Entity;<br />import play.db.jpa.Model;<br />@Entity<br />public class User extends Model{<br />    public String username;<br />    public String passowrd;<br />    public Account account;<br />}<br /></pre> And I replaced the Application.index action with the following code <pre name=\"code\" class=\"java\"><br />public static void index() throws IOException {<br />        Ejb3Configuration cfg = new Ejb3Configuration();<br />        cfg.setProperty( \"hibernate.dialect\", MySQLDialect.class.getCanonicalName());<br />        cfg.addAnnotatedClass( User.class );<br />        cfg.addAnnotatedClass( Account.class );<br />        SchemaExport export = new SchemaExport( cfg.getHibernateConfiguration() );<br /><br />        File file = new File(\"tmp.sql\");<br />        export.setOutputFile( file.getAbsolutePath() );<br />        export.setFormat( true );<br />        export.setDelimiter( \";\" );<br />        export.create( false, false );<br /><br />        if ( !CollectionUtils.isEmpty( export.getExceptions() ) )<br />        {<br />            StringWriter writer = new StringWriter(  );<br />            for ( Throwable t : (List<Throwable>) export.getExceptions() ) {<br />                t.printStackTrace( new PrintWriter( writer ) );<br />                renderText( writer.getBuffer().toString() );<br />            }<br />        }<br />        renderText( FileUtils.readFileToString( file ) );<br />    }<br /></pre>  As you can see, I am using the useful <a href=\"http://docs.jboss.org/hibernate/orm/3.5/api/org/hibernate/tool/hbm2ddl/SchemaExport.html\">SchemaExport</a> class provided by hibernate. You should really check this class out as it can also run SQL files.  <br/><br/> Running the above code gives me the following output  <pre class=\"sql\" name=\"code\"><br /><br />    drop table if exists Account;<br /><br />    drop table if exists User;<br /><br />    create table Account (<br />        id bigint not null auto_increment,<br />        primary key (id)<br />    );<br /><br />    create table User (<br />        id bigint not null auto_increment,<br />        account tinyblob,<br />        passowrd varchar(255),<br />        username varchar(255),<br />        primary key (id)<br />    );<br /></pre> Which is exactly what I wanted  <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2797107704813491179/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/how-to-export-db-schema-in-play-121.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2797107704813491179"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2797107704813491179"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/how-to-export-db-schema-in-play-121.html",
                        "_title": "How to export DB Schema in Play! 1.2.1"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6360092125168091625",
                "published": "2012-09-19T13:54:00.001-07:00",
                "updated": "2012-09-19T14:23:12.775-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Blog layout | Creating a nice background image with Paint.net"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h3> The important background </h3>   <p>In the continuous battle to keep users in your site, the blog's layout takes a major part. <br/>  You need to make sure menus are available, appealing and well organized. <br/>You need to have a nice style and layout. <br/>Professionals might prefer taking control on the blog and modifying it so you won't be able to tell whether it is a blogspot site, a wordpress site or whatnot. You'd be surprised how little effort is required to get some results. <br/></p><p>Tying all these things together is the background. Even though it is in the back a background can have a major impact on your site. <br/>A background gives your site a personality. By default, the big sites (such as google, facebook etc.) have a white background, but some give you opportunity to personalize it by adding a background. The background usually comes with a complete palette for widgets.  </p><p>Blogger identified this need as well and the most talked about upgrade Blogger had in the last couple of years was without a doubt the <a href=\"http://bloggerindraft.blogspot.co.il/2010/03/blogger-template-designer.html\">template designer.</a><br/>For me, none of the templates was good enough for Mograblog. I feel that a technical blog should have a more technical Look and Feel, and it should have a better support for reading code. <br/>So while most blogs go for the column based layout, I just felt this was not good enough for Mograblog. And in the spirit of \"making it work\" I decided to generate background of my own.  As a true blogger, I felt the need to document it as well.  </p>   <h3> Steps to create a nice background </h3>Assuming you want an abstract background image to set as background, all you need to do is pick a color (I picked a purple theme), get inspired with <a href=\"https://www.google.co.il/search?q=background+image+abstract+wallpaper&hl=en&safe=active&rlz=1C1CHEU_iwIL492IL492&prmd=imvns&source=lnms&tbm=isch&sa=X&ei=hfFWULDqAqmW0QXUu4DwCg&ved=0CAoQ_AUoAQ&biw=1220&bih=599#q=background+image+abstract+wallpaper&hl=en&safe=active&rlz=1C1CHEU_iwIL492IL492&tbm=isch&prmd=imvns&source=lnt&tbs=ic:specific,isc:purple&sa=X&ei=hvFWUNf2NYy20QWP3oHADA&ved=0CDMQpwU&bav=on.2,or.r_gc.r_pw.r_cp.r_qf.&fp=91ff8b512a0fea72&biw=1220&bih=599\">some nice background images</a> and fire up your paint.net.   <ol><li> Pick 2 colors from your palette and create a nice gradient all over the image  </li><li> Optionally : you can apply an effect right now        <ul>              <li> Polar Inversion : I like to drag the origin far away and use \"Reflect\" method</li>            <li> Tile Reflection </li>            <li> Crystalize : This is what I will use for this example       </ul></li><li> Apply the crystalize effect </li><li> Create a new layer</li><li> Draw a line </li><li> Use <a href=\"http://forums.getpaint.net/index.php?/topic/8375-drop-shadow-and-other-effects-krisvdms-plugin-pack-updated-2010-10-26/\">KrisVDM's Plugin Pack</a>  <li> Create a white shadow. uncheck \"keep original\"</li><li> Apply an effect on the layer with the white shadow. I used \"tiles\"</li></ol><br/><p>And there you go, you have a nice abstract background image you can use for your site.  </p><p>In order to know how to add the background to your site, you should read <a href=\"http://webdesign.about.com/od/css3/f/blfaqbgsize.htm\"> this nice post about stretching background </a><br/>Below you can see an image gallery I made for this post that shows the steps I took to create the background <br/></p> <embed type=\"application/x-shockwave-flash\" src=\"https://picasaweb.google.com/s/c/bin/slideshow.swf\" width=\"400\" height=\"267\" flashvars=\"host=picasaweb.google.com&captions=1&hl=en_US&feat=flashalbum&RGB=0x000000&feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F114132575051963212041%2Falbumid%2F5789079113797177185%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\"></embed>   <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6360092125168091625/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/09/blog-layout-creating-nice-background.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6360092125168091625"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6360092125168091625"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/09/blog-layout-creating-nice-background.html",
                        "_title": "Blog layout | Creating a nice background image with Paint.net"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8284096081917922985",
                "published": "2012-09-19T13:01:00.000-07:00",
                "updated": "2012-09-19T13:01:26.493-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Linking properly in your blog"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><br />  <h3>References</h3><ul>    <li><a href=\"http://www.socialmediaexaminer.com/google-author-tags/\">Authoring</a></li></ul></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/09/linking-properly-in-your-blog.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8284096081917922985"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8284096081917922985"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6871413563568160205",
                "published": "2012-09-08T14:57:00.000-07:00",
                "updated": "2012-09-08T14:57:25.153-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "play!framework - play.exceptions.JavaExecutionException: java.lang.String cannot be cast to java.lang.Long"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> The following play!framework issue came to be thanks to <a href=\"http://www.amir-shachar.com/index.html\">Amir Shachar</a><br/><br/>The exception he got was <br/><br/><pre><br />play.exceptions.JavaExecutionException: java.lang.String cannot be cast to java.lang.Long<br />        at play.mvc.ActionInvoker.invoke(ActionInvoker.java:227)<br />        at Invocation.HTTP Request(Play!)<br />Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Long<br />        at controllers.Application.index(Application.java:16)<br />        at play.mvc.ActionInvoker.invokeWithContinuation(ActionInvoker.java:540)<br />        at play.mvc.ActionInvoker.invoke(ActionInvoker.java:498)<br />        at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:474)<br />        at play.mvc.ActionInvoker.invokeControllerMethod(ActionInvoker.java:469)<br />        at play.mvc.ActionInvoker.invoke(ActionInvoker.java:157)<br />        ... 1 more<br /></pre>  <br/>How weird is that?? Isn't this a compiler issue? How come it happens in runtime? <br/><br/><h1> The solution </h1>  <br/>It took us some 20-30 minutes to track down the problem, however it's quite easy. play instruments your code, and so every time you access a field, it tried to use the getter method instead.  <br/><br/>Now lets imagine the following class:  <pre><br />public class Person {<br /><br />    public long age = 6;<br /><br />    public String getAge(){<br />        return Long.toString( age );<br />    }<br />}<br /></pre><br/><br/>Even though it's a valid object and all looks fine (the compiler doesn't complain), the following code will throw an exception  <br/><br/><pre><br />Person p = new Person();<br />p.age = p.age;<br /></pre><br/><br/>The reason this exception happens is that reading age on p is done by the getter due to play's instrumentation, this causes the argument on the right to return a String (the return type of <code>getAge</code>) <br/><br/>So you take a String and you try to set it into a long type. This causes the exception <code>java.lang.String cannot be cast to java.lang.Long</code> <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6871413563568160205/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/09/playframework-playexceptionsjavaexecuti.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6871413563568160205"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6871413563568160205"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/09/playframework-playexceptionsjavaexecuti.html",
                        "_title": "play!framework - play.exceptions.JavaExecutionException: java.lang.String cannot be cast to java.lang.Long"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3645998171575741609",
                "published": "2012-08-25T04:32:00.000-07:00",
                "updated": "2012-08-25T04:32:48.643-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My First WebSocket on Play!Framework"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <H1> My First WebSocket</H1>    <H2> Troubleshoot</H2>   <h3> 404 </h3>  Make sure you define the route in routes properly. Note that the type of route is case sensitive and you should use capital letters. ( WS instead of ws ).    <h3> Error during WebSocket handshake: 'Sec-WebSocket-Accept' header is missing  </h3>also known as return code 426.   You need to upgrade your play!framework version. I found that the version I need was 1.2.5. All previous versions did not support the websocket at all.    <h3>  has no method 'evalJSON' </h3>had to download jquery-json plugin.   <h3> Uncaught SyntaxError: Unexpected token '  </h3>   Make sure you JSON is valid. The following JSON is invalid :   \"{ 'message' : 'value' }\"   However the following JSON is valid   ' { \"massege\" : \"value\" } '   <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/08/my-first-websocket-on-playframework.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3645998171575741609"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3645998171575741609"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2835161573519725722",
                "published": "2012-08-12T23:16:00.001-07:00",
                "updated": "2012-08-12T23:16:47.012-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Unanswered Question in Stackoverflow - A small story about Blender, Loop Cuts, and Edge loops"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"> <h1> My Unanswered Question in <a href=\"http://stackoverflow.com/\" class=\"mogi-reference\">Stackoverflow</a> </h1> <p>Everyone in the hitech zone know stackoverflow. But a couple of months ago I discovered how much fun it is to be part of the stackoverflow community. I started answering some question, and I have to say it's interesting and fun - a rare combination.  </p><p>Answering a stackoverflow usually requires some code written. Luckily, for HTML/CSS/JS question there is a great tool that enables you to instantaneously write the code and run it with version control. This cool tool is called <a href=\"http://jsfiddle.net/\" class=\"moogi-reference\">JSFiddle</a> - and if you haven't tried it, you should. If possible, you will always find an answer of me in stackoverflow with running code sample. Whether it is JSFiddle, or on my own website, combined with \"download as zip\" I think there's no better way to answer a question.  </p><p>Recently I've tried asking some question as well. I am probably not that good at asking questions as I am answering them because so far no-one answered my questions. On top of that, yesterday <a href=\"http://stackoverflow.com/questions/11914683/blender-definition-of-loop-cut\" class=\"moogi-reference\">one of my question got closed</a> due to being inappropriate for stackoverflow. I even lost some points.  </p><p>However, my question still bothered me, so I kept digging around and asking it around, and I found an answer. Since my question in stackoverflow is closed, I cannot answer it there, so I decided to write the answer here.  </p> <h1> My Blender Question - What is a loop? </h1> <p>Recently, I've enjoyed learning <a class=\"moogi-reference\" href=\"http://www.blender.org\">Blender </a>and <a class=\"moogi-reference\" href=\"http://unity3d.com/\">Unity-3D</a>. I find it is the perfect combination for 3D games - painting in Blender and creating a game in Unity-3D.  As I progress in my Blender studies, I came across the terms \"edge loop\" and \"loop cut\". One day - I tried to make a loop cut and failed and it got me wondering why? Even though the book used these terms, I discovered it had no definition for them.  </p> <p><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-iOma6d8w-2I/UCiSEceQpHI/AAAAAAAAVCs/es7pqxoBKDo/s1600/blender_question.png\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"178\" width=\"320\" src=\"http://4.bp.blogspot.com/-iOma6d8w-2I/UCiSEceQpHI/AAAAAAAAVCs/es7pqxoBKDo/s320/blender_question.png\" /></a></div></p> <p>As you can see, instead of doing a full loop, it chose just a single face. I was eager to find out why. Someone tried to answer this question as follows :  <quote style=\"display:block; padding:20px; font-style:italic\">The loop cut tool, as the name suggests, finds a loop of quads and forms a slicing edge loop that can trace back to the edge from which it has been invoked in such a way that, only opposite edges of the corresponding invoked edge will be affected.  <span title=\"You don't say! So there's a reason why I asked the question\" style=\"font-weight:bold; text-decoration:underline\">In your current case, there seems to be some problem!</span> You should have a loop around the entire beam you have chosen. Just in case, select all vertices of the model and perform a remove double operation and try it. This tools works well as far as I know. </quote> As you can see, this answer was as informative as the book on this specific topic.  </p> <p>So I decided to join the <a href=\"http://blenderartists.org/forum\">Blender Artists Forum</a>, and I found the <a href=\"http://blenderartists.org/forum/showthread.php?93651-Poles-and-Loops\">best article ever about blender loops</a>.  </p> <style>dt { font-weight:bold; text-decoration:underline } dd { padding:20px; } </style><p>In short, in order to understand loops you first need to understand poles. If you have a vertex with 3 or 5 edges connected to it - it is a pole.  <dt>Edge Loop<dt><dd>You select an edge, and all edges connected to it are marked as well - the loop ends in a pole</dd><dt>Face Loop - which defines the loop cut</dt><dd>Straight from the article - Adjacent faces in which the verts in those face are shared by only two faces. Pols and face loops are connected by the fact that you cannot have a loop without poles. The poles define the shape of the loop. ( read the article for more details, and see image below ) </dd></p> <p>I won't go into details here, I recommend you read the article - for those who are interested in this, it is fascinating. The article explains why loops are very important, how to create them and modify them.   </p>  <h1> Some interesting images from the article </h1>   <p>Two types of poles. E pole - has 5 edges connected to it. N pole - has 3 edges connected to it.  </p><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-ITe46w1F1tI/UCiZTiBZqiI/AAAAAAAAVC4/CTxOecvLaog/s1600/poles.jpg\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"318\" width=\"320\" src=\"http://2.bp.blogspot.com/-ITe46w1F1tI/UCiZTiBZqiI/AAAAAAAAVC4/CTxOecvLaog/s320/poles.jpg\" /></a></div>  <p>Loops. All vertices in a loop belong to only 2 faces. The poles define where the loop turns.   </p> <div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-gjXsofOK-5o/UCiaIvAEiRI/AAAAAAAAVDE/hVpQWK-xuWM/s1600/face_loops.jpg\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"298\" width=\"320\" src=\"http://1.bp.blogspot.com/-gjXsofOK-5o/UCiaIvAEiRI/AAAAAAAAVDE/hVpQWK-xuWM/s320/face_loops.jpg\" /></a></div> <h1> A challenge </h1> <p>After you read the article, have a look in the image below and try to explain why the loop cut ends where it ends.  </p> <div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-YQy19Iv-d3w/UCibhMcuIGI/AAAAAAAAVDo/rTRBPaT_r88/s1600/loop_cut_ends_unexpectedly.png\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"124\" width=\"320\" src=\"http://1.bp.blogspot.com/-YQy19Iv-d3w/UCibhMcuIGI/AAAAAAAAVDo/rTRBPaT_r88/s320/loop_cut_ends_unexpectedly.png\" /></a></div>         <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2835161573519725722/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/08/my-unanswered-question-in-stackoverflow.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2835161573519725722"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2835161573519725722"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/08/my-unanswered-question-in-stackoverflow.html",
                        "_title": "My Unanswered Question in Stackoverflow - A small story about Blender, Loop Cuts, and Edge loops"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-iOma6d8w-2I/UCiSEceQpHI/AAAAAAAAVCs/es7pqxoBKDo/s72-c/blender_question.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5810820348372916138",
                "published": "2012-06-23T09:15:00.000-07:00",
                "updated": "2012-06-23T09:15:14.092-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><br /><h1> My PHP Experience So Far </h1>   <h1> PHP Is A Piece Of Cake</h1>    <h1> Helpful Links </h1>   <ul><li><a href=\"http://cakephp.org/\">Cake PHP</a></li><li><a href=\"http://stackoverflow.com/questions/4271591/cakephp-1-3-install-in-subdirectory\">Placing Cake PHP in subdirectory</a></li></ul> </div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5810820348372916138"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5810820348372916138"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6617742361635293265",
                "published": "2012-06-19T15:03:00.001-07:00",
                "updated": "2012-06-19T15:03:41.109-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "overriding widget events in jquery ui"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><br /><style> pre { background-color:#CECECE; padding:20px; }  </style><h1>Meet JQuery UI</h1>   JQuery UI is much more than a UI framework.<br/>It's a widget framework.<br/>It provides a life-cycle with infrastructure to JQuery plugins.<br/>You should really <a href=\"http://wiki.jqueryui.com/w/page/12138135/Widget%20factory\">check their documentation</a>.<br/><br/> <h1>Properly Overriding Events</h1>   I read a lot of documentations about how to write a jquery-ui widget. But none explained how to override an event.   <h2> Scenario </h2>   Imagine you are extending jquery-ui's autocomplete widget. ( a lot of people do ). <br/> But you want to make the \"select\" event more friendly. <br/>the original \"select\" event in autocomplete has a data object which contains item.   <pre><br />{ data : { item : { label : .. , value : ... } }  }<br /></pre> In order to get to the value, you need to do :  <pre>data.item.value</pre><br/><br/>Lets for example assume you want to override the original event and instead dispatch the \"select\" event with \"data.item.value\" instead of \"data\"..  <br/><br/> The solution to the problem is very simple. You need to override the \"_trigger\" method like so :   <pre><br />_trigger: function(type, event, data)<br />          {<br /><br />              if ( type == \"select\")<br />              {<br />                  this.element.val(data.item.label);<br />                  $.Widget.prototype._trigger.apply( this, [\"select\", event,  data.item.value] );<br />                  return false;<br />              }<br />              else<br />              {<br />                   return $.Widget.prototype._trigger.apply( this, arguments );<br />              }<br />          }<br /></pre> <br/>You should note the \"return\" statements for stopping propagation.  <br/>You should also note the elegant delegation to super if event is not \"select\".<br/>In JQuery UI 1.9 you need to use a different method to call super. ( check out the documentation for _super ). <br/>  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6617742361635293265/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/06/overriding-widget-events-in-jquery-ui.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6617742361635293265"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6617742361635293265"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/06/overriding-widget-events-in-jquery-ui.html",
                        "_title": "overriding widget events in jquery ui"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2436568744469649190",
                "published": "2012-06-18T07:01:00.001-07:00",
                "updated": "2012-06-18T07:01:10.633-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Resolving jquery.selectbox's \"menuTransition undefined\" problem"
                },
                "content": {
                    "_type": "html",
                    "__text": "<style>h1, h2, h3 { line-height:40px; }   pre {  background-color:#CECECE;  padding:10px; }  code {  background-color:#CECECE;  } </style> <h1> Resolving jquery.selectbox's  \"Uncaught TypeError: Cannot read property 'menuTransition' of undefined\" error\"</h1>  <h2> Quick Fix</h2>If you don't care about what I have to say, and just want a quick fix, so here is the solution. Just add :   <pre> if ( typeof(settings) == \"undefined\") { return; }</pre>before  <pre> switch (settings.menuTransition ) {</pre>Which appears in 2 functions :  <ul><li> hideMenus</li><li>showMenu</li></ul>Enjoy..   If you are interested in how I resolved it - keep reading.   <h2> Background </h2>   There's <a href=\"https://github.com/claviska/jQuery-SelectBox\" class=\"moogi-reference\">a pretty nifty jquery component</a> written by <a href=\"https://github.com/claviska\" class=\"moogi-reference\">claviska</a> called selectbox.  <br/><br/>This component offers a very good API which provides everything you need to handle a controller.  <br/><br/> <h2> Reproducing the problem </h2>   The problem is <a class=\"moogi-reference\" href=\"https://github.com/claviska/jQuery-SelectBox/issues/17\">a known issue</a> when removing the dom element from the page.   I ran into this problem with ugly ajax HTML overwriting. <br/>Imagine the following   <pre><br />  <div id=\"content\">  </div><br />  <button onclick='$(\"#content\").load(\"/content\")>Load content</button> <br /></pre> where /content contains the following <pre><br /><br /><select id=\"my_select\"> ... </select><br /><br /><script><br />   $(\"#my_select\").selectBox();<br /></script><br /></pre> Pressing the button twice, will cause the select with id =\"my_select\" to be rendered twice. Rendering the select involves event binding and what not. <br/>Since we do not remove the data and bindings properly, we get an error on the second time the HTML loads saying : \"Cannot read property 'menuTransition' of undefined\".  <h2> Others' solution </h2>   Reading the thread linked above, people suggest to manually remove the DOM elements revolving the \"selectBox\" plugin by running the following  <pre> $('select').selectBox('destroy'); </pre>I checked it, and it works - so fill free to use it. <br/> However, what bugged me, and kept me going was claviska's comment, and I quote :  <pre>This is because the settings are stored in the original SELECT element, so when you say $('SELECT').remove() you remove the native control without removing the UI control.<br /><br />This is a tradeoff for using UI controls. jQuery UI's button control is a similar example: you need to use .button('disable') instead of .prop('disabled', true).<br /><br />JavaScript can only be so powerful :P</pre><br/>What claviska means in this example is that JS controls overtake the DOM's behavior as well as the display. While the behavior is JavaScript code, the display is HTML+CSS. <br/><br/>Which is why you cannot rely on DOM API anymore. Things like $(\"selector\").attr(\"disabled\",\"disabled\") - might not work as you expect it because the wrapper implements its own \"disable\" function, while attr turn directly to the DOM element. <br/><br/> However, this does not explain why it does not work. <br/>It simply says that other things are at work here. <br/> You can easily reproduce this by add a UUID on select. <br/> Just open the \"jquery.selectBox.js\" file and in the \"init\" function add <code> $(select).attr(\"uuid\", new Date().getTime());</code> as the first line.   Now, all you need is to debug the lines with <code>switch( settings.menuTransition ) {</code>. Try to reproduce the problem and compare the UUID between JavaScript evaluation and the HTML. <br/><br/> You should see the following : <ul><li> When you first load the content, you get UUID=A - everything works fine</li><li> When you load the content again, there is a select with UUID=B but the \"showMenu\" function is invoked on select with UUID=A. </li></ul>This simply means that the binding to the old select element still exists - but fails.   <h2> My Solution </h2>   The error simply means that \"settings\" does not exist anymore. <br/>This is a simple NPE scenario - however since this is JS and you don't have to declare the variable, you get \"undefined\" instead of \"null\". <br/>Adding a simple check should resolve this error like any other Null Pointer Exception. <br/> I simply added the following line <code>if ( typeof(settings) == \"undefined\") { return; }</code> in every function and it solved the problem. <br/><br/> The trick is that even though the old binding exists, the new one also exists and is triggered as well. But if the first throws an exception, the second will never get invoked. <br/><br/>I created a <a href=\"http://jsfiddle.net/mJKAV/\" class=\"moogi-reference\">JSFiddle to check this behavior. </a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2436568744469649190/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/06/resolving-jqueryselectboxs.html#comment-form",
                        "_title": "2 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2436568744469649190"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2436568744469649190"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/06/resolving-jqueryselectboxs.html",
                        "_title": "Resolving jquery.selectbox's \"menuTransition undefined\" problem"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "2"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2545907548239266530",
                "published": "2012-05-13T04:17:00.001-07:00",
                "updated": "2012-05-13T04:17:09.799-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "\"Catch the Bee\"  - small game in javascript"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><h1> Catch the Bee </h1>   A while back, my team leader told me - \"lets write an <a href=\"http://en.wikipedia.org/wiki/Easter_egg_(media)\">easter egg</a>\".   <br/> This is what we wrote <br/> <pre><br /><br /><br />function startGame()<br />{<br /><br />    function getNewEffectParam(oldParams)<br />    {<br />        var x= ( Math.random() < 0.5 ? 1 : -1 ) * (160);<br />        var y= ( Math.random() < 0.5 ? 1 : -1 ) * (100);<br />        var newTop = oldParams.top + y;<br />        // limit to screen<br />        newTop = Math.min($(window).height() - 100, newTop);<br />        newTop = Math.max(0, newTop);<br /><br />        var newLeft = oldParams.left + x;<br />        newLeft = Math.min($(window).width() - 100, newLeft);<br />        newLeft = Math.max(0, newLeft);<br />        return { left : newLeft, top: newTop };<br />    }<br /><br />    function easingFunction(point, img)<br />    {<br />        return img.offset().left < point.left &&<br />                img.offset().left + img.width() > point.left &&<br />                img.offset().top < point.top &&<br />                img.offset().top + img.height() > point.top<br />    }<br /><br />    var button = $(\".buttonToBee\").css(\"position\",\"absolute\").css(\"z-index\",205);<br />    var blackBackground = $(\"<div></div>\").width($(window).width()).height($(window).height()).css(\"background-color\",\"black\").css(\"z-index\",\"200\").css(\"position\",\"absolute\").css(\"top\",0).css(\"left\",0)<br />    $(\"body\").append(blackBackground);<br />    $(window).resize(function(e){blackBackground.width($(window).width()).height($(window).height())});<br /><br />    var counter = 0;<br />    button.myAnimationDetails = button.offset();<br />    $(\"body\").mousemove(function(event){<br />        counter ++ ;<br />        console.log(counter);<br />        if ( counter % 20 == 0 && counter  < 1400 )<br /><br />        {  button.myAnimationDetails = getNewEffectParam(button.myAnimationDetails);<br />            button.animate(button.myAnimationDetails);<br />        }<br />    });<br /><br />    var clicks = 0;<br />    $(\"body\").click(function(event){<br />        clicks ++;<br />        if (easingFunction({left:event.pageX, top:event.pageY}, button)){ var username = prompt(\"you did it after : \" + clicks + \" clicks. way to go!!!\",\"enter name here\");<br />            try{button.hide(); blackBackground.hide(); $(\"body\").remove(button).remove(blackBackground);}catch(e){}<br /><br />            // send a message to the server.. which in turn will send an email to everyone that someone caught the bee. <br />            $.ajax( {<br />                type: 'POST',<br />                url: \"/send-bee-caught\",<br />                data: {name:username, delay:clicks}<br />            } );<br />        }<br />    })<br />}<br /></pre><br /></div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2545907548239266530"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2545907548239266530"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7682867387576352569",
                "published": "2012-05-09T04:51:00.001-07:00",
                "updated": "2012-05-09T04:51:36.916-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Vimeo API doesn't work? What froogaloop doesn't tell you!"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">So I had to write API calls to a Vimeo embedded video. <br/>And it didn't work!!!! <br/>  I searched and searched. <br/>I even joined the group of people that think <a href=\"http://stackoverflow.com/questions/7438020/unsafe-javascript-attempt-to-access-frame-with-url\">\"Unsafe JavaScript attempt to access frame with URL\"</a> was a problem. <br/><br/>It's not.. <br/>Since it took me a while to find the solution, I decided writing a post about it. <br/>The problem is quite simple. <br/>You just forgot to add the \"api=1\" and \"player_id\" attributes in the iframe url. <br/><br/>Have a closer look in <a href=\"https://github.com/vimeo/player-api\">froogaloops </a>code sample. <br/>Don't get confused with <a href=\"https://github.com/vimeo/froogaloop\">yet another froogaloop project in github</a>. <br/><br/>In the image you can see the missing attributes. <br/><br/><div class=\"separator\" style=\"clear: both; text-align: center;\"><br/><a href=\"http://4.bp.blogspot.com/-R322njEOdEQ/T6pXRzQImVI/AAAAAAAADBs/a4qhUJjEf2o/s1600/vimeo.png\" imageanchor=\"1\" style=\"margin-left:1em; margin-right:1em\"><img border=\"0\" height=\"50\" width=\"320\" src=\"http://4.bp.blogspot.com/-R322njEOdEQ/T6pXRzQImVI/AAAAAAAADBs/a4qhUJjEf2o/s320/vimeo.png\" /></a></div><br/> <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7682867387576352569/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html#comment-form",
                        "_title": "4 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7682867387576352569"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7682867387576352569"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html",
                        "_title": "Vimeo API doesn't work? What froogaloop doesn't tell you!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-R322njEOdEQ/T6pXRzQImVI/AAAAAAAADBs/a4qhUJjEf2o/s72-c/vimeo.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "4"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1463143677192331157",
                "published": "2012-05-09T04:29:00.000-07:00",
                "updated": "2012-05-09T04:29:26.829-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "20K Page Views - update"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">20K Page Views - a small blog growth update</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Thank god keeping a blog is free..&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Since<a href=\"http://blog.mograbi.info/2011/11/2-years-old-with-10k-page-views-about.html\" target=\"_blank\"> last update I had on traffic in my blog</a>&nbsp;I had another 10K page views.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I was sure it was going to take a year, but surprisingly enough, it took \"only\" 6 months.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I've earned 2.5$ so far.. So my suspicions were correct. There's no real money in this for me.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I decided to rename a post I named \"YABB - Yet Another Blogger Bug\", and remove the \"YABB\" part. It seems that YABB is a trademark and I am getting a lot of false statistics.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\">Statistics From Incapsula For Last 30 Days</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">There are some good news though,&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">As you can see from Incapsula Statistics, my humans percentage visiting the site has grown to 20%. Which is twice the amount it was before. As you can also see, Incapsula detected I had 4.4K visits in the last 30 days. ( 13K in last 90 days ).</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">NOTE : they are referring to \"visits\" while blogger refers to \"page views\".. Every visit has multiple page views. &nbsp;&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">While blogger detected only 10K over the last 6 months.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">This phenomena is better explained in the now famous <a href=\"http://www.incapsula.com/the-incapsula-blog/item/225-what-google-doesnt-show-you-31-of-website-traffic-can-harm-your-business\" target=\"_blank\">Incapsula blog post</a></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-44dHtS1-0AI/T6pK_aC66qI/AAAAAAAADBA/4KI60SgDLJU/s1600/20K_incapsula_1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"189\" src=\"http://1.bp.blogspot.com/-44dHtS1-0AI/T6pK_aC66qI/AAAAAAAADBA/4KI60SgDLJU/s320/20K_incapsula_1.png\" width=\"320\" /></a></div><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">However, as long as my visits value is greater than or equals to 1 ( spoken like a true programmer ), I am the happiest blogger in the world.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\">Looking at Google Analytics</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Comparing to google anaytics statistics, I see they report 1000 pages views a month.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Which is closer to blogger's numbers and probably gives an incorrect view just the sam</span><span style=\"font-family: Arial, Helvetica, sans-serif;\">e.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">An interesting fact I see in Google Analytics is that the visits count is really close to pageviews count. ( Which I believe is used to deduce the <a href=\"http://en.wikipedia.org/wiki/Bounce_rate\" target=\"_blank\">bounce rate</a>.. which is really high.. )</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">However, I don't think my blog should have a low bounce rate. There's no continuity in technical posts. Unlike the famous <a href=\"http://railscasts.com/\" target=\"_blank\">Railscasts&nbsp;</a>which does have a story behind it in a way.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">By the way, Google Analytics had a major face-lift and looks much better now.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">A new cool feature was added to show you the flow users had in your site.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I suggest you check it out.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-5MT_NbTfb-Q/T6pODI7pgyI/AAAAAAAADBM/D33TncMRy6A/s1600/google_analytics.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"153\" src=\"http://2.bp.blogspot.com/-5MT_NbTfb-Q/T6pODI7pgyI/AAAAAAAADBM/D33TncMRy6A/s320/google_analytics.png\" width=\"320\" /></a></div><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Growing Tips</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\">Write Content</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">From all the tips I got so far, I must say the about \"getting good content\" was most useful.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">This tip is for those skeptical writers that think there's some kind of trick. Well, apparently the best trick is no trick at all. Simply write good posts.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I can definitely say that the main reason for low traffic in my blog is I simply don't write enough content. &nbsp;I believe it is an average of 10 posts for half a year. Which is really low..&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">People who want to get more out of their blogs should write more content.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\">Design</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Designing your blog is important as well.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I ran into multiple problems with blogger - however I don't think I'll ever use anything else.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Blogger doesn't have a good support for technical writing. When I paste code it will not be escaped correctly and the layout will get messy from time to time.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">You cannot jump between HTML and WYSIWYG because the latter will modify the entire content, adding a lot of ugly spaces and such.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">You would also expect it to have built in support for language highlights. It doesn't.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Manipulating the template is still a pain unless you use something built in. ( which no descent programmer will ).&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">However, I've tried using Joomla and Wordpress, and even though I liked them, it seems like too much an effort to maintain blogs on them.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">So far, blogger made incredible changes in the last year or two. I am sure it will have another one in the next year or two. ( When did they finally upgraded www from draft? I missed that.. )</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">What I want to see in 20K visits from now</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Well, I guess there's no reason to keep updating every 10K page views. &nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">Lets make the next update in 20K page views.&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">I would really love to see blogger developers add a bunch of features.&nbsp;</span><br /><br /><ol style=\"text-align: left;\"><li><span style=\"font-family: Arial, Helvetica, sans-serif;\">Adding JS libraries like jquery with a checkbox.&nbsp;</span></li><li><span style=\"font-family: Arial, Helvetica, sans-serif;\">A way to write & run modifiable code. ( something like <a href=\"http://jsfiddle.net/\" target=\"_blank\">jsfiddle</a> ) - either integrated or replaced</span></li><ol><li><span style=\"font-family: Arial, Helvetica, sans-serif;\">Integration with some source repositories would suffice here. Showing iframes from github and google projects would be nice.&nbsp;</span></li></ol><li><span style=\"font-family: Arial, Helvetica, sans-serif;\">Sort out the \"redirect\" from blogpost to a custom domain.. I mean come on.. this is really annoying.&nbsp;</span></li></ol><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-pdfBEsMBtIs/T6pU_6IkkWI/AAAAAAAADBg/zfe-g7HlV_o/s1600/redirect_in_google.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"110\" src=\"http://3.bp.blogspot.com/-pdfBEsMBtIs/T6pU_6IkkWI/AAAAAAAADBg/zfe-g7HlV_o/s320/redirect_in_google.png\" width=\"320\" /></a></div><div><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span></div><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\">See you in 20K visits from now..&nbsp;</span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1463143677192331157/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/20k-page-views-update.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1463143677192331157"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1463143677192331157"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/20k-page-views-update.html",
                        "_title": "20K Page Views - update"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/-44dHtS1-0AI/T6pK_aC66qI/AAAAAAAADBA/4KI60SgDLJU/s72-c/20K_incapsula_1.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3417592368302805583",
                "published": "2012-04-23T13:29:00.000-07:00",
                "updated": "2012-04-23T13:29:54.009-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "So is @OneToOne  lazy or not??"
                },
                "content": {
                    "_type": "html",
                    "__text": "I use hibernate a lot, but as most programmers I sometimes forget to check what happens under the hood. <br/>Every now and then I run in a strange phenomenon and I have to switch debug prints on<br/> In one of those times, I happen to run into an interesting explanation about <a href=\"https://community.jboss.org/wiki/SomeExplanationsOnLazyLoadingone-to-one\" class=\"mogi-reference\">how @OneToOne works in hibernate. </a><br/>And so, I remembered that @OneToOne is not lazy since it still needs to check NULL on the object. <br/>And so do a lot of developers I've met remember. <br/> But is that so??? <br/> Well the truth of the matter is that it's only half true<br/>    <h1> References</h1> <ul><li><a href=\"https://community.jboss.org/wiki/SomeExplanationsOnLazyLoadingone-to-one\" class=\"mogi-reference\">The famous explanation</a></li><li><a href=\"\"></a></li></ul>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3417592368302805583"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3417592368302805583"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3510930567954156237",
                "published": "2012-04-23T13:25:00.000-07:00",
                "updated": "2012-04-23T13:25:10.512-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "JQuery dialog - setting a close button outside the dialog"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-Y_XstAy6II8/T3rhJ1gRRDI/AAAAAAAADAQ/V3NpevCQLgQ/s1600/dialog_blog.png\" imageanchor=\"1\" style=\"\"><img border=\"0\" height=\"160\" width=\"320\" src=\"http://1.bp.blogspot.com/-Y_XstAy6II8/T3rhJ1gRRDI/AAAAAAAADAQ/V3NpevCQLgQ/s320/dialog_blog.png\" /></a></div>   In this post I will show you how to create a customized close button for your JQuery dialog. <br/>You can see the example running on a <a href=\"http://jsfiddle.net/f6ec5/1/\" class=\"mogi-reference\">Working fiddle</a><br/>I found this task interesting since close buttons which are outside the dialog are quite popular these days<br/>I went for an over-board approach, defining a whole new DIV for the header, and discarding the original dialog header<br/>I like being in control. <br/><br/> The most interesting part is the callback for the \"open\" event. <br/>In the open event callback, I hide the original title bar and bind the new close button to the close action. <br/>This is all done relative to the dialog, so no ID is necessary, and the new title can be quite seamlessly injected into the original dialog<br/>This way you can add a small \"intro\" under the title or add some other crazy stuff<br/> <h1> Code </h1>   <h2> My CSS </h2>  <pre class=\"css\" name=\"code\"><br />#dialog-modal { display:none; }<br />.ui-dialog .ui-dialog-titlebar-close{margin-right:-20px}<br />.dialog-form-close{ <br />    position:absolute;<br />    right:-22px;<br />    background-image: url('http://jsfiddle.net/img/actions.png');<br />    background-position: 8px -168px;<br />    width:23px;<br />    height:20px;<br />    cursor:pointer;<br />    <br />}<br />.ui-dialog{overflow:visible}<br /></pre> <h2> My Javascript </h2><pre class=\"javascript\" name=\"code\"><br />$(function(){<br /><br />    $(\"#guy\").dialog({position:'top'}).dialog('show');<br />    $(\"#guy2\").dialog({position:'bottom',<br />                       title:$(\"#guy2_title\"), <br />                       open: function(event, ui) {<br />                        // Hide close button<br />                        var me = $(this);<br />                        $(this).closest(\"[role=dialog]\").find(\".dialog-form-close\").bind('click',function(){ me.dialog('close')});<br />                        $(this).parent().children().children(\".ui-dialog-titlebar-close\").hide();<br /><br />                        <br />                        $(\"#guy2_title\").closest(\".ui-dialog-titlebar\").addClass(\"dialog-tag-title-none\");<br />                        <br />                    }<br />                      <br />                      <br />                      }).dialog('show');<br />})​<br /></pre> <h2> My HTML </h2>  <pre class=\"html\" name=\"code\"><br /><div id=\"guy\" title=\"this is the dialog title\"><br />    guy<br /></div><br /><div id=\"guy2_title\"><br />    <div class=\"dialog-form-close\"></div><br /><br />    This title is a div<br /></div><br /><br /><div id=\"guy2\" title=\"this is guy2\"><br />    guy2<br /></div><br /></pre> <h1> References </h1>   <ul><li><a href=\"http://jsfiddle.net/f6ec5/1/\" class=\"mogi-reference\">Working fiddle</a></li> </ul><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3510930567954156237/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/04/jquery-dialog-setting-close-button.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3510930567954156237"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3510930567954156237"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/04/jquery-dialog-setting-close-button.html",
                        "_title": "JQuery dialog - setting a close button outside the dialog"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/-Y_XstAy6II8/T3rhJ1gRRDI/AAAAAAAADAQ/V3NpevCQLgQ/s72-c/dialog_blog.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2379877546160574919",
                "published": "2012-02-22T09:31:00.000-08:00",
                "updated": "2012-02-22T09:32:03.102-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "javascript"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "An interesting javascript phenomenon with \"onload\" and ajax"
                },
                "content": {
                    "_type": "html",
                    "__text": "<style>.content {  padding-left:40px; }  pre { background-color:#EFEFEF; padding:20px; } </style> <h1> Symptom </h1>  <div class=\"content\">  Getting <pre style=\"color:red\"><br />\"Uncaught ReferenceError\"<br /></pre>  for a function which is defined on the page </div> <h1> Reproduction </h1>  <div class=\"content\">Create 2 pages.  On first page write the following   <pre><br /><div id=\"result\"><br /></div><br /><br /><script><br />    $(function(){<br />        $(\"#result\").load(\"/Application/guy\")<br />    })<br /></script><br /></pre> And on the other write  <pre><br /><script><br />    $(function(){<br />        guy();<br />     })<br /></script><br /><script><br />     function guy(){ console.log(\"hello world\")}<br /></script><br /></pre> Make all the required wiring so that page1 will load with ajax page2.   </div> <h1> Some comments </h1><div class=\"content\"><ul><li> I successfully reproduced this in Chrome and FF</li><li> This does not happen if you place both function in the same \"script\" section</li><li> Some might say the code is written badly, and I won't argue, but I still think this is a browser bug.</li></ul> </div> <h1> Resolution? </h1>   <div class=\"content\">Simply reorganize the function so it works.  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2379877546160574919/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/02/interesting-javascript-phenomenon-with.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2379877546160574919"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2379877546160574919"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/02/interesting-javascript-phenomenon-with.html",
                        "_title": "An interesting javascript phenomenon with \"onload\" and ajax"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2188628919364093745",
                "published": "2012-02-21T05:06:00.000-08:00",
                "updated": "2012-02-21T05:07:29.190-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "windows"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Disabling Graphics Hot Keys - Screen rotation"
                },
                "content": {
                    "_type": "html",
                    "__text": "<br/> <p>So I finally got a laptop from work. Thank god. Recommended to everyone. I can finally have dinner with my family at normal hours and keep working after everyone are asleep.  </p> <p>And as usual - I had a lot of programs to install, and a lot of customization.  </p><p>One of the items on my todo list is to disable the Graphics Hot Keys. The key combination is <pre>ctrl+alt+arrow</pre> when the arrow can be up/down/left/right - and that decides the orientation of the screen.  </p> <p>As an Intellij user I use this combination a lot to navigate.  <br/>You'd usually right-click on your desktop and click to disable the hot-keys. But it didn't work this time!<br/>The solution was not simple at all! It seems that on my laptop there was an application called \"Lenovo Reading Optimizer\". <br/>The idea was that when you read, you probably want to change the display orientation in your laptop. <br/>I have to say - it is a really good idea and I will probably use it once I get home today - but for now I had to disable the hot-keys. <br/>I uninstalled the \"Reading Optimizer\" and it resolved the issue. <br/></p>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2188628919364093745/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/02/disabling-graphics-hot-keys-screen.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2188628919364093745"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2188628919364093745"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/02/disabling-graphics-hot-keys-screen.html",
                        "_title": "Disabling Graphics Hot Keys - Screen rotation"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7681153398959428571",
                "published": "2012-02-14T06:03:00.000-08:00",
                "updated": "2012-02-21T05:07:37.878-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "intellij"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My list of useful Intellij Live Templates"
                },
                "content": {
                    "_type": "html",
                    "__text": "<br/>I like Intellij's \"live templates\" feature and I try to use it as much as possible. <br/>Here some live templates I just can't do without. <br/><br/><style>   .live_templates dt    {       font-weight:bold;       padding-top:20px;     }       .live_templates dd      {         background-color:#CECECE;         padding:10px;       } </style><div class=\"live_templates\"><dt>cdata</dt><dd><pre><![CDATA[ $TEXT$ ]]> $END$</pre></dd>assign to XML context.  <br/><dt>debugger</dt><dd><pre>debugger; /**nocommit**/ </pre></dd>assign to Javascript. the \"nocommit\" is a precommit hook I have that makes sure it won't be committed.  <br/><dt>logger</dt><dd><pre>private final static Logger logger = logger.getlogget($CLZZ$.class);</pre></dd>CLZZ is an Expression \"className()\" and I skip it if defined. ( This way there's usually nothing to edit ). <br/>Assign it to Java code.  <br/><dt>method</dt><dd><pre>$METHOD$</pre></dd>METHOD is the expression \"methodName()\" and skipped if defined. <br/>Assign it to Java String. It is helpful to add the method name in log prints. <br/><dt>single</dt><dd><pre>$ACCESS$ static final $CLASS$ instance = new $CLASS$();</pre></dd><br/>ACCESS has a default value of 'public', and CLASS is \"className()\". (not skipped if defined). <br/>Assign it to Java code.  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7681153398959428571/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/02/my-list-of-useful-intellij-live.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7681153398959428571"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7681153398959428571"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/02/my-list-of-useful-intellij-live.html",
                        "_title": "My list of useful Intellij Live Templates"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5205722777115377049",
                "published": "2012-01-11T13:56:00.000-08:00",
                "updated": "2012-02-21T05:08:10.700-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "graphics"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "removing backgrounds from images with 2 commands and a freeware"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I had a problem..  I bought an image from <a href=\"http://www.istockphoto.com/\" class=\"mogi-reference\">istackphoto.com</a> and I had to use it. <br/>Seems the image was in <a href=\"http://en.wikipedia.org/wiki/Encapsulated_PostScript\" class=\"mogi-reference\">EPS</a> format and had 17MB !! <br/><br/> So I had an enormous EPS file that I needed to convert to a transparent PNG. <br/>Oh, and I must use freewares. <br/><br/>  GIMP was no help at all. Neither was Inkscape and a bunch of other applications I downloaded. <br/><br/> A strange thing kept appearing - I got the image opened at some point.. but it had a black background instead of white and the colors were weird. <br/>I later discovered this was the \"negation\" of the image - or more correctly, I had to negate the image with white background in order to set the colors right again. <br/><br/> My computer got stuck like a million times due to the size of the file. <br/>I read about 30 blogs/forums and so on until I ran into a nifty tool call <a href=\"http://www.imagemagick.org/script/index.php\" class=\"mogi-reference\">imagemagick</a>. <br/><br/> This tool provides some pretty useful commands you can run on your computer. (supports windows too). <br/>For example <pre> convert guy.png -negate guy.png</pre> which pretty much sorted the colors right away.. :) <br/><br/> In order to remove the background I used the following command  <pre><br />convert guy.eps -resize 256x256 -alpha copy -negate guy.png<br /></pre> The \"negate\" flag came to me after a while. <br/>I had to read a bunch of articles :  <a href=\"http://www.imagemagick.org/Usage/compose/#mask_trans\">mask 1</a><a href=\"http://www.digitalphotoguides.com/remove-photo-background.html\">mask 2</a><a href=\"http://www.imagemagick.org/discourse-server/viewtopic.php?f=10&t=8711\">mask 3</a> Now that's it! I have the image in transparent background. I still have some work to do on it since some places where there should be white, it is now transparent. But that's kids play for me. <br/><br/> I hope I saved you some pretty nasty frustrations.    </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5205722777115377049/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/01/removing-backgrounds-from-images-with-2.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5205722777115377049"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5205722777115377049"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/01/removing-backgrounds-from-images-with-2.html",
                        "_title": "removing backgrounds from images with 2 commands and a freeware"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1730622020925040893",
                "published": "2011-12-04T06:53:00.001-08:00",
                "updated": "2011-12-04T06:56:10.297-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "jVectorMap - fixing bugs and missing countries"
                },
                "content": {
                    "_type": "html",
                    "__text": "<h1> jVectorMap </h1>   I've been playing around with a jQuery plugin named <a href=\"http://jvectormap.owl-hollow.net/\" class=\"mogi-reference\">jVectorMap</a>. <br/>My goal was to have a clickable map where you can click on a country - and that would change its color. <br/>The use is quite simple, you create a div with some id - lets say \"map\" and then invoke the following code <br/><pre name=\"code\" class=\"javascript\"><br />$(function(){<br />    $('#map').vectorMap();<br />});<br /></pre> And you can see the results below.  <div id=\"map1\"></div> <script>$(\"#map1\").vectorMap(); </script>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1730622020925040893"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1730622020925040893"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-600645793317968048",
                "published": "2011-11-30T01:27:00.001-08:00",
                "updated": "2011-11-30T01:43:23.439-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "How to make yourself WIKI_ADMIN in TRAC"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">  Assuming that TRAC is using sqlite, this operation is quite easy. <br/>You can find out where the database is by going to <i>TRAC_HOME/conf/trac.ini</i><br/>Or simply use \"locate trac.ini\" <br/>Search for a line with \"database = ... \" to find out the location of the database. <br/>Now I had to copy the file to my system with WINSCP in order to peek into the DB. So if you are a windows user, simply <a href=\"http://sourceforge.net/projects/sqlitebrowser/files/latest/download\" class=\"mogi-reference\" target=\"_blank\">download an SQLITE viewer</a>, open the DB with the viewer.  Go to the \"permissions\" table, there you can find your user with the permission. <br/>Now all you have to do is to modify that value to WIKI_ADMIN and copy the file back to where it was<br/>Make sure you backup the original just in case you messed something up. <br/>Also - make sure you change permissions on the modified file. Users should have read + write access to it. <br/> Now go to the wiki again, and you should see \"ADMIN\" tab added for your user.<br/>  <a href=\"http://1.bp.blogspot.com/-b5ZtizNuaTs/TtX6Hbtg00I/AAAAAAAAC-A/4fyxSzuzAOc/s1600/admin_tab_trac.png\" imageanchor=\"1\" style=\"clear:left; margin-right:1em; margin-bottom:1em\"><img border=\"0\" height=\"118\" width=\"281\" src=\"http://1.bp.blogspot.com/-b5ZtizNuaTs/TtX6Hbtg00I/AAAAAAAAC-A/4fyxSzuzAOc/s320/admin_tab_trac.png\" /></a>    <h1> Trouble shooting </h1> If the wiki does not load properly, verify the permissions on the DB file using the \"ll\" command. <br/>The read/write operations should be available to everyone on this file.       </span></div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/600645793317968048"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/600645793317968048"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/-b5ZtizNuaTs/TtX6Hbtg00I/AAAAAAAAC-A/4fyxSzuzAOc/s72-c/admin_tab_trac.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1570771697528264323",
                "published": "2011-11-28T07:21:00.001-08:00",
                "updated": "2011-11-30T12:52:21.123-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "How to write git hooks"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"> You have 2 ways to apply hooks in GIT.  <br /> <ol><li>Shared to all - will be shared and cloned<br/>Git has a repository template. By modifying the templates' hooks you will affect all users using that GIT installation. <br/>You can find the templates folder by going to <i><your GIT installation path>/share/git-core/templates</i></li><li>On specific repository - will not clone<br/>Each repository holds a set of hooks that can be found on <i>.git/hooks</i><br/>This will affect that specific repository as hooks are not cloned.  </li></ol> In this post I will show a simple pattern to create multiple hooks using various languages for GIT. <br/> <h1>How to begin?</h1>  Before you do anything, it is wise that you write and test your hook. <br/> <ul><li> make some \"git-hooks\" folder and run \"git init\". Now go to the \".git/hooks\" folder. </li><li> create the file 'pre-commit' - do not modify the name of the existing one. Best practice says to keep the original as backup. </li><li>In the new file write the following <pre name=\"code\" class=\"bash\"><br />#!/bin/sh<br />SCRIPT=$(dirname $0)<br />echo \"$SCRIPT\"<br />python $SCRIPT/python_hook.py<br />exit 1<br /></pre><br/>This is a script that simply invokes another script in python. <br/>Note that the script has an exit code 1. This is important - this means you won't really commit anything. <br/>If the pre-commit's exit code is different than 0 - git will not commit. Hence you can rerun the hook again and again until you are done <br/></li><li>Add another file named 'python_hook.py'. write some print command in it like  <pre><br />print(\"this is python dude!\")<br /></pre></li><li>Now you need to commit something. Go back to your project and run the following commands <pre><br />echo \"hello\" > world<br />git add world<br />git commit world -m \"my commit msg\" <br /></pre></li></ul>  <h1> Troubleshooting </h1>  <h2> error: cannot spawn .git/hooks/pre-commit: No such file or directory </h2>  You need to add the SHEBANG line on top of the script. something like  <pre><br />#!/bin/sh<br /></pre> <h1> Hooks Parameters </h1> <h1> GIT plus </h1>   I made some hooks to SVN. <br/>I have to say it was much nicer to develop hooks on GIT as SVN lacks the proper environment. <br/>In git you can simply init a new repository and mess around with it. <br/> <h1> Enforcing the hooks </h1>  There is no standard way to enforce hooks.<br/>  However, GIT workflow usually has a \"committer\" role. The committers are responsible for code reviews and quality check of some kind before merging any changes to the original master. <br/>It should suffice that their repositories contain the hooks to maintain a strict commit policy all over the project.<br/>Since it's the contributor responsibility to ensure there are no commit problems (merge/conflicts) etc.. the end result would be quite the same as I got used in SVN.   <h1> References </h1> <ol><li><a class=\"mogi-reference\" href=\"http://stackoverflow.com/questions/5697210/msysgit-error-with-hooks-git-error-cannot-spawn-git-hooks-post-commit-no-su\" target=\"_blank\">solving - error: cannot spawn .git/hooks/pre-commit: No such file or directory</a></li><li><a class=\"mogi-reference\" href=\"http://stackoverflow.com/questions/2293498/git-commit-hooks-global-settings\" target=\"_blank\">templates advised</a></li><li><a class=\"mogi-reference\" href=\"https://github.com/metajack/notify-webhook/blob/master/notify-webhook.py\" target=\"_blank\">Complex python example</a></li><li><a class=\"mogi-reference\" href=\"http://book.git-scm.com/5_git_hooks.html\" target=\"_blank\">Git Book - Git Hooks </a>  </li></ol></span></div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1570771697528264323"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1570771697528264323"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1057154408255220040",
                "published": "2011-11-28T00:22:00.001-08:00",
                "updated": "2013-09-25T01:58:56.075-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My Top 3 annoying bugs in blogger"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"> <div>  <p>   Over the time I wrote about some annoying bugs in blogger.<br />   I have to say, even though there are annoying bugs, I still love this product, and I advice everyone to use it.<br />   Nevertheless, it would be nice to have some issues finally resolved.<br />   Who cares about templates when the simple blogging feature just doesn't work properly?<br />  </p>  <h2>Redirect</h2>  <p>   By the time of writing this, I used a custom domain \"blog.mograbi.info\" after playing around with blogspot at \"<a href=\"http://mograblog.blogspot.com/\">mograblog.blogspot.com</a>\"<br />   Custom domain means that you simply use a different URL to reach to the same page.<br />   The server - which contains EVERYTHING is the same server, but the NAME simply changes.<br />   It is as if I would change my personal name from Guy to Gil.<br />   This doesn't make me a dangerous person with different behavior.<br />   And when people will still call me Guy, I will notify them about the change, but I will also automatically continue the conversation.<br />      <pre><br />\"Say Guy, do you want to see a movie?\"<br /><br />\"It is Gil, and yes.. I heard it was quite good\".<br /><br />   </pre>    However, blogger thinks otherwise.<br />   Using the custom domain will not automatically redirect people to your blog, they will have to actively click \"ok\", but only after they read how dangerous your blog is.<br />  </p>  <div class=\"alert\">      25 SEP 2013<br/>   This still annoys me years later. I just modified my domain from blog.mograbi.info to www.mograblog.com and my site was down for a <strong>day</strong>!. <br/>   Why? Because it took google some time to process it. No way to get around it. Funny how all other DNS servers take 1 hour and google takes a day..   </div>  <div class=\"separator\" style=\"clear: both; text-align: center;\">  <a href=\"http://3.bp.blogspot.com/-CZPNl3g4i6c/TtNJG2Ly8kI/AAAAAAAAC9o/V5f6vxVXp8E/s1600/redirect_page.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"130\" src=\"http://3.bp.blogspot.com/-CZPNl3g4i6c/TtNJG2Ly8kI/AAAAAAAAC9o/V5f6vxVXp8E/s320/redirect_page.png\" width=\"320\" /></a></div>        <div class=\"separator\" style=\"clear: both; text-align: center;\">  <a href=\"http://4.bp.blogspot.com/-YuL8_1gD2QE/TtNJIUyiq0I/AAAAAAAAC9w/CA2rxelB758/s1600/redirect_google_result.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"132\" src=\"http://4.bp.blogspot.com/-YuL8_1gD2QE/TtNJIUyiq0I/AAAAAAAAC9w/CA2rxelB758/s320/redirect_google_result.png\" width=\"320\" /></a></div>  <p>   I don't know what I about you, but for me, if I see such a page, I simply walk away.<br />   And the truth is that my blog IS hosted on blogger, and can be scanned - don't know if it actually is scanned.<br />      Moreover, the correct behavior should be to return a permanent redirect on everything with \"mograblog.blogspot.com\" on it to \"blog.mograbi.info\".<br />   This way it should not appear in the results - and simply vanish as time pass by.<br />     <h2> Linking To A Post</h2>  <p>   This is simply a missing feature.<br />   Every wiki in the world has this feature, but google's blogger does not.<br />      First of all - finding the post, is tiresome.<br />   Adding to that - once I changed my custom domain, I am actually bringing people to a warning page about my blog. how absurd.<br />      The correct way to implement this feature is by giving a UUID to each post and linking to it.<br />   This UUID should appear in \"share this\" widgets, and such a widget should appear in the blogger editor!<br />      Linking to another post is a crucial element in blogging.<br />   Also - UUIDs should be available for every link provided by blogger. The archive, labels and what not.<br />  </p>  <h2>Adding stuff</h2>  <h3>changing the template</h3>  <p>   For those of us who understand, and want to write a professional blog on blogger, it simply seems impossible.<br />   All tutorials of \"how to\" start the same. Open your settings on the template and edit it. Ignore warning etc..<br />      Do you know how many times I crashed things because I forgot some closing tag.<br />   This is simply unsafe and not nice.<br />   Blogger should provide some proper way to add JS functionalities.<br />   It also seems to me blogger should add an easy to use professional blog add-ons that will automatically add JQuery, SyntaxHighlight and more. (see more below about this)   </p>  <h3>Writing Code</h3>  <p>   As a developer I would sometimes want to display some code on his blog.<br />   However, the blogger editor denies that.<br />   Instead you have to switch to HTML and start editing it.<br />   But the HTML created by the \"Compose\" mode is so messy!<br />      So when I write a professional blog I prefer to work on HTML. Kind of missing the \"Compose\" idea.<br />      I think the proper way to handle this, is by mini-customizing the template.<br />   I want to be able to define class names in CSS on the blog, and then adding them on DIVs or SPANs when I compose.<br />      This way I can automatically specify <code>'name=\"code\"'</code> and <code>'class=\"javascript\"</code> and have syntax highlight without hurting my eyes on the horrific HTML produced.<br />  </p>  <h3>Headers</h3>  <p>   Did you notice there's no proper way to define headers in the \"Compose\" mode?<br />   Hack, even the oldest Office version had it.. what's the problem?<br />   I know there's no technical problem as I wrote a WYSIWYG editor myself and it had header support, and it was very easy to add.<br />      The Header tag is crucial in many ways - especially CSS and plugins.<br />   I would really like to add a plugin that automatically adds anchors to my page, but blogger's Compose mode simply denies me of that capability<br />  </p>  <h3> Where are my comments? - added on 25th September 2013</h3>  <p>   Google recently started integrating Google+ and blogger.<br/>   Which is a great thing, this is why I chose blogger to begin with..<br/>   But! all of a sudden, I don't get notified when users write comments. - and yes I've went through the help guides and checked all my settings everywhere... <br/>   No notifications..<br/>   Not to mention that \"if you change the domain, you lose all existing comments\"... !!!! WHAT??!?!?!?!<br/>   And oh - yes, sometimes google+ tell me I cannot reply on a comment.. seems to me google+ is not the correct platform for comments as it does not support all the features. <br/>  </p>    </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1057154408255220040/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/my-top-3-annoying-bugs-in-blogger.html#comment-form",
                        "_title": "2 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1057154408255220040"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1057154408255220040"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/my-top-3-annoying-bugs-in-blogger.html",
                        "_title": "My Top 3 annoying bugs in blogger"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-CZPNl3g4i6c/TtNJG2Ly8kI/AAAAAAAAC9o/V5f6vxVXp8E/s72-c/redirect_page.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "2"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2588220091989421087",
                "published": "2011-11-26T09:40:00.001-08:00",
                "updated": "2011-11-28T00:02:07.909-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "selenium"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "chrome"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Setting up a selenium/chrome project"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span style=\"font-family: Arial, Helvetica, sans-serif;\"> <br /><h1>Setting up a Selenium Chrome Project</h1>  <a href=\"http://seleniumhq.org/\" target=\"_blank\">Selenium </a>is an automation for GUI testing for Web Applications.<br /> Once you run the automation, a browser popup up, and you will see user action happen on its screen such as :<br /><br /><ul style=\"text-align: left;\"><li>Going to a URL</li><li>Clicking buttons</li><li>etc...</li></ul><br /> In order to get it running with Chrome you will need to download chrome driver and selenium. (see link below).<br /> I am using Maven to run Selenium.<br />The basic pom will be :<br /> <br /><pre class=\"xml\" name=\"code\"><project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemalocation=\"http://maven.apache.org/POM/4.0.0<br />                      http://maven.apache.org/xsd/maven-4.0.0.xsd\"><br />  <modelversion>4.0.0<br /><br />    <groupid>com.incapsula</groupid><br />    <artifactid>selenium-automation</artifactid><br />    <version>1.0.0</version><br />    <dependencies><br />         <dependency><br />            <groupid>org.seleniumhq.selenium</groupid><br />            <artifactid>selenium-java</artifactid><br />            <version>2.13.0</version><br />        </dependency><br />    </dependencies><br /></project><br /></pre><br />Next thing, you need to set the location for the chromedriver. (a download for each download is available, so links below).<br />There are several ways to specify the location.<br />If you don't set it, you will get a nice error message to remind you.<br /><br /><br /><pre><br />Exception in thread \"main\" java.lang.IllegalStateException: The path to the chromedriver executable must be set by the webdriver.chrome.driver system property; for more information, see http://code.google.com/p/selenium/wiki/ChromeDriver. The latest version can be downloaded from http://code.google.com/p/chromium/downloads/list<br /> at com.google.common.base.Preconditions.checkState(Preconditions.java:172)<br /> at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:81)<br /> at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:87)<br /> at com.incapsula.selenium.SeleniumMain.main(SeleniumMain.java:19)<br /> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br /> at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)<br /> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)<br /> at java.lang.reflect.Method.invoke(Method.java:597)<br /> at com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)<br /></pre><br/>In my code sample, you will see I set the property in the environment, and then assign it to a property. <Br/>I suggest you place the binaries in \"resources\" folder as accepted in maven project. <br/>This way you will save the time and trouble for other developers to find/download it. <br/>After you take care of that, all you have left is to write your code. <br/>The smallest snippet of code that will allow you to see something looks something like this <br/><br/><pre class=\"java\" name=\"code\"><br />import org.openqa.selenium.WebDriver;<br />import org.openqa.selenium.chrome.ChromeDriver;<br />public class SeleniumMain<br />{<br /><br /> // download driver from : http://code.google.com/p/chromium/downloads/list<br /> // see more on : http://code.google.com/p/selenium/wiki/ChromeDriver<br /> public static void main( String[] args )<br /> {<br />  String webdriver_path = System.getenv( \"webdriver.chrome.driver\" );<br />  System.out.println( \"webdriver_path = \" + webdriver_path );<br /><br />  String property = System.getProperty( \"webdriver.chrome.driver\" );<br />  System.out.println( \"property = \" + property );<br /><br />//  System.setProperty( \"webdriver.chrome.driver\", webdriver_path );<br /><br />  WebDriver driver = new ChromeDriver();<br />  driver.get(\"http://www.google.com\");<br /> }<br />}<br /></pre> <h1> JQuery syntax like selenium code </h1>   I've been working with JQuery for quite a while now, and I find the css selector usage to be very useful. <br/>In order to get something similar working with selenium, you can define some like the following :   <pre name=\"code\" class=\"java\"><br />public WebElement $( String cssSelector )<br />{<br /> return driver.findElement( By.cssSelector( cssSelector ) );<br />}<br /></pre> And then you can invoke code like   <pre name=\"code\" class=\"java\"><br />$(\"input#username\").sendKeys( \"my_username\" );<br />$(\"input#password\").sendKeys( \"my_password\" );<br /></pre> You can also wrap \"WebElement\" to get more JQuery like API ( for example use val() instead of \"sendKeys\" ).    <h1>References</h1><br /><ul style=\"text-align: left;\"><li><a class=\"mogi-reference\" href=\"http://code.google.com/p/chromium/downloads/list\" target=\"_blank\">Download chrome driver page</a></li><li><a class=\"mogi-reference\" href=\"http://seleniumhq.org/download/\" target=\"_blank\">Download Selenium drivers</a></li></ul></span></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2588220091989421087/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/setting-up-seleniumchrome-project.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2588220091989421087"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2588220091989421087"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/setting-up-seleniumchrome-project.html",
                        "_title": "Setting up a selenium/chrome project"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1741713541726429791",
                "published": "2011-11-23T13:56:00.001-08:00",
                "updated": "2011-11-28T00:02:00.801-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "git"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "svn"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Using GIT with SVN - with 3 simple commands"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Why?</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">I've been using SVN for about 2 years now.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">And a couple of days ago, I suffered from a merge going bad, and it took me the entire day to get over it.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Each time I updated my branch from trunk, SVN would mark everything as CONFLICT and I found myself going over each file ( over 100 ) and clicking \"resolved\".</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">I could not tolerate it any more.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">The solution was to merge the folder, but - using tortoise - I told the SVN to record the merge but not perform it. This updated the merged revisions in \"mergeinfo\", and so it didn't find the need to re-merge files as conflict over and over again.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">However, that spawned some other errors.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">So I decided to get my act together, and finally go for something I wanted a long time ago and use GIT.</span><br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-3wyRbHRysxs/Ts1vySkqgYI/AAAAAAAAC9E/6pHxJguDR_o/s1600/record_merge.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"295\" src=\"http://1.bp.blogspot.com/-3wyRbHRysxs/Ts1vySkqgYI/AAAAAAAAC9E/6pHxJguDR_o/s320/record_merge.png\" width=\"320\" /></a></div><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">All you will need to use GIT with SVN - the basics</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">There are some really basic commands you need to work with git and svn&nbsp;</span><br /><br /><ul style=\"text-align: left;\"><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git svn init <i>URL</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">This will initialize a git repository with an SVN as remote repository on the given URL.&nbsp;</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git svn fetch</span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">This will update your working copy from the remote repository</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git checkout -b <i>NEW_BRANCH_NAME</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">This will create a new branch with GIT</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git checkout <i>BRANCH_NAME</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Will switch your working branch</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><i>git branch -a</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Will show you all your branches, marking current with *</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><i>git status</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Good to use when you're not sure what to do next. shows you the status and hints what you should do next.&nbsp;</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><i>git add</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Adds a file to git.</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><i>git commit -m \"some comment\"</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Commits changes</span></li></ul><li><i style=\"font-family: 'Courier New', Courier, monospace;\">git merge BRANCH_NAME</i></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Will merge a branch to current branch</span></li></ul><li><i style=\"font-family: 'Courier New', Courier, monospace;\">&nbsp;git svn rebase</i></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Fetches but also merges changes to working copy</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><i>git svn dcommit</i></span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Pushes changes back to SVN</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git reset --hard HEAD~N</span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">N should be a number</span></li><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Will rollback N revisions. Nice command if you need to undo a merge.&nbsp;</span></li></ul><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git commit --amend</span></li><ul><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Allows you to rewrite the comment.&nbsp;</span></li></ul></ul><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">The 3 magic commands</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">I realize that for SVN world those look like a lot of commands.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">So you can actually use only 3 :&nbsp;</span><br /><br /><ul style=\"text-align: left;\"><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git svn fetch URL</span><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"> - will checkout the copy</span></li><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git svn rebase</span><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"> - performs update.&nbsp;</span></li><li><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git svn dcommit </span><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">- performs commit</span></li></ul><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Once you feel secure with these you can move on to branches.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">It's silly how easy it is to manage branches with GIT. and then you only need to add checkout and merge to the formula.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Git Lost and Founds</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Disappointments and pitfalls</span>&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Whatever you do, don't leave a dirty working copy.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">You might see a nifty trick called \"git stash\". Do not use it!</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">My workspace tends to get messy from time to time as features get backed up with bugs and small questions. I need to switch constantly.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">In SVN I would simply branch on a different location in SVN.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">In GIT, I'd rather use the \"checkout -b\" method which creates local branches.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">However, to my surprise I discovered that the branches may intertwine.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">For example - adding a file to git is beyond branch scope.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">If you switch to another branch, you still have the added file available, and you can accidentally commit it on a different branch.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">So does \"stash\" - you can apply it on a different branch.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Rebasing</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">As you can see, I specified \"rebase\" as if it was a simple command. However, this command should have a book of its own.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">You can find links below especially for that command.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">My rules of thumb (and I might be mistaken) for beginners is :&nbsp;</span><br /><br /><ul style=\"text-align: left;\"><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Always work on a branch</span></li><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Always rebase top-down ( from remote to master to branch )</span></li><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Always merge down-top ( from branch to master to remote )</span></li></ul><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\">Resolving Conflicts</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Either way you choose to work, you will get a conflict here and there.&nbsp;</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">For all those SVN users, you'll be glad to know you can use Meld or TortoiseGIT for that, and get the same experience as you did with SVN.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Link for using Meld can be found on references below.&nbsp;</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-btpwdHhjV_E/Ts40Fb-uzII/AAAAAAAAC9Q/LMMHvdnYkXs/s1600/tortoiseGIT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"180\" src=\"http://3.bp.blogspot.com/-btpwdHhjV_E/Ts40Fb-uzII/AAAAAAAAC9Q/LMMHvdnYkXs/s320/tortoiseGIT.png\" width=\"320\" /></a></div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\"><b>Compare Branches</b></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Another thing I find TortoiseGIT good for is the \"browse references\" which is like \"browse repository\" you have with tortoiseSVN.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">This nifty window will allow you to compare 2 different branches which is good before you merge away..&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-G9qCUZ6ECiA/Ts5FQe5AOOI/AAAAAAAAC9c/DZ7fEjnZgbM/s1600/browseReferences_tortoiseGit.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"180\" src=\"http://3.bp.blogspot.com/-G9qCUZ6ECiA/Ts5FQe5AOOI/AAAAAAAAC9c/DZ7fEjnZgbM/s320/browseReferences_tortoiseGit.png\" width=\"320\" /></a></div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">DCommit</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">The dcommit command I presented before gives GIT a central repository structure. This means that everyone are checking out from a repository and committing their changes to it.&nbsp;</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">The correct term in GIT is \"pushing\" their changes ( instead of committing ) .&nbsp;</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Pushing is meant for remote repositories, while committing is meant for local repositories.&nbsp;</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">For a real distributed workflow with GIT you should switch to a PULL method rather than PUSH.&nbsp;</span></div><div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">But I won't add details about that method here.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">I don't like SVN switch, and GIT checkout -b... what can I do?</span></div><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Working on branches can be confusing.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">It seems that some changes cross branches. For example, if you add a file and then switch branch, the added file will appear in other branches.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Only if you commit the added file will you see the proper behavior.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">So branching might cause problems if you are not careful.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">In SVN I found it best to not use \"switch\" at all. Instead, I made a shelf (which is a branch just for me and my feature) and then reintegrate it.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">The problem with SVN is that you have to make the branch on the remote repository and then checkout. Which makes this entire process tiresome. Not mentioning the \"reintegrate\" that NEVER WORKS!</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">With git - this turns out to be a great way to work.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Once you cloned your project from SVN, you can now clone your project again, but from GIT to GIT and into another folder. For example</span><br /><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><br /></span></div><div style=\"text-align: center;\"><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">git clone c:\\project\\myproject c:\\dev\\myfeature</span></div><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">See the distributed workflow in git book. I promise you won't regret using this workflow. It makes your environment very clean and almost branch free.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Another plus I get using this workflow is with IDEs.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Basically I like to keep a separate window (in intellij) or project (in eclipse) for each version of the project.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Clone allows you to maintain this kind of IDE management while branching/switching does not.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Naming my project according to the purpose of the clone makes the IDE window more readable.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">To make my workspace even cleaner, I make sure to define \"remote repositories\", fetch and diff before I merge.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Since the command line might be messy and unreadable, I use TortoiseGIT.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">This gets me closest to my SVN experience but without all the troubles that made me leave SVN.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Troubleshooting</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: large;\">fatal: write error</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">if you get some \"fatal: write error\", and you are running windows, don't worry. It probably GIT trying to download some big binary file and fails. It usually helps if you close everything and try again. Even try a restart</span><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><span class=\"Apple-style-span\" style=\"font-size: large;\">Modified is shows, but I didn't make any changes</span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">At some point I got a modified files list.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">but I didn't make any changes.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Reading about it I <a href=\"http://stackoverflow.com/questions/2016404/git-status-shows-modifications-git-checkout-file-doesnt-remove-them\" target=\"_blank\">stacktrace thread about crlf</a>&nbsp;saying that git declares possible data corruption with auto-crlf, and switching it off makes everything better.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Use the commnd&nbsp;</span><br /><div style=\"text-align: center;\"></div><pre style=\"background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; font-size: 14px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow-x: auto; overflow-y: auto; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px; text-align: center; vertical-align: baseline; width: auto;\"><code style=\"background-attachment: initial; background-clip: initial; background-color: #eeeeee; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, serif; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px; vertical-align: baseline;\">git config --global core.autocrlf false</code></pre><pre style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow-x: auto; overflow-y: auto; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px; text-align: left; vertical-align: baseline; width: auto;\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">However, This solution will not affect your windows CMD. <br />Sometimes, you will be forced to use your CMD command. <br />For example - when using Disc-On-Key to port your project. <br />For these cases, I found it useful to use Git-Tortoise.&nbsp;</span></pre><pre style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow-x: auto; overflow-y: auto; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px; text-align: left; vertical-align: baseline; width: auto;\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Porting your project between 2 computers that cannot communicate</span></span></pre><pre style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow-x: auto; overflow-y: auto; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px; text-align: left; vertical-align: baseline; width: auto;\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">If you find yourself in such a scenario, use a Disc-On-Key. ( DOK ) <br />Clone your project to the DOK using </span></pre><pre style=\"background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; border-bottom-width: 0px; border-color: initial; border-left-width: 0px; border-right-width: 0px; border-style: initial; border-top-width: 0px; line-height: 18px; margin-bottom: 10px; max-height: 600px; overflow-x: auto; overflow-y: auto; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px; text-align: left; vertical-align: baseline; width: auto;\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">git clone c:\\<i>mypathtotheproject</i> onto your DOK. <br />Then pull/fetch as described in the <a href=\"http://book.git-scm.com/3_distributed_workflows.html\" target=\"_blank\">distribution flow in the git book</a></span></pre><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">IDE</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Working with Intellij, I found no problem finding my way other than adapting some GIT terms - but that is not an Intellij issue.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">The only thing I found lacking was the \"current branch\" title. No-where to be found in Intellij.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">You have to run a VCS command to find which branch you are on right now.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">( shortcut key : [ alt + ` ] = alt with back quote)&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">I was a bit surprised to discover support for github built into Intellij. I should check it out sometime.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Conclusion</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\"><br /></span><br /><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">References</span><br /><ul style=\"text-align: left;\"><li><a class=\"mogi-reference\" href=\"http://book.git-scm.com/index.html\" target=\"_blank\"><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Git Communit Book</span></a></li><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><a class=\"mogi-reference\" href=\"http://code.google.com/p/tortoisegit/\" target=\"_blank\">Tortoise for GIT</a></span></li><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><a href=\"http://andy.delcambre.com/2008/03/04/git-svn-workflow.html\">GIT SVN workflow tutorial</a></span></li><li><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><a class=\"mogi-reference\" href=\"http://eagain.net/articles/git-for-computer-scientists/\">Git for computer scientists</a>&nbsp;- Rebase explained</span></li><li><span class=\" mogi-reference Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><a href=\"http://blog.wuwon.id.au/2010/09/painless-merge-conflict-resolution-in.html\" target=\"_blank\">Working with Meld</a></span></li><li><span class=\"mogi-reference Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><a href=\"http://wiki.mograbi.info/git\" target=\"_blank\">My Wiki Page on GIT</a></span></li></ul></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1741713541726429791/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/using-git-with-svn-with-3-simple.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1741713541726429791"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1741713541726429791"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/using-git-with-svn-with-3-simple.html",
                        "_title": "Using GIT with SVN - with 3 simple commands"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/-3wyRbHRysxs/Ts1vySkqgYI/AAAAAAAAC9E/6pHxJguDR_o/s72-c/record_merge.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4348691183547839805",
                "published": "2011-11-18T02:43:00.001-08:00",
                "updated": "2011-11-18T02:43:42.884-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "gameobjects support for python 3.1"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><br /></div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4348691183547839805"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4348691183547839805"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8585618825380324234",
                "published": "2011-11-17T12:32:00.001-08:00",
                "updated": "2012-02-21T05:08:34.241-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "mysql"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I just resolved some error I've been dealing for quite a while.<br /><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">The Context</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">In the last few days I've been trying to set up my sites on a VPS, hosted on <a href=\"http://a2hosting.com/\">a2hosting.com</a>.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">So far I have to say I am very impressed. But I will write another post for that.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">The OS chosen was CentOS, and so I had to learn how to set things on CentOS.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">It wasn't hard at all. There's a lot of documentation.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">I've set a LAMP bundle called <a href=\"http://bitnami.org/stack/lampstack\" target=\"_blank\">lampstack by bitnami</a>&nbsp;- in which you get mysql ( which is the M in LAMP )</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">Later I installed <a href=\"http://rubyonrails.org/\" target=\"_blank\">RoR environment</a>&nbsp;and with it I guess mysql was installed again.&nbsp;&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">The Problem</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">When I tried to run the rails server, I had problems connecting to mysql.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">I ran the command \"mysql\" to check what is going on, but got the following message&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">After some digging around, I discovered the malformed file was \"/etc/my.cnf\".&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">The Solution</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">At first I tried to modify the file as I saw fit.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">However, the solution is much more simpler than that..&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">All you have to do it copy the file&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">/opt/lampstack-5.3.6-0/mysql/my.cnf</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">to&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\">/etc/my.cnf</span><br /><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">That took care of things.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Times, 'Times New Roman', serif;\">Now, I could connect to mysql properly.&nbsp;</span></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8585618825380324234/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/error-2002-hy000-cant-connect-to-local.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8585618825380324234"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8585618825380324234"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/error-2002-hy000-cant-connect-to-local.html",
                        "_title": "ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4944782153592012345",
                "published": "2011-11-11T20:48:00.001-08:00",
                "updated": "2012-02-21T05:08:53.338-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "2 years old with 10K page views - About traffic statistics"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">So my blog is 2 years old +, and today, I reached my 10K visitor..<br /><br />Like I said <a href=\"http://www.google.com/url?sa=t&rct=j&q=mograblog%201%20year%20old&source=web&cd=8&ved=0CE0QFjAH&url=http%3A%2F%2Fblog.mograbi.info%2F2010%2F10%2Fmograblogs-birthday-about-blog.html&ei=uv-9TrP8L8mKhQfM4KjIBA&usg=AFQjCNFv_A2nCwe0TSAaZp1v12AZBcJaaQ&sig2=qrF7cLMUpxu1y6u5E-pa3w\">last time</a>, my statistics are not amazing. However, since my posts are sometimes at the top or even the sole results for some searches, I am pleased. <br /><br />However, today I want to talk about the traffic statistics in blogger.<br />I've noticed some weird traffic sources which seem to me like advertisement.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-gkceBXnX5FM/Tr4DGxuVMQI/AAAAAAAAC7o/1V2Arinm4ho/s1600/unlikely_traffic_sources.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"128\" src=\"http://4.bp.blogspot.com/-gkceBXnX5FM/Tr4DGxuVMQI/AAAAAAAAC7o/1V2Arinm4ho/s320/unlikely_traffic_sources.png\" width=\"320\" /></a></div>Luckily, my blog is registered to&nbsp;<a href=\"http://www.incapsula.com/\">Incapsula</a>.<br />While its first target is security, it also gives you more accurate traffic information.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-bOQOgKD7988/Tr4EtibgqAI/AAAAAAAAC78/eSIJPNY7qgg/s1600/compare_traffic.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"172\" src=\"http://3.bp.blogspot.com/-bOQOgKD7988/Tr4EtibgqAI/AAAAAAAAC78/eSIJPNY7qgg/s320/compare_traffic.png\" width=\"320\" /></a></div><br />Even though one filter shows 1 day, and the other shows 1 week, it is still clear that while blogger counts some bot visitors as human, Incapsula gives you a better identification.<br /><br />And if you think that that comparison is shocking, take a look at my last 90 days statistics in Incapsula<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-eoe2OpEBhno/Tr4GLIedYCI/AAAAAAAAC8I/s-mCDUw_0K0/s1600/traffic_in_incapsula.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"192\" src=\"http://2.bp.blogspot.com/-eoe2OpEBhno/Tr4GLIedYCI/AAAAAAAAC8I/s-mCDUw_0K0/s320/traffic_in_incapsula.png\" width=\"320\" /></a></div><br />As you can see, I had about 10K visits only in the last 3 months, but 91% of them were bots and only 9% were human - mostly using Chrome ( developers ) , and don't forget to count me in as well.<br />Comment spammers are #1 on the visitor table. Thank god I blocked them with Incapsula.<br /><br />So it seems to me that traffic to my site is even lower than you might think and that according to <a href=\"http://www.google.com/url?sa=t&rct=j&q=mograblog%20popularity&source=web&cd=16&ved=0CDsQFjAFOAo&url=http%3A%2F%2Fblog.mograbi.info%2F2010%2F10%2Fmograblogs-birthday-about-blog.html&ei=BAe-TqTuKsizhAfm1fCxBA&usg=AFQjCNFv_A2nCwe0TSAaZp1v12AZBcJaaQ&sig2=X0fayJgv9BYC0b-1cZRJqA\">my last calculation</a>, I am still getting about 1K traffic every 3 months. I haven't moved at all this last year.<br /><br />I did manage to meet someone, move in together, get married and&nbsp;pregnant, but my blog stayed the same.<br /><br />So I am guessing I should be around 5K human visits, ( 1 from last year + 4 this year ) .<br /><br />I added my blog to adwords to test my theory, and indeed, no money is earned at the moment.<br />However, it is really easy to configure it and let it be active on your site.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-29H0qK2n0EU/Tr4H6FCmttI/AAAAAAAAC8U/uoDEq8iVhIA/s1600/earnings_in_blogger.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"102\" src=\"http://2.bp.blogspot.com/-29H0qK2n0EU/Tr4H6FCmttI/AAAAAAAAC8U/uoDEq8iVhIA/s320/earnings_in_blogger.png\" width=\"320\" /></a></div><br /><br />All you need to do is click the \"earnings\" link. You don't have to pay for it so there's no harm.<br /><br />I'll see you next year with almost 20K visits, which will be only ( 9K human visits ), maybe 0.02 earnings, a kid, and some cool stuff I am working on.<br />I have to say, that even if I had 1 visit all this time, the blogging experience is still worth it.<br />blog on.<br /><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4944782153592012345/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/2-years-old-with-10k-page-views-about.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4944782153592012345"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4944782153592012345"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/2-years-old-with-10k-page-views-about.html",
                        "_title": "2 years old with 10K page views - About traffic statistics"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-gkceBXnX5FM/Tr4DGxuVMQI/AAAAAAAAC7o/1V2Arinm4ho/s72-c/unlikely_traffic_sources.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2416246504685708355",
                "published": "2011-10-25T08:17:00.000-07:00",
                "updated": "2012-02-21T05:09:03.800-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Content sharing makes the web a confusing place"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: left;\">Today I opened my blogger, and went over the \"News from Blogger\" section and noticed 2 similar entries.&nbsp;</div><div class=\"separator\" style=\"clear: both; text-align: left;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-3BMiGpGXTAw/TqbTDxNdhKI/AAAAAAAABA4/-gPrmJaIjdI/s1600/double_posting.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"232\" src=\"http://2.bp.blogspot.com/-3BMiGpGXTAw/TqbTDxNdhKI/AAAAAAAABA4/-gPrmJaIjdI/s640/double_posting.png\" width=\"640\" /></a></div>This reminds me some critic I read a few years back while experimenting with Maven documentation.<br />This is yet another <a href=\"http://some%20more%20specific%20use%20cases%20are%20described%20in%20the%20examples%20given%20below/\">&nbsp;search repetitions or search pollution</a>&nbsp;case.<br /><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Pollution caused by Feed Sharing</span><br /><br />While amazed me that this time the&nbsp;culprit is Google, this makes me wonder the integrity of feed sharing.<br />Picture a newspaper's feed with the same article over and over again, simply duplicated because you are registered for several different newspapers.<br /><br />The whole idea of the feed is to get info from different sources. But if 2 sources share that information, you automatically get a duplication in your feed.<br />Looking at it differently, if you are a feed owner, you want to enrich it by sharing content from another popular source.<br /><br />Which means that my feed should be dependent on the subscriber.<br />If the subscriber is subscribed to feed A and B, but these feeds share content, each feed should not publish the shared content, otherwise the subscriber gets duplicate feed entries.<br /><br />This won't resolve the repetition in the search results. Searching for some substring in the published item, you will find the original and the shares.<br /><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Pollution caused by Templates</span><br /><br />This is a simpler case to crack. I know the maven example for it.<br />Maven offers templates for documentation, however, if not modified you get a repetition in search result. &nbsp;Much like the feed item shares.<br /><br />However easier to understand, I think this problem might be tougher to resolve.<br />I wonder if this could be easily resolved by adding a \"Meta tag\" to the template with an ID to the template.<br />For example, the maven templates should have something like :<br /><br /><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><meta name=\"template_ID\" content=\"maven_doc_template\"/></span><br /><br />This will enable Google to aggregate these results and minor the repetition by showing \"show more results like this\" link which is used when there are many results from same source.<br /><br />This solution can also resolve the problems in the feed duplication without the need to have a dependency on the subscriber. A feed reader should not show 2 items with the same template ID, and the template ID should be different for every item, but the same between shares.<br /><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">Conclusion</span><br /><span class=\"Apple-style-span\" style=\"font-family: inherit;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: inherit;\">The goal, as it seems, is to ID the repetition in some way.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: inherit;\">adding a template ID might be good, but you cannot enforce it, w</span>hile making feed-subscriber dependency might be a security issue, so we can't use that either.<br /><br />I think, template ID would be nice if added. It can automatically resolve feed item duplication as this is not a user side dependent solution.<br />It will also resolve new Maven documentations repetition assuming Maven will generate the meta-tag and the editor won't delete them.<br />However it will not resolve the existing documentations, and you are unable to enforce the meta-tag.<br /><br /><br /><br />Comment on what you think about this topic.<br /><br /><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2416246504685708355/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/10/content-sharing-makes-web-confusing.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2416246504685708355"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2416246504685708355"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/10/content-sharing-makes-web-confusing.html",
                        "_title": "Content sharing makes the web a confusing place"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/-3BMiGpGXTAw/TqbTDxNdhKI/AAAAAAAABA4/-gPrmJaIjdI/s72-c/double_posting.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-708195660486176420",
                "published": "2011-10-06T11:28:00.000-07:00",
                "updated": "2011-10-06T11:28:38.839-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "The Agile Misconception"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">I am always surprised to see how teams manage their projects.<br />Of course, everyone claim to comply the \"Agile methodology\", however, most teams don't understand what Agile is.<br /><br />As you know me, I don't like to repeat what others already said.&nbsp;</div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/708195660486176420"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/708195660486176420"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4044058827417154919",
                "published": "2011-09-21T02:35:00.001-07:00",
                "updated": "2012-02-21T05:09:34.717-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "jquery"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Adding min-height to TinyScrollbar JQuery plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Today I added \"minHeight\" feature a JQuery plugin a became quite fond of..<br />This plugin is called <a class=\"mogi-reference\" href=\"http://www.baijs.nl/tinyscrollbar/\" target=\"_blank\">Tiny Scrollbar</a>, and for this post you will need to have a look at <a href=\"http://www.baijs.nl/tinyscrollbar/js/jquery.tinyscrollbar.js\" target=\"_blank\">the source</a>, as I am going to modify it just a bit, while adding a powerful feature.<br /><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">The Problem</span><br />Before I added the feature, in some cases, you would get a really small scroll bar.<br />To fix this issue, I decided to patch the plugin with a configuration parameter I called \"minsizethumb\"<br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-PvxOmKLe3kI/Tr_wFcVbXnI/AAAAAAAAC8g/iBxgOlPJrGY/s1600/tinyscrollbar_really_tiny.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/-PvxOmKLe3kI/Tr_wFcVbXnI/AAAAAAAAC8g/iBxgOlPJrGY/s1600/tinyscrollbar_really_tiny.png\" /></a></div><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif; font-size: x-large;\">The Changes</span><br />There are really small changes to make in order to add this feature<br />First of all, you need to add a configuration parameter.<br />In JQuery, this is quite easy. You should look for an object right at the top of the plugin.<br />This object is usually called \"options\".<br /><br />In tiny scrollbar it looks like this :<br /><br /><pre class=\"javascript\" name=\"code\">options: {<br /> axis: 'y', // vertical or horizontal scrollbar? ( x || y ).<br /> wheel: 40,  //how many pixels must the mouswheel scroll at a time.<br /> scroll: true, //enable or disable the mousewheel;<br /> size: 'auto', //set the size of the scrollbar to auto or a fixed number.<br /> sizethumb: 'auto' //set the size of the thumb to auto or a fixed number.<br /> <b><u>minsizethumb: -1  // set a minimum size for the thumb.. combine with sizethumb='auto'</u></b><br /> }<br /></pre><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">See line 7 for the change I made.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">It is important to initialize the new option with some default value.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Adding the new option has no real effect on the plugin. You must refer to it somewhere.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">I added a line referring to this option in the \"update\" method.</span><br /><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace; font-size: x-small;\"><br /></span><br /><br /><pre class=\"javascript\" name=\"code\">this.update = function(sScroll){<br />   oViewport[options.axis] = oViewport.obj[0]['offset'+ sSize];<br />   oContent[options.axis] = oContent.obj[0]['scroll'+ sSize];<br />   oContent.ratio = oViewport[options.axis] / oContent[options.axis];<br />   oScrollbar.obj.toggleClass('disable', oContent.ratio >= 1);<br />   oTrack[options.axis] = options.size == 'auto' ? oViewport[options.axis] : options.size;<br /><br /><br />   oThumb[options.axis] = Math.min(oTrack[options.axis], Math.max(0, ( options.sizethumb == 'auto' ? (oTrack[options.axis] * oContent.ratio) : options.sizethumb )));<br />            if ( options.minsizethumb > 0 &&  oThumb[options.axis] < options.minsizethumb )<br />            { // set a minimum height for the bar<br />                oThumb[options.axis] = options.minsizethumb;<br />            }<br />   oScrollbar.ratio = options.sizethumb == 'auto' ? (oContent[options.axis] / oTrack[options.axis]) : (oContent[options.axis] - oViewport[options.axis]) / (oTrack[options.axis] - oThumb[options.axis]);<br />   iScroll = (sScroll == 'relative' && oContent.ratio <= 1) ? Math.min((oContent[options.axis] - oViewport[options.axis]), Math.max(0, iScroll)) : 0;<br />   iScroll = (sScroll == 'bottom' && oContent.ratio <= 1) ? (oContent[options.axis] - oViewport[options.axis]) : isNaN(parseInt(sScroll)) ? iScroll : parseInt(sScroll);<br />   setSize();<br />  };<br /></pre><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">The lines I added were  </span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><pre class=\"javascript\" name=\"code\">   if ( options.minsizethumb > 0 &&  oThumb[options.axis] < options.minsizethumb )<br />            { // set a minimum height for the bar<br />                oThumb[options.axis] = options.minsizethumb;<br />            }<br /></pre><span class=\"Apple-style-span\" style=\"font-family: 'Courier New', Courier, monospace;\"></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">They check if this option is specified, and if it should be applied.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">If so, it applies it on the plugin.&nbsp;</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">And this is it!</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">2 lines, and there you have it.. a new feature.</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">Amazing!!</span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial, Helvetica, sans-serif;\">This will promise you that the scroll has some minimum height so the users will always be able to drag the scroll bar with the mouse.&nbsp;</span></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4044058827417154919/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html#comment-form",
                        "_title": "4 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4044058827417154919"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4044058827417154919"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html",
                        "_title": "Adding min-height to TinyScrollbar JQuery plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-PvxOmKLe3kI/Tr_wFcVbXnI/AAAAAAAAC8g/iBxgOlPJrGY/s72-c/tinyscrollbar_really_tiny.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "4"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-9201257374494248577",
                "published": "2011-08-10T08:50:00.000-07:00",
                "updated": "2011-08-10T08:50:26.283-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Google+ - Not to the wide world web"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Google+ - Not for the wide world web</span><br /><span class=\"Apple-style-span\" style=\"font-size: x-large;\"><br /></span><br />I like google+, and I am sure to use it if people get the hang of it.<br />However, I fear that won't be the issue.<br /><br />If you ask me, the circle thing is too much for the common person.<br />Facebook offers a simple application with simple usage.<br />A \"one circle\" concept - if you'd like to convert Facebook's idiom to Google+s.<br /><br /><br />When I try to think if a social product can lift itself up to that critical mass, I think about my mother. (oooohhhh..). My mom has no clue about computers. She knows how to Email and even that took a while.<br /><br />My mom knows how to use Facebook. She doesn't like the idea that everyone can see it, but at least she knows what is going on.<br />Imagining her on Google+, I don't think she will get the hang of it.<br /><br />Most of the users today simply don't care. The circles seem too much a hassle for them, they will prefer things to be public and leave it at that..<br /><br />For the great plus of having your entire online life on the web : blogs, pictures etc.. like the <a href=\"http://mashable.com/2011/07/02/myspace-tom-google/\">vision myspace once had</a>, I think that the target audience is too small.<br />How many people do you know that use all these things? Or even just some of these things?<br /><br />In the end, I hope Google+ will catch on and become the new standard social media. However, my current guess is it will become a relatively small group of internet geeks existing in a smaller bubble that no one really cares about.<br /><br />I hope I am wrong, because Google+ is the social network I want for myself.&nbsp;</div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/9201257374494248577"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/9201257374494248577"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-848110250206491275",
                "published": "2011-08-08T06:44:00.000-07:00",
                "updated": "2012-02-21T05:10:19.551-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "jquery"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Disabling a button/link with JQuery"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">As you probably know, if you want to make a sexy button, you need to implement it with a link.<br /><br />Here is <a href=\"http://www.google.com/search?sourceid=chrome&ie=UTF-8&q=how+to+make+an+expanding+button\">a simple search I did with Google</a>, and <a href=\"http://www.oscaralexander.com/tutorials/how-to-make-sexy-buttons-with-css.html\">an example for it I found right away</a><br /><br />Note - that the post does not explain how to disable/enable the button... And who wants a button that cannot be disabled?<br /><br />Disabling a button can be very useful if you want to make sure the form is filled properly. Simply enable it once all the details are ok.<br /><br /><br />However, disabling a link is impossible.<br />Instead - you need to implement \"onclick\" with \"return false\".<br /><br /><br />At first, I thought about using<a href=\"http://jquery.malsup.com/block/\"> blockUI</a> - a cool JQuery plugin I recently discovered.<br />But it seems it does not block anchors - I could still click the anchors.<br /><br /><br /><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Solution step #1</span><br />A really good solution would be to change the opacity to 0.4 and add \"onclick\" as required.<br />This works great.<br /><br />And at first I used this technic in a Utils function... cool ain't it?<br /><br />However, soon enough, I had to have it as a JQuery prototype function (method).<br /><br /><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Solution step #2</span><br />Adding this solution to JQuery was easier than it looks<br /><pre class=\"javascript\" name=\"code\">/** Adding \"disable\" on expand button**/<br />$.fn.extend({<br /><br />    disableButton:function(){<br />            $(this).fadeTo(1,0.3);<br />            $(this).click(function(event){event.preventDefault()});<br />    },<br /><br />    enableButton:function(){<br />            $(this).fadeTo(1,1);<br />            $(this).attr('onclick','').unbind('click');<br />    }<br />});<br /></pre><br />As you can probably see, it's quite easy to add \"isButtonDisabled\" method to the deal.<br /><br /><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Troubleshooting</span><br />What I really wanted was to modify only the Anchor tags.<br />So I tried to do something like<br /><br /><pre class=\"javascript\" name=\"code\">$.fn.extend(AnchorHTMLElement.prototype, { ... } )<br /></pre><pre class=\"javascript\" name=\"code\"></pre>But it didn't work. If anyone has any idea why, please let me know. <br />This is also the reason why I have such specific names for the methods, and not just \"enable\"/\"disable\"</div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/848110250206491275/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/08/disabling-buttonlink-with-jquery.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/848110250206491275"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/848110250206491275"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/08/disabling-buttonlink-with-jquery.html",
                        "_title": "Disabling a button/link with JQuery"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-38272096040729536",
                "published": "2011-08-03T01:13:00.000-07:00",
                "updated": "2012-02-21T05:10:25.579-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Blogger wants to track my physical location?"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">We all know the well familiar \"App wants to use your location\" from Apple's devices such as iPod and iPhone and such.. <br /><br />Today, I noticed the same from Chrome browser. <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-GP5fTxxS5uo/TjgXptuf4qI/AAAAAAAAA9o/963P15Anblk/s1600/chrome_location.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"154\" src=\"http://3.bp.blogspot.com/-GP5fTxxS5uo/TjgXptuf4qI/AAAAAAAAA9o/963P15Anblk/s320/chrome_location.png\" width=\"320\" /></a></div><br /><br />Weird..<br />It seems a new feature is available for geo tagging.<br /><br /><br />I must also comment on the new Blogger layout. Amazing!<br />I especially liked the editing view for a post.<br />You should really try it out.<br /><br />What I don't understand, is the \"upload image\" dialogs..<br />When I edit the HTML directly, I get the old style.<br />But when I compose, I get the new cool dialog (which allows you to add multiple pictures by the way...).<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-gZgDldIqRP8/TjkCrRyMD0I/AAAAAAAAA9w/Ts_1DZpSLoU/s1600/cool_new_dialog.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"186\" src=\"http://2.bp.blogspot.com/-gZgDldIqRP8/TjkCrRyMD0I/AAAAAAAAA9w/Ts_1DZpSLoU/s320/cool_new_dialog.png\" width=\"320\" /></a></div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-AH5-aAfD21g/TjkCt4ixAkI/AAAAAAAAA90/iOJFV0W-_5E/s1600/ugly_old_popup.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"197\" src=\"http://4.bp.blogspot.com/-AH5-aAfD21g/TjkCt4ixAkI/AAAAAAAAA90/iOJFV0W-_5E/s320/ugly_old_popup.png\" width=\"320\" /></a></div><br /><br />Without a doubt.. Blogger is on the right track.<br />When my sister thought about which blog engine she should use, I recommended Blogger.<br />Glad to see it is backed up with actions.&nbsp;</div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/38272096040729536/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/08/blogger-wants-to-track-my-physical.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/38272096040729536"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/38272096040729536"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/08/blogger-wants-to-track-my-physical.html",
                        "_title": "Blogger wants to track my physical location?"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-GP5fTxxS5uo/TjgXptuf4qI/AAAAAAAAA9o/963P15Anblk/s72-c/chrome_location.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3539318218337191961",
                "published": "2011-07-02T10:11:00.000-07:00",
                "updated": "2013-03-11T08:08:37.034-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Resolving play!Framework's test migration problems"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\" class=\"mograblog\"> <p>  I recently upgraded to play 1.2.1.<br />  As I was running the tests, I got weird exceptions. That contained strings like :<br /> </p>  <pre><br />Unsuccessful: create table&nbsp;<br /><br />Syntax error in SQL statement \"CREATE TABLE&nbsp;...&nbsp;<br /><br />expected \"identifier\"; SQL statement:&nbsp;<br /><br /> </pre>  <p>  After searching google, I read the thread \"<a class=\"mogi-reference\" href=\"http://groups.google.com/group/play-framework/browse_thread/thread/7db811362e73a81f\">Play 1.2: Syntax error in SQL statement \"CREATE TABLE ...</a>\" on google group, which reached the conclusion I should use :<br /><br />  <pre>hibernate.globally_quoted_identifiers=true</pre>  But then, I got some scarier errors like :<br /> <br />  <pre class=\"prettyprint\"><br />JPA error<br />A JPA error occurred (Unable to build EntityManagerFactory):<br />  </pre>  <p>  So I reached another thread named \"<a class=\"mogi-reference\" href=\"http://groups.google.com/group/play-framework/browse_thread/thread/20b3ecc0b008a76f\">HowTo : UniqueConstraint and ManyToOne</a>\", yet again on google group.<br />  However, this time, they reached the conclusion \"never use hibernate.globally_quoted_identifiers=true \"<br /><br/>  Urrrrghhh!!!<br /><br />  As I started digging I quickly found that play switched the test DB driver from <a href=\"http://hsqldb.org/\" class=\"mogi-reference\">HSQLDB </a>to <a href=\"http://www.h2database.com/html/main.html\" class=\"mogi-reference\">H2</a> as you can see in <a class=\"mogi-reference\" href=\"http://www2.playframework.org/documentation/1.2/releasenotes-1.2#H2asdefaultinmemorydatabase\">play-1.2.1 release notes</a><br /><br />  So I finally decided to revert back to HSQLDB, and see what happens. I am glad to report the problem was solved, however - since it was hard to discover the proper way to do this, I decided to post it here.  </p> <p>  <ol>      <li>take hsqldb.jar and place it in your play/framework/lib dir. ( you need it in your classpath ).</li>      <li>make sure your application conf has the following properties</li>      <ol>          <li>%test.db=mem</li>          <li>%test.db.driver=org.hsqldb.jdbcDriver</li>    <li>%test.db.url=jdbc:hsqldb:mem:playembed</li>   </ol>  </ol> </p> <p>  This should do the trick.<br/>  You should look out for the line where play says where it is connecting to, and try to catch where    <pre>Connected to jdbc:h2:mem:play;MODE=MYSQL</pre>  becomes   <pre>Connected to jdbc:hsqldb:mem:playembed</pre>  Then you will know it is fixed.  </p> <h1>The new @DB view</h1> <p>    I am glad to report that play added a new view for DB.<br/>  This makes the need for an external client obsolete.<br/>  It is most useful with memory DBs as used in tests.<br/>  I tried it, and I have to say - best DB client GUI I used so far..<br/>  Simply go to : <span style=\"font-weight:bold\">localhost:9000/@db</span><br />  If you are in test mode, use the URL shown above : jdbc:hsqldb:mem:playembed (or whatever you customized).<br />  Don't worry - this URL is not available in production mode.<br/>  You can read more about it on the release notes.  </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3539318218337191961/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/07/resolving-playframeworks-test-migration.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3539318218337191961"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3539318218337191961"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/07/resolving-playframeworks-test-migration.html",
                        "_title": "Resolving play!Framework's test migration problems"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3542860425464777222",
                "published": "2011-06-14T14:15:00.000-07:00",
                "updated": "2012-02-21T05:10:55.528-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Favicon in Blogger - Finally!!!"
                },
                "content": {
                    "_type": "html",
                    "__text": "You'd think they'd get around to it much sooner.. <br /><br />5 days ago, <a href=\"http://bloggerindraft.blogspot.com/2011/06/customize-your-favicon.html\" class=\"mogi-reference\">Blogger announced a favicon customization</a> for draft users.<br /><br />Shame it doesn't work well on all browsers.. or is it a cache issue?? I don't know - the favicon never works 100% for me.. <br /><br />For those who want to remember the good old days, here is the now deprecated <a href=\"http://blog.mograbi.info/2010/04/mogi-on-blogger-setting-up-favicon-for.html\"> how to set up a favicon</a> post that I wrote."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3542860425464777222/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/06/favicon-in-blogger-finally.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3542860425464777222"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3542860425464777222"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/06/favicon-in-blogger-finally.html",
                        "_title": "Favicon in Blogger - Finally!!!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-497939639561341862",
                "published": "2011-06-07T05:51:00.000-07:00",
                "updated": "2012-02-21T05:10:47.299-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "HTTP Basic Authentication - Thank you PlayFramework!"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">Finally, one of my mysteries is resolved. <br /><br />Do you know how it is when you need a basic authentication in a browser? <br />You get this weird default popup asking for user/password. <br />You've probably seen it by now, but just in case you haven't you can click <a href=\"http://httpstat.us/401\">here</a> to see it in action. <br />And if that link does not work, it looks something like : <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-oh3l0sfbOjY/Te4dAdz7LGI/AAAAAAAAA2Q/jRrXTa7UHMs/s1600/prompt-basic-authentication.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"199\" src=\"http://4.bp.blogspot.com/-oh3l0sfbOjY/Te4dAdz7LGI/AAAAAAAAA2Q/jRrXTa7UHMs/s320/prompt-basic-authentication.png\" width=\"320\" /></a></div><br />I always wondered how you can tell the browser to prompt this dialog.<br />Today I found out thanks to <a href=\"http://www.playframework.org/\" class=\"mogi-reference\">play!framework</a><br /><br />Looking at the \"Controller\" code, you will find the method \"unauthorized\" that you can use like this ( action \"index\" in Controller \"Application\")  : <br /><br /><pre name=\"code\" class=\"java\">  public static void index() {<br />      String password = request.password;<br /><br /> if ( password == null )<br /> {<br />            unauthorized( \"My Realm\" );<br /> }<br />         render(); <br />   }<br /></pre><br />This will cause the prompt to appear, and the string \"My Realm\" will be used in the prompt. <br />Digging a little bit in the play!Framework code, you will find the following code : <br /><br /><pre name=\"code\" class=\"java\">public class Unauthorized extends Result {<br />    <br />    String realm;<br />    <br />    public Unauthorized(String realm) {<br />        super(realm);<br />        this.realm = realm;<br />    }<br /><br />    public void apply(Request request, Response response) {<br />        response.status = 401;<br />        response.setHeader(\"WWW-Authenticate\", \"Basic realm=\\\"\" + realm + \"\\\"\");<br />    }<br />}<br /></pre><br />Which means - in order to get the browser to show the basic authentication, you need to return \"401\" - and add \"Basic Realm\" to the header as shown above. <br />The browser will detect this, prompt User/Password and will make the same request. Only this time adding the \"username/password\" to the request for you to read. <br /><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/497939639561341862/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/06/http-basic-authentication-thank-you.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/497939639561341862"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/497939639561341862"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/06/http-basic-authentication-thank-you.html",
                        "_title": "HTTP Basic Authentication - Thank you PlayFramework!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-oh3l0sfbOjY/Te4dAdz7LGI/AAAAAAAAA2Q/jRrXTa7UHMs/s72-c/prompt-basic-authentication.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7860518917720417235",
                "published": "2011-06-05T10:11:00.001-07:00",
                "updated": "2012-02-21T05:11:10.333-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "python"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Children learning programming"
                },
                "content": {
                    "_type": "html",
                    "__text": "<br/><br/><br />Lately, I have been tutoring small children how to program. <br />The parents seemed excited about Python, so I went along with it. <br /><br /><br />As the time flies by, I am amazed to discover the amount of knowledge transferred to children by programming just a little bit. <br /><br /><h1>English</h1><br />For non-native speakers, this requirement is amazing. <br />True - we need to know English well in order to program, but we can also get along quite well without it. <br/><br />We need to understand the keywords. For example : \"for\",\"while\",\"if\",\"else\",\"switch\" etc... <br />and some built-in functions' name : \"print\",\"input\" etc..  <br/><br /> <br/><br />Other than that - you can definitely get along with mixed languages. For example \"shem_shel_sefer\" - which means \"book's name\" in Hebrew. <br/> <br /><br />It seems that this requirement from children is quite simple. They have a good memory for words and by this age they know all the letters and some words, and a little speech. <br/> <br /> <br/><br /><h1>Hello World!</h1><br />Take the simplest example \"hello world!\" program.  <br/><br />In order to teach this, you run \"python\" command and go into the shell. <br /><br />Then you type <br /><pre name=\"code\" class=\"python\">print(\"hello world!\")<br /></pre><br />On the first example you already have a function call.  <br/><br />At this point they don't need to fully understand what a function is, but simply that it does stuff. <br /> <br/><br /><br />Next, you usually read some input. Something like this (pseudo-code) : <br /><pre  name=\"code\" class=\"python\">name = input(\"please insert name:\")<br />print(\"hello \" + name)<br /></pre><br />You have another function. Now they know 2 major functions. One of them is returning a value. <br /><br />Another amazing thing here is the variable \"name\". (you can also write \"shem\" which is name in Hebrew). It seems so intuitive to kids that the value returned in \"input\" is kept inside \"name\" and then used in \"print\". <br /><br />Funny how difficult it is for 13 years old children learning math to observe the same thing. <br /><br /><h1>Loops, Boolean and Math </h1><br />These three usually go along, so it is intuitive to teach them together. <br />The kids already know the meaning of <br /><pre name=\"code\" class=\"python\">x = 2<br /></pre><br />They know it means - put \"2\" inside \"x\". <br />But it is a bit difficult for them to learn <br /><pre name=\"code\" class=\"python\">x == 2<br /></pre><br />This is due to the fact they've never seen this syntax before anywhere! <br/><br />However, once you point out the computer needs to know the difference between the two, they seem to get the hang of it. \"x == 2\" - is the correct way to ask the computer \"are they equal?\".  <br/><br /><br />Python returns \"True\" or \"False\" - and so they learn 2 more words. <br/><br /><br />From there on, teaching other operators such as \">\" , \"<\" etc.. is even easier as they know this syntax from school. <br /><br />Going on from there to \"if\" is quite simple, and adding \"else\" is elementary. <br/> <br />Loops take some time, but remember - kids don't need to know everything(!) - so teaching \"while\" is enough. <br/> <br/> <br /><br />So for \"while\" you need to write some code <br /><br /><pre name=\"code\" class=\"python\">x = 2<br />while ( x < 5 ):<br />    x = x - 1<br />    print(\"x = \" + str(x) )<br /></pre> Then I explain to them 3 things :  <ol><li> at first x is 2 </li><li> each time x is less than 5 I print to screen that value of x, and decrement it by one</li><li> I stop when x is NOT less than 5 (don't say bigger or equals..) </li></ol>They are pretty smart. By now you can go over the code line by line, and they will understand what the program does. (AMAZING!).  <br/> <br/> Now the question is : What will be printed on screen?  <br/>I go over with them. The first cycle is a bit hard, and then the second. <br/>  In the third they do it alone, and then they understand it stops.  <br/> The immediately press ENTER to see if they are right..  <br/> <h1>Infinity</h1>I discovered that the next best thing to teach at this point is the infinite loop.  <br/>First of all - kids love the concept, and second of all - it is quite practical later on. (I will show you in a bit).   So I write  <pre name=\"code\" class=\"python\">while( 1 == 1 )<br />{<br /> print (\"hello world!\") <br />}<br /></pre> <br/>and then I ask them - how many times will it print on screen? <br/>They think a little and answer \"a lot\". :)  <br/> <br/>You should ask them \"when will it stop printing?\" - and then you get the answer you want.. they say \"never\". <br/>   <h1>Writing a function </h1> <br/>This is a big step. I tell them I am about to write a function and when I am done I will explain to them everything. I write the following code  <pre name=\"code\" class=\"python\">def sum(a,b):<br />   return a+b<br /></pre>I explain to them what I wrote :   \"def\" - is short for \"definition\".  <br/>\"sum\" - is the name of the function. I can give whatever name I want. (leave out the details here).  <br/>\"return\" - means that the following value will be returned from the function (just like \"input\" returned what I typed in).  <br/> <br/>Then I explain :  <br/>The function gets 2 numbers \"a\" and \"b\" and returns the sum.  <br/> <br/>Then I tell them - lets use this function. And so I write  <br/><pre name=\"code\" class=\"python\">print( sum(2,3) )<br /></pre>And I ask them - what will it print?  <br/> <br/> <br/> Sometimes I will need to go over the explanation several times. It is a hard leap for some but eventually they get the courage to say \"5\".  <br/>I keep with some more obvious questions and only once I ensure their ego is big enough, I carry on.  <br/> <br/>Then, I ask them what the following returns  <br/><pre name=\"code\" class=\"python\">sum(\"hello \",\"world\")<br /></pre> <br/>This question is very intriguing to them. If they want to let it run and see, let them. They actually know what it will do - so they jump ahead and check if they are right.  <br/>  <h1>Writing a Small Game</h1>Just telling them you are about to write a game makes their eyes shine.  <br/>I write the following code in a file this time (writing it in a console is very hard even for me):   <pre name=\"code\" class=\"python\">def game(a, b):<br />    result = a + b<br />    res = input(\"how much is \" + str(a) + \" + \" + str(b) + \"?\")<br />    if ( res == result):<br />           print(\"You are right!!!!\")<br />    else:<br />           print(\"You are wrong! The correct answer is : \" + str(result) )<br /><br />game(2,3) <br />game(20,3) <br />game(16,13) <br /></pre>I go over the code several times. Their questions will mainly be due to the fact it is the biggest chunk of code they've ever seen.  <br/>They understand the program perfectly, but they will be intimidated from the size of it, and will make you go over it several times.  <br/> <br/> Then you should run the code. <br/>The screen will ask them \"how much is 2 + 3?\".  <br/>They will answer \"5\" as they've answered this question minutes before. <br/>You will write \"5\" and press ENTER. The screen will show  \"You are right!!!\" (ego boost).  <br/>Then I tell them - lets see what happens if I write a wrong answer. And we input \"4\" and get the \"else\" scenario.   <br/>Then the same for 20 and 3, 16 and 13. <br/>  They will be correct each time.  <br/> <br/> This is where I tell them I don't want to pick the numbers myself. I want to the computer to pick the numbers for me..  <br/>So I add some random and the code looks like  <br/><pre name=\"code\" class=\"python\">import random<br />def game(a, b):<br />    result = a + b<br />    res = input(\"how much is \" + str(a) + \" + \" + str(b) + \"?\")<br />    if ( res == result):<br />           print(\"You are right!!!!\")<br />    else:<br />           print(\"You are wrong! The correct answer is : \" + str(result) )<br /><br />game(random.randint(0,100),random.randint(0,1000))<br /></pre>Change the interval of rand if it is too hard for them.  <br/>I run the game again. I run it several times - and they see that the numbers keep changing without changing the code. They understand the computer is peaking the numbers by itself. <br/>   <br/>Then I add an infinite loop. I make sure they remember what it does. The code looks like <pre name=\"code\" class=\"python\">import random<br />def game(a, b):<br />    result = a + b<br />    res = input(\"how much is \" + str(a) + \" + \" + str(b) + \"?\")<br />    if ( res == result):<br />           print(\"You are right!!!!\")<br />    else:<br />           print(\"You are wrong! The correct answer is : \" + str(result) )<br /><br />while( 2 == 2 ):<br />     game(random.randint(0,100),random.randint(0,1000))<br /></pre>Now they see the game keeps running. You don't need to run it again each time..  <br/> <h1>Conclusion </h1>You need to go over what you did. If you can do it while showing off to some other adult, do so. It will make them feel good with themselves - and for good reasons.  <br/> <h1>How to go on from here</h1>You can take it in many directions.  <br/>I like to add \"points\". Whenever an answer is correct - you get a point. Whenever it is incorrect, you loose 4 points.  <br/> <br/> Then I like to add \"players\" - this will require code change OR if you are feeling up to it - teach them about lists.  <br/> <br/> Each player has a different score.   <h1>Why Does It Work?</h1>If you ask me why does it work, I'd say it is simply the computer is communicating with the children. <br/>The computer will tell you if you are wrong or right, and sometimes it will surprise you.  Children respond to computer and challenges, especially if they can test their answers right away.  <br/> One of the mistakes the traditional schools have this day, I believe, is that children go home to do homework, and by the time they get to check the homework - which is days later - they already lost interest. The rush is already gone.  <br/> <br/> But with computers, the rush stays as the result is immediate.  <br/> <h1>Things to Note</h1><li> You should note I avoid reaching \"0\", as this number is a mystery even for some grown-ups</li><li> You should make sure the code works. We are dealing with quite simple code, but still, go over it once before teaching a child. You don't want any embarrassments when the time comes</li><li> Programming puts math into good use. The children get feedback about something too abstract without it.</li><li> I avoid using \"while(True)\" as the sentences become vague. I use \"while (1 == 1)\" instead or something of that nature</li><li> Sometimes the kid won't tell you the answer, and they will want to run the code and see the result. Let them. This behavior is a result of lack of confidence. Confronting them will have a negative outcome. </li>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7860518917720417235/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/06/children-learning-programming_7771.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7860518917720417235"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7860518917720417235"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/06/children-learning-programming_7771.html",
                        "_title": "Children learning programming"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-871497596050537846",
                "published": "2011-05-31T02:24:00.000-07:00",
                "updated": "2012-09-13T01:28:47.328-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "intellij"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Intellij - \"J\" is shown instead of \"C\""
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">As I was looking at my blog's search keys that got people here, I noticed a weird one<br /><pre>intellij class file icon show j instead of c<br /></pre><br />It seems I am the first result in google for this query. But amazingly, it is for an <a class=\"mogi-reference\" href=\"http://draft.blogger.com/blog.mograbi.info/2010/12/getting-really-annoyed-with-axis2.html\">\"axis\" related post. </a><br /><br />I decided I should dedicate a small post for this specific problem just in case someone else runs into it. Just so you'd know, I didn't find the result in <a class=\"mogi-reference\" href=\"http://www.jetbrains.com/idea/webhelp/file-types-recognized-by-intellij-idea.html\">intellij's icons reference</a> page. <br /><br />There are 3 icons related to Java you should be aware about<br /><br /><br /><br /><h1>Not in Source</h1><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-2DG2ZQ_rJYs/TeSxVzrvldI/AAAAAAAAA14/Iu0cEWsAwMk/s1600/java_file_not_under_source_folder.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-2DG2ZQ_rJYs/TeSxVzrvldI/AAAAAAAAA14/Iu0cEWsAwMk/s1600/java_file_not_under_source_folder.png\" /></a></div></div>This icon means that the file is not under a source root. <br />To add a source root in intellij, you should: <br /><ul><li> click \"Project Structure\"(ctrl+alt+shift+S) </li><li> Choose \"modules\" </li><li> Choose the folder you want on the right </li><li> Click \"sources\" icon </li></ul><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-qkXumH07FKU/TeSyIl99G9I/AAAAAAAAA18/2DbYk6oP4s8/s1600/intellij_add_folder_as_source.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"141\" src=\"http://1.bp.blogspot.com/-qkXumH07FKU/TeSyIl99G9I/AAAAAAAAA18/2DbYk6oP4s8/s320/intellij_add_folder_as_source.jpg\" width=\"320\" /></a></div><br />Once you did that - you will see a different icon. <br /><br /><h1>Java (not a class) Icon</h1><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/--BtfLFiP3q4/TeSyUAPc4xI/AAAAAAAAA2A/EPZbYGshU9Q/s1600/java_source_but_no_class.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/--BtfLFiP3q4/TeSyUAPc4xI/AAAAAAAAA2A/EPZbYGshU9Q/s1600/java_source_but_no_class.png\" /></a></div><br />This icon means the file has a \"java\" extension. However - it is not a class!<br />You are probably wondering if there are such files. Yes there are. For example <a class=\"mogi-reference\" href=\"http://download.oracle.com/javase/6/docs/technotes/tools/solaris/javadoc.html#sourcefiles\">pacakge-info.java</a> <br /><br />In order to make this a class, all you have to do is enter the word \"class\" and the beginning of the class' name.<br />For example<br /><pre>class G<br />{}<br /></pre>Would suffice.<br /><br />Then you will see the third icon, which is well known :<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-kw0DM4wqjE8/TeSzae99dXI/AAAAAAAAA2I/1CopZX6fIWU/s1600/intellij_class_icon.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-kw0DM4wqjE8/TeSzae99dXI/AAAAAAAAA2I/1CopZX6fIWU/s1600/intellij_class_icon.png\" /></a></div> <h3>Great Comments</h3>   Thanks for all the comments on this post. <br/>Someone posted that the \"J\" icon also happens when your java file is too big. <br/>You can fix this by editing the \"idea.max.intellisense.filesize\" property in your \"idea.properties\"  file. <br/>Here is how you do this if you are in windows vista or higher <br/> <ul>   <li> Open your notepad as Administrator </li>   <li> Open \"idea.properties\". The path is something like \"C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 10.5.4\\bin\" </li>   <li> Now you can edit the property as you see fit </li></ul> The property's documentation is   <pre><br />#---------------------------------------------------------------------<br /># Maximum file size (kilobytes) IDEA should provide code assistance for.<br /># The larger file is the slower its editor works and higher overall system memory requirements are<br /># if code assistance is enabled. Remove this property or set to very large number if you need<br /># code assistance for any files available regardless their size.<br /># Please note this option doesn't operate with Java files. Regardless of the option value code assistance will anyway stay there.<br />#---------------------------------------------------------------------<br />idea.max.intellisense.filesize=2500<br /></pre> The documentation says this property does not relate to Java files, but as comments suggest, it does.   Thank you all for all the comments. This is exactly why I started the blog.   <br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/871497596050537846/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html#comment-form",
                        "_title": "4 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/871497596050537846"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/871497596050537846"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html",
                        "_title": "Intellij - \"J\" is shown instead of \"C\""
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-2DG2ZQ_rJYs/TeSxVzrvldI/AAAAAAAAA14/Iu0cEWsAwMk/s72-c/java_file_not_under_source_folder.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "4"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6751632086294628801",
                "published": "2011-05-30T04:21:00.000-07:00",
                "updated": "2012-02-21T05:11:10.331-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "python"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Python Hands on - Code Sample"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">As I was starting to learn python, I learned some surprising things about python quite quickly. And thought I should share in a little example<br /><br /><pre class=\"python\" name=\"code\">### This file shows usage of constructor<br /><br /><br />class Calc:<br />    numberA = 0<br />    numberB = 0<br /><br />    def __init__(self, numberA:int, numberB=1):<br />        self.numberA = numberA<br />        self.numberB = numberB<br /><br />    def sum(self, v:int):<br />        return self.numberA + v<br /><br />    def sum(self): # overrides the previous definition<br />        return self.numberA + self.numberB<br /><br />    def mul(self):<br />        return self.numberA * self.numberB<br /><br />    def div(self):<br />        return self.numberA / self.numberB<br /><br />    def mod(self):<br />        return self.numberA % self.numberB<br /><br />class MyCalc( Calc ):<br />    numberA = 5<br /><br />    def __init__(self, numberA:int ):<br />        super(MyCalc,self).__init__( numberA )<br />        ## you can also do<br />        # Calc.__init__(self,numberA)<br /><br />calc = MyCalc( 2 )<br />print( calc.sum( ) )<br /><br />try:<br />    print( calc.sum( 6 ) ) # will cause an error<br />except Exception as e:<br />    print('an error occured' + str(e))<br /><br />print( calc.mul( ) )<br />print( calc.div( ) )<br />print( calc.mod( ) )<br />print( 'dir = ' + \",\".join( dir( calc ) ) )<br />print( 'class = ' + str( calc.__class__ ) )<br />print( calc.__class__.__name__ )<br /></pre><br /><h1>Things to Note</h1><br /><li> The constructor is called \"__init__\" </li><br /><li> Signature overloading is impossible. Instead you get override </li><br /><li> You can initialize function params </li><br /><li> Null in python is None </li><br /><li> \"dir\" function will show all attributes of a class </li><br /><li> \".__class__.__name__\" will show the class' name</li><br /><li> When using a \"try/except\" you can use \"Exception\" as broadest type </li><br /><li> An empty function is \"pass\"</li><br /><li> You can call super constructor in more than one way </li><br /><li> You can define types on function parameters, but it's optional </li><br /><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6751632086294628801/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/python-hands-on-code-sample.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6751632086294628801"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6751632086294628801"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/python-hands-on-code-sample.html",
                        "_title": "Python Hands on - Code Sample"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5053935515459758415",
                "published": "2011-05-30T03:47:00.000-07:00",
                "updated": "2011-05-30T03:47:34.098-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "python"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Python Hands on - The Pickle Problem"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-igKVD-8DeZI/TeN1pX4VLdI/AAAAAAAAA1w/K7i4vz7Joa0/s1600/python-logo-glassy_ori.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/-igKVD-8DeZI/TeN1pX4VLdI/AAAAAAAAA1w/K7i4vz7Joa0/s1600/python-logo-glassy_ori.png\" /></a></div><br />I recently learned how to write to a file in Python, and among it how to use Object Serialization library called \"pickle\". <br /><br />According to <a class=\"mogi-reference\" href=\"http://docs.python.org/tutorial/inputoutput.html#the-pickle-module\">Documentation</a> it should be quite easy <br /><br /><pre>pickle.dump(x, f)<br />x = pickle.load(f)<br /></pre><br />What the documentation does not tell you is that you need to open the file with a \"binary\" flag. <br />So some of you might get <br /><pre>write() argument 1 must be str, not bytes<br /></pre><br />All you need to do is add <br /><pre>f = open(\"myFile\",\"wb\")<br /></pre><br />The \"b\" character, tells python to open the file in a binary mode. <br />Same for reading! So if you are getting <br /><pre>read() from the underlying stream did notreturn bytes<br /></pre><br />make sure you did <br /><pre>f = open(\"myFile\",\"rb\")<br /></pre><br />If some of you are getting <br /><pre>TypeError: file must have a 'write' attribute<br /></pre><br />This means you sent the argument in a wrong order. Note the signature of \"dump\"<br /><pre>def dump(obj, file, protocol=None, *, fix_imports=True):</pre><br />Make sure that you first send the object, then the file.  </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5053935515459758415/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/python-hands-on-pickle-problem.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5053935515459758415"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5053935515459758415"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/python-hands-on-pickle-problem.html",
                        "_title": "Python Hands on - The Pickle Problem"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-igKVD-8DeZI/TeN1pX4VLdI/AAAAAAAAA1w/K7i4vz7Joa0/s72-c/python-logo-glassy_ori.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1262994286748106533",
                "published": "2011-05-22T05:23:00.000-07:00",
                "updated": "2011-05-30T03:33:08.046-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "svn"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My First SVN Hook"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-RgF9X8l-D5Q/TdickZ_M-yI/AAAAAAAAA1Y/4lkGF3Q_YZE/s1600/hook-icon.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/-RgF9X8l-D5Q/TdickZ_M-yI/AAAAAAAAA1Y/4lkGF3Q_YZE/s1600/hook-icon.png\" /></a></div><br /></div><br />Finally, I got a chance to write my first SVN hook. <br />Seems to be very easy and useful. <br /><br /><h1>My Goal </h1>My first hook relates to the <a class=\"mogi-reference\" href=\"http://www.playframework.org/modules/migrate\">migrate</a> plugin in <a class=\"mogi-reference\" href=\"http://www.playframework.org/\">play!framework</a>.<br /><br />For those of you who use rails, you might know this plugin/module/gem already. <br />It helps you version your DB schema. <br />Each file has the following pattern : <br /><br /><pre><version>.(up/down).someName.sql<br /><br />    1.up.addingTableUser.sql<br />    1.down.addingTableUser.sql<br /><br />    2.up.addingNumberOfLoginsToUser.sql<br />    2.down.addingNumberOfLoginsToUser.sql<br /></pre><br />As you can see - the version is a number that increments each time. When you work in a team - you will get a lot of clashes between versions. <br /><br />The version of this module I was using (which is quite old by now), had a bug. If you had the combination of \"up\" or \"down\" in the name of the version, it would fail. So for example : <br /><br /><pre>7.down.addingLabelToGroup.sql<br /></pre><br />would fail, as the word \"Group\" has the combination UP in it.. <br /><br />There are 2 things I needed to resolve with my pre-commit hook : <br /><ul><li>  make sure the version does not clash </li><li> make sure the name does not have the combination \"up\" or \"down\" </li></ul><br /><h1>Writing the Hook </h1><br />In unix it's quite easy to write the hook in any language you want as long as the <a href=\"http://en.wikipedia.org/wiki/Shebang_(Unix)\">Shebang</a> line is there. <br /><br />I decided to write my hook in Python. <br /><br /><h2>The svnlook Command</h2><br />It seems that the SVN comes with a simple command called <a class=\"mogi-reference\" href=\"http://svnbook.red-bean.com/en/1.5/svn.ref.svnlook.html\">svnlook</a> that gives you all the API you need to write a hook. <br />You execute it in a command line (from code, as a different Process) - and you parse the output. <br />I found the commands : <br /><a class=\"mogi-reference\" href=\"http://svnbook.red-bean.com/en/1.5/svn.ref.svnlook.c.changed.html\"></a><br /><pre><a class=\"mogi-reference\" href=\"http://svnbook.red-bean.com/en/1.5/svn.ref.svnlook.c.changed.html\">svnlook changed REPOS_PATH</a></pre><br />and <br /><a class=\"mogi-reference\" href=\"http://svnbook.red-bean.com/en/1.5/svn.ref.svnlook.c.tree.html\"></a><br /><pre><a class=\"mogi-reference\" href=\"http://svnbook.red-bean.com/en/1.5/svn.ref.svnlook.c.tree.html\">svnlook tree REPOS_PATH [PATH_IN_REPOS]</a></pre><br /><br />most useful. <br /><br /><h2>Where to Start From </h2><br />After you read the API a bit, and you have an idea about how to write the hook, you start by reading the command line arguments. <br />The first one holds the \"REPOSITORY_PATH\" and the second one holds the \"TRANSACTION_ID\". <br /><br />The TRANSACTION_ID - exists only while committing, which makes it harder on development. I replaced the flag \"-t\" for transaction with the flag \"-r\" for revision while developing, because it is easier to run the script. <br /><br />In Python, you will usually have the following code : <br /><pre class=\"python\" name=\"code\">#!/usr/bin/env python<br /><br />import sys<br />import os<br /><br />if __name__ == '__main__':<br />        if ( len(sys.argv) ) < 3:<br />                sys.stderr.write(\"Usage: %s REPOS TXN\\n\"%(sys.argv[0]))<br />        else:<br />                repository_location = sys.argv[1]<br />                transaction_id = sys.argv[2]<br />                main(repository_location, transaction_id)<br /><br /><br />sys.exit(0)<br /></pre>where \"main\" is the function you should implement. I implemented it like this :  <br /><pre class=\"python\" name=\"code\">def main(rep_location, tx_id):<br />        added_migrate_files = get_added_migrate_files(rep_location, tx_id )<br />        for  migrate_file in added_migrate_files:<br />                check_added_migrate_file(migrate_file, rep_location)<br /></pre>ass you can see - I first get all the new files that are added, and filter out only those who match the \"migrate\" files pattern.  Then, I iterate over them, and check each one.  Lets see how I implemented them  <br /><pre class=\"python\" name=\"code\">def get_added_migrate_files(rep_location, tx_id):<br />        changes = os.popen('svnlook changed ' + rep_location + ' -t ' + tx_id ).read().split('\\n')<br />        print('found changes : ' + \",\".join(changes) )<br />        res = []<br />        for  change in changes :<br />                lchange = change.lower()<br />                print('checking if [' + lchange + '] starts with a %s'%(lchange.startswith('a')))<br />                if ( lchange.startswith('a') and migrate_path in lchange ):<br />                        print('looking at change : ' + lchange)<br />                        res.append(lchange.split(migrate_path)[1])<br />        return res<br /></pre>In order to get the added files, I execute with \"os.popen\" the \"svnlook changed\" command.  I read the output from the process with \"read()\" and split the result to get separate lines.  For each line I check if it represents an addition.  In subversion, an addition is noted by a capital \"A\" at the beginning, but since I am working with \"lower()\"  I compare it with \"a\" instead.   The \"migrate_path\" is the relative path in repository where the migrate scripts' folder resides.  I decided to refer to a single path. It might not be your choice, but I preferred to be safe than sorry.   So when I run \"lchange.split(migrate_path)[1]\" - I am actually extracting the name of the migrate script file.   this function returns all the names of added migrate files.   Now lets have a look at how I check if they are valid  <br /><pre class=\"python\" name=\"code\">def check_added_migrate_file(added_migrate_file, rep_location):<br />        migrate_file_parts = added_migrate_file.split(\".\")<br />        print('checking migrate file : ' + added_migrate_file )<br />        migrate_version = migrate_file_parts[0] + \".\" + migrate_file_parts[1] # a version is a combination of number and up/down<br />        print('migrate_version : ' + migrate_version)<br />        migrate_file_name = added_migrate_file<br />        lower_name = migrate_file_parts[2].lower()<br />        print('name : ' + lower_name )<br />        tree = os.popen('svnlook tree ' + rep_location + ' ' + migrate_path,'r').read().split('\\n')<br />        for tree_file in tree:<br />                filename = tree_file.strip()<br />                if ( filename.startswith(migrate_version) ):<br />                        sys.stderr.write(\"migrate file with version = \" + migrate_version + \"already exists!\")<br />                        sys.exit(1)<br />        if ( \"up\" in lower_name.lower() ):<br />                sys.stderr.write(\"file \" + migrate_file_name + \" contains the sequece 'up' (case insensitive). need to remove it\")<br />                sys.exit(1)<br />        if ( \"down\" in lower_name.lower() ):<br />                sys.stderr.write(\"file \" + migrate_file_name + \" contains the sequence 'down' (case insensitive). need to remove it\")<br />                sys.exit(1)<br /><br /></pre>This algorithm looks complicated but it's quite simple.  The main thing to note here is that I am running the \"svnlook tree\" command. giving me the existing migrate scripts in the repository.  Once I have them I simply compare the version to the added files with 2 loops. (I don't care about performance here).  I also verify that a file name does not contain the sequence \"up\" and \"down\".   As a new python developer, I was amused to discover it is accomplished with the \"in\" keyword.   <br /><h1>Important Things to Note</h1><ul><li>I keep writing to stderr. These messages will appear later in SVN output incase the commit fails</li><li> debugging a hook is hard. Even though I print to stdout, you have to wrap the \"pre-commit\" with a script that outputs the stdout to a file in order to be able and debug it. </li><li>while developing, I simply replaced the \"-t\" flag with \"-r\" - allowing me to run the hook from command line, giving it revision numbers instead of transactions. A transaction id only exists during an actual commit. <br /></li><li>In my installation, pre-commit hooks did not run by default. I had to go to my repository manually, and under a folder named \"hooks\" I had to rename a file named \"pre-commit.tmp1\" to \"pre-commit\" (in unix). <br />Then I had to add a line of code in \"pre-commit\" to add my new hook to the flow. <br /></li><li>I had some problems with permissions. So make sure you give permissions to execute your hook. <br /></li></ul><h1>Great Tip for Debugging </h1><br />I suggest you change \"pre-commit\" script, to return \"1\" instead of \"0\" while you develop a new hook. <br /><br />This way - the commit will always fail, and you can easily repeat it. <br /><br />For example - my hook takes affect on \"added files\". So if the commit succeeds, I need to create new files, add them to SVN and then commit = 3 operation. <br />However, when I fail the commit each time, all I have to do is commit again = 1 operation. <br />Saves a lot of time. <br /><br /><h1>Wrapping Pre-Commit for Debugging</h1>This is pretty simple, but not a lot of people know how to do it.  <br /><pre class=\"bash\" name=\"code\">#!/bin/sh<br />/svn_rep_path/hooks/pre-commit-run $* > /svn_rep_path/hooks/my.log<br />exit 1<br /></pre>The trick here is to use \"$*\" in order to pass all command line arguments to the real script.  \"pre-commit-run\" here   Once you're done, you should be able to commit wrong files and get errors. I use <a class=\"mogi-reference\" href=\"http://tortoisesvn.net/\">tortoise SVN</a> so I got this : <br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-l4rvd1nwha8/TdkAO5zFmhI/AAAAAAAAA1g/Iyp5Nu9DQl4/s1600/hook_result.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"143\" src=\"http://3.bp.blogspot.com/-l4rvd1nwha8/TdkAO5zFmhI/AAAAAAAAA1g/Iyp5Nu9DQl4/s320/hook_result.png\" width=\"320\" /></a></div><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1262994286748106533/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/my-first-svn-hook.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1262994286748106533"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1262994286748106533"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/my-first-svn-hook.html",
                        "_title": "My First SVN Hook"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/-RgF9X8l-D5Q/TdickZ_M-yI/AAAAAAAAA1Y/4lkGF3Q_YZE/s72-c/hook-icon.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6033554017153698902",
                "published": "2011-05-15T00:59:00.000-07:00",
                "updated": "2011-05-30T03:33:34.640-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "hibernate"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "@OneToOne - does not force uniqueness!"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-cG2Az3vl3Ww/Tc-HystcseI/AAAAAAAAA1I/GGt9u-DTS2Y/s1600/db_icon.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/-cG2Az3vl3Ww/Tc-HystcseI/AAAAAAAAA1I/GGt9u-DTS2Y/s1600/db_icon.png\" /></a></div><br /><br />I just discovered something. I have code with @OneToOne mapped to the DB.<br /><br />For example<br /><br /><pre>class A{<br />   @OneToOne(mappedBy=\"a\")<br />   public B b;<br />}<br /><br />class B{<br />   @OneToOne<br />   public A a;<br />}<br /></pre><br />However, I am able to create multiple \"B\" objects, pointing all to same A record.<br />The application fails on \"select\" to the A record. Hibernate throws exception :<br /><br /><br /><div style=\"background-color: #fcd2da; padding:5px\"><pre><span class=\"Apple-style-span\"><strong>JPAQueryException</strong> occured : Error while executing query <strong>from models.A</strong>: org.hibernate.HibernateException: More than one row with the given identifier was found: 1, for class: models.B</span></pre></div></div><br />pretty straight forward and quite justified if you ask me.<br />If you do a schema dump (or export) , you won't get \"unique\" constraints anywhere!<br />It seems as if the responsibility for uniqueness is up to the developer in this case. Amazing!!<br /><br />The solution is quite simple.<br />There are several ways to add the unique constraint. <br />In this case, we will want the FK to be unique on the entire table. <br /><br />So simply add the following annotation where the \"@OneToOne\" is specified. <br /><pre>Class B<br />{<br />@Column(unique = true)<br />@OneToOne<br />A a;<br />}<br /></pre><br />I don't need to add this to class A, since class uses @OneToOne with \"mappedBy\" - so it basically takes the definitions from B. <br /><br />You can also add a @UniqueConstraint on the @Entity as follows :<br /><br /><pre>@Table( uniqueConstraints = { @UniqueConstraint(columnNames = {\"a_id\"})})</pre><pre>class B ... </pre><br />There's no need to add the same on class \"A\" as the foreign key will reside in table B - as specified by the \"mappedBy\".<br /><br /><br />You can find a play!framework application the reproduces this quite easily. simply checkout my read version from my google project :  <a href=\"http://mograblog-sample-code.googlecode.com/svn/trunk/test_unique_fk\">http://mograblog-sample-code.googlecode.com/svn/trunk/test_unique_fk</a><br /><br /><br /><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6033554017153698902/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/onetoone-does-not-force-uniqueness.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6033554017153698902"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6033554017153698902"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/onetoone-does-not-force-uniqueness.html",
                        "_title": "@OneToOne - does not force uniqueness!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-cG2Az3vl3Ww/Tc-HystcseI/AAAAAAAAA1I/GGt9u-DTS2Y/s72-c/db_icon.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7542211255599771557",
                "published": "2011-05-05T08:43:00.000-07:00",
                "updated": "2011-05-30T03:33:40.998-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Resolving the \"Bitmap invalid\" in Flip papervision3d effect from efflex."
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-s1hVLZ_HV5A/TcLFXbL5t9I/AAAAAAAAA0o/8NTJDym6dsA/s1600/paper_flip.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"320\" src=\"http://2.bp.blogspot.com/-s1hVLZ_HV5A/TcLFXbL5t9I/AAAAAAAAA0o/8NTJDym6dsA/s320/paper_flip.png\" width=\"277\" /></a></div><h1><span class=\"Apple-style-span\" style=\"font-size: x-large; font-weight: normal;\"><br /></span></h1><h1><span class=\"Apple-style-span\" style=\"font-size: x-large; font-weight: normal;\">Background </span></h1><div><a class=\"mogi-reference\" href=\"http://www.efflex.org/\">Efflex</a>&nbsp;is a library in flex for cool 3d effect.&nbsp;</div><div>A while ago, I got a task at work, to add a \"flip\" effect.&nbsp;</div><div>You can see it now in <a class=\"mogi-reference\" href=\"https://my.incapsula.com/\">Incapsula</a>. Just sign in, add a site, go into this added site, and choose \"settings\". (soon &nbsp;more posts on Incapsula, I will show the effect and add it here).&nbsp;</div><div><br /></div><div>about 6 months ago, we so some instabilities in the effect. The settings page would sometime load empty.&nbsp;</div><div>( image soon )</div><div><br /></div><div>Today, I resolved the issue, after downloading Efflex's code.&nbsp;</div><div><br /></div><div><span class=\"Apple-style-span\" style=\"font-size: x-large;\">The StackTrace</span></div><div><br /><pre>ArgumentError: Error #2015: <b>Invalid BitmapData</b>.<br /> at flash.display::BitmapData/ctor()<br /> at flash.display::BitmapData()<br /> at <b>org.efflex.mx.viewStackEffects.effectClasses::ViewStackTweenEffectInstance</b>/takeSnapShot()[C:\\dev_env\\Projects_SVN\\Incapsula\\branches\\accel\\console\\src\\org\\efflex\\mx\\viewStackEffects\\effectClasses\\ViewStackTweenEffectInstance.as:333]<br /> at org.efflex.mx.viewStackEffects.effectClasses::Papervision3DEffectInstance/takeSnapShot()[C:\\dev_env\\Projects_SVN\\Incapsula\\branches\\accel\\console\\src\\org\\efflex\\mx\\viewStackEffects\\effectClasses\\Papervision3DEffectInstance.as:159]<br /> at org.efflex.mx.viewStackEffects.effectClasses::ViewStackTweenEffectInstance/play()[C:\\dev_env\\Projects_SVN\\Incapsula\\branches\\accel\\console\\src\\org\\efflex\\mx\\viewStackEffects\\effectClasses\\ViewStackTweenEffectInstance.as:240]<br /> at mx.effects::EffectInstance/startEffect()<br /> at org.efflex.mx.viewStackEffects.effectClasses::ViewStackTweenEffectInstance/startEffect()[C:\\dev_env\\Projects_SVN\\Incapsula\\branches\\accel\\console\\src\\org\\efflex\\mx\\viewStackEffects\\effectClasses\\ViewStackTweenEffectInstance.as:228]<br /> at mx.effects::Effect/play()<br /> at com.incapsula.console.effects::FlipWrapper/play()[C:\\dev_env\\Projects_SVN\\Incapsula\\branches\\accel\\console\\src\\com\\incapsula\\console\\effects\\FlipWrapper.as:31]<br /> at mx.effects::EffectManager$/createAndPlayEffect()<br /> at mx.effects::EffectManager$/http://www.adobe.com/2006/flex/mx/internal::eventHandler()<br /> at flash.events::EventDispatcher/dispatchEventFunction()<br /> at flash.events::EventDispatcher/dispatchEvent()<br /> at mx.core::UIComponent/dispatchEvent()<br /> at mx.core::UIComponent/setVisible()<br /> at mx.containers::ViewStack/commitSelectedIndex()<br /> at mx.containers::ViewStack/commitProperties()<br /> at mx.core::UIComponent/validateProperties()<br /> at mx.managers::LayoutManager/validateProperties()<br /> at mx.managers::LayoutManager/doPhasedInstantiation()<br /> at mx.managers::LayoutManager/doPhasedInstantiationCallback()<br /></pre><br /><span class=\"Apple-style-span\" style=\"font-size: x-large;\">Resolution</span><br />You can see in the stacktrace that I downloaded the source as the files point to c:\\ dir.<br />As I added debug prints, I discovered the following<a class=\"mogi-reference\" href=\"http://code.google.com/p/efflex/source/browse/trunk/org/efflex/mx/viewStackEffects/effectClasses/ViewStackTweenEffectInstance.as?r=48&spec=svn48#322\"> line of code</a><br /><br /><pre>snapShot = new BitmapData( contentWidth, contentHeight, transparent, bitmapColor );</pre><br />I also discovered that the \"contentWidth\" was always 0 when I got the error. And then the problem became clear to me : there's no valid bitmap with width = 0 !!!<br /><br />Following the source of \"contentWidth\" I discovered it was taken from the \"width\" property of my \"ViewStack\". And a quick look showed me we initialize the width with : \"100%\" on the viewstack.<br /><br />Changing the 100% to the actual width (which is my case was 741) , the problem was resolved!</div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7542211255599771557/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/resolving-bitmap-invalid-in-flip.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7542211255599771557"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7542211255599771557"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/resolving-bitmap-invalid-in-flip.html",
                        "_title": "Resolving the \"Bitmap invalid\" in Flip papervision3d effect from efflex."
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/-s1hVLZ_HV5A/TcLFXbL5t9I/AAAAAAAAA0o/8NTJDym6dsA/s72-c/paper_flip.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3395088790108611815",
                "published": "2011-05-03T04:11:00.000-07:00",
                "updated": "2011-05-30T03:33:55.805-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "chrome"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Flex + Chrome = good to know stuff"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/-bJ2s9abO3rI/TcLJ8-TOCNI/AAAAAAAAA0w/gwl__kPvhW4/s1600/chrome_flex.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/-bJ2s9abO3rI/TcLJ8-TOCNI/AAAAAAAAA0w/gwl__kPvhW4/s1600/chrome_flex.png\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><br />I've been working with Flex for some time now, but yesterday I was amazed to discover how hard it was to debug flex when working with Chrome.<br /><br />With Firefox, everything is nice, you simply install the&nbsp;<a href=\"https://addons.mozilla.org/en-us/firefox/addon/flashbug/\">FlashBug</a>&nbsp;addon to&nbsp;<a href=\"http://getfirebug.com/\">FireBug</a>&nbsp;and you're good to go. (That is assuming you are NOT using firefox 4 &nbsp;).<br /><br />However, yesterday I had a bug in Flex, that for some reason reproduced steadily only on Chrome.<br />Even though Flex should behave the same on all browsers, there are <a href=\"http://frankieloscavio.blogspot.com/2008/09/google-chrome-and-flex-deep-linking.html\">some incompatibilities</a>.<br /><br />The first thing I tried to do was to see the log.<br />Took me seconds to find an <a href=\"http://livedocs.adobe.com/flex/3/html/help.html?content=logging_04.html\">adobe page explaining about log</a> location.<br />However - the log was EMPTY!<br /><br />I suddenly realized that Chrome is not running my \"debugger\" version of Flex (which is required for log).<br />After a bit of digging, I discovered Chrome comes with a FlashPlayer built-in, overriding the System's FlashPlayer. Following <a href=\"http://www.timo-ernst.net/2010/04/chrome-flash-debugger-not-connecting-to-flexflash-builder/\">instructions</a>&nbsp;I was able to disable the built-in plugin. enabling the debug option with Chrome.<br /><br />Now, I can connect with debugger, and have log prints when running the Flex with Chrome.<br />I like my development environment much better now since Chrome is lighter, and faster.<br /><br />The instruction are pretty simple :<br /><br /><ul style=\"text-align: left;\"><li>go to :&nbsp;<a href=\"chrome://plugins/\">chrome://plugins</a></li><li>click on \"details\".&nbsp;</li><li>find the two flash plugins.&nbsp;</li><li>disable the first one, and make sure the second points to the right plugin.&nbsp;</li></ul><div>That's all.&nbsp;</div><br /><br /><br /><span class=\"Apple-style-span\" style=\"font-size: x-large;\">References</span><br /><br /><ul style=\"text-align: left;\"><li><a class=\"mogi-reference\" href=\"http://www.timo-ernst.net/2010/04/chrome-flash-debugger-not-connecting-to-flexflash-builder/\">Instructions</a></li></ul><br /><br /><br /><br /></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3395088790108611815/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/flex-chrome-good-to-know-stuff.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3395088790108611815"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3395088790108611815"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/flex-chrome-good-to-know-stuff.html",
                        "_title": "Flex + Chrome = good to know stuff"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/-bJ2s9abO3rI/TcLJ8-TOCNI/AAAAAAAAA0w/gwl__kPvhW4/s72-c/chrome_flex.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7345228371094102913",
                "published": "2011-02-21T13:51:00.001-08:00",
                "updated": "2011-02-21T13:56:36.914-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Apache - How to debug problems in Apache"
                },
                "content": {
                    "_type": "html",
                    "__text": "My <a href=\"http://mograblog.blogspot.com/search/label/apache\" class=\"mogi-reference\">fight with apache</a> is getting quite old. <br /><br />Today I finally found a nice way to debug problems without taking my server down. <br /><br /><h1>Check configuration before restart </h1><br />If you run <br /><pre>httpd.exe -t <br /></pre><br />Apache will tell you what is wrong with your configuration. For example - \"unable to load module\" and \"specified procedure could not be found\" will pop up with this command. <br /><br />You can run this command without restarting the server. The server can keep running as usual. <br /><br /><br /><h1>Use dependency Checker </h1><br />If you are unsure what is the problem, and you think your DLLs are missing, you can use <a href=\"http://www.dependencywalker.com/\" class=\"mogi-reference\">Dependency Walker</a>. Simply load the DLL file, and it will check for missing dependencies. <br /><br />I copied the missing dependencies to c:\\Windows\\System32, but I understand you can also try putting them at Apache\\bin folder. <br /><br />Either way, in my case that didn't solve the problem. It seems that sometimes dependencies can be missing, but apparently aren't really used."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7345228371094102913"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7345228371094102913"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2075038291801156182",
                "published": "2011-02-21T13:16:00.000-08:00",
                "updated": "2011-02-21T13:16:36.407-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "apache"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "php"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "What to do when Apache shows your PHP as plain text"
                },
                "content": {
                    "_type": "html",
                    "__text": "I enabled my apache with SSL recently.. Had to change many files.<br />And once I managed to get SSL working, I noticed my PHP configuration was messed up.. <br /><br />I had no idea what to do. <br />My PHP files were shown as Plain text. <br /><br />I searched and searched on the web, when suddenly I figured out the problem without finding it online.. which is exactly why I maintain this blog. <br /><br /><br />The solution is SO SIMPLE it's simply annoying.. <br /><br />Check your conf/mime.types file and make sure you see the lines <br /><pre>application/x-httpd-php php<br />application/x-httpd-php-source phps<br /></pre><br />That solved the problem to me.. <br />Please comment me if it didn't help you - I would love to solve your problems as well. <br />Enjoy."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2075038291801156182/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/02/what-to-do-when-apache-shows-your-php.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2075038291801156182"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2075038291801156182"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/02/what-to-do-when-apache-shows-your-php.html",
                        "_title": "What to do when Apache shows your PHP as plain text"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-748606324297725362",
                "published": "2011-01-29T04:29:00.001-08:00",
                "updated": "2011-01-29T04:32:28.721-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Creating your own repository in GitHub"
                },
                "content": {
                    "_type": "html",
                    "__text": "So far I've been using my own SVN. <br/><br />However, I've been long planning to use Git as source repository. <br /><br />Today, I will show you how to setup your own Git repository. <br /><br /><h1>References </h1><br /><li><a href=\"http://help.github.com/\" class=\"mogi-reference\">GitHub's Tutorial</a><br /><li><a href=\"http://help.github.com/creating-a-repo/\" class=\"mogi-reference\">GitHub's new repository tutorial</a></li>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/748606324297725362"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/748606324297725362"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1898825480137623618",
                "published": "2011-01-01T11:53:00.000-08:00",
                "updated": "2011-01-01T11:54:34.962-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Getting annoyed with Blogger"
                },
                "content": {
                    "_type": "html",
                    "__text": "<h1>Getting Annoyed with Blogger </h1><br />Its starting to be too much for me. Really.. <br />All I want to do is write technical posts on Blogger but I keep bumping to silly problems. <br /><br />The most repeated problem is the support for \"pre\" tags. Especially in cases where I want to copy-paste XML content into my post. <br /><br />It is virtually impossible. <br /><br />The problem lies in the fact that HTML is XML, and if it does not recognize the tag, it simply hides it.. So the following code example <br /><pre><Name>My Name </Name><br /></pre><br />will simply show \"My Name\" string. <br /><br />In order to show the XML tags, you need to manually escape the < character. Using the <br /><<br />escape sequence. <br />Which is annoying by itself. <br />But I got a nice workaround for it - I simply copy paste the XML content to <a class=\"mogi-reference\" href=\"http://www.mograbi.co.il/guy_mograbi/jsps/examples/textEditor.jsp\"> my own text editor</a>. You might need to play around with it before you can get it working fine, but I promise you it is worth the trouble if you have a big XML sequence to copy-paste. For example MAVEN configuration! Or spring file. <br /><br />Well, today I noticed something new and really annoying in blogger. <br />Usually, the \"Compose\" tab gave me a pretty good preview of the output HTML. <br />So when I copied XML content, I always used the \"Compose\" tab to make sure the copy-paste went well. But today I noticed that <br /><br /><br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TR-EIgTNsBI/AAAAAAAAAro/4Kjr-E5Nn1E/s1600/no_preview.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"138\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TR-EIgTNsBI/AAAAAAAAAro/4Kjr-E5Nn1E/s320/no_preview.png\" width=\"320\" /></a></div><br /><br /><br /><h1>Isn't there a better Editor??? </h1><br />So I searched for a better editor. You would think that Google would have a better HTML editor for blogger. Google - the creator of Google Docs. But NO! <br /><br />Recently I had a really <a href=\"http://blog.mograbi.info/2010/12/first-blog-with-ipod-touch.html\" class=\"mogi-reference\">good experience with BlogPress on my IPOD</a>. <br />I really liked their editing, and especially how they handle pictures. <br /><br />Did you notice that blogger always adds the image to the top of the post? And wrapped with tons of picasa code - what's up with that?? <br />The most logic thing would be to append it to the bottom ( the current editing location ), and let everything else be configurable... <br /><br />So I search for BlogPress on the internet, and I got really disappointed to see that it is only an application for mobile devices. <br /><br /><h1>Still missing features </h1><br />The features I am lacking most in blogger are : <br /><li>Built in support for code highlights</li><br /><li>Easy links to other posts - If I want to link to a previous article of mine, it is hell!and even worse, it is not a domain change friendly method</li><br /><br /><br />I am still amazed how much effort they put into they layout mechanism but leave the editor such at such a low level. <br /><br /><h1>A few good words </h1><br />As someone who wrote <a href=\"http://www.mograbi.co.il/guy_mograbi/jsps/examples/textEditor.jsp\" class=\"mogi-reference\">a WYSIWYG editor </a> I have to say, it's hard for me to know how exactly they keep the code so clean.. <br /><br />I can only assume that the \"Edit HTML\" is not the direct HTML interpretation of the \"Compose\" view. In between they probably have a JS to handle spaces and line breaks. <br /><br />I will try to put the same mechanism in my own editor, and see if I have any good result. <br />Maybe I will getting something good enough to replace blogger's editor?"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1898825480137623618/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/01/getting-annoyed-with-blogger.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1898825480137623618"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1898825480137623618"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/01/getting-annoyed-with-blogger.html",
                        "_title": "Getting annoyed with Blogger"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TR-EIgTNsBI/AAAAAAAAAro/4Kjr-E5Nn1E/s72-c/no_preview.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8167754242394492590",
                "published": "2011-01-01T09:28:00.000-08:00",
                "updated": "2011-01-01T09:28:42.636-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "mysql"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Mysql - showing Long timestamps and readable Dates"
                },
                "content": {
                    "_type": "html",
                    "__text": "A while ago I had to find a certain date in the database, but the date column was defined as LONG.<br />I discovered you can easily turn a LONG to a date, using the following syntax : <br /><br /><br /><pre class=\"sql\" name=\"code\">select startTime, FROM_UNIXTIME(startTime / 1000) , UNIX_TIMESTAMP() from LiveSessionDetails limit 1;<br /></pre><br />NOTE that you have to divide the LONG value by a 1000 otherwise you get a blank value."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8167754242394492590/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/01/mysql-showing-long-timestamps-and.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8167754242394492590"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8167754242394492590"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/01/mysql-showing-long-timestamps-and.html",
                        "_title": "Mysql - showing Long timestamps and readable Dates"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4292785565737580497",
                "published": "2010-12-24T23:56:00.001-08:00",
                "updated": "2011-01-01T09:19:06.787-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "ipod"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "iPod experience continued"
                },
                "content": {
                    "_type": "html",
                    "__text": "So I found out several things on the iPod I thought I should share.<br /><br />A better book reader called stanza. Supports <br />multiple  sources for books. For example it let's you add \"pragmatic bookshelf\" as book resource. So you can download books from there directly without using the computer. Makes the whole iTunes sync much easier. <br />Another feature stanza has which I was missing from iBooks is the ability to change fonts by pulling fingers closer/away. Seems so intuitive, since this is the mechanism used for safari and photos, it quite struck me when I realized iBooks didn't have that.<br /><br />Another thing I discovered is that I am unable to download an app called \"whatsapp\". It does to SMS what skype does to phone. I don't really get why it is so popular, and why not simply use Facebook chat but that is probably just because i don't  have it yet. First of all, it does not appear on searches in AppStore. When I ran the same search from another apple gizmo I did find it. So that means the search is filtered. Which is weird as I got the impression that iPhone should have a better compatibility support. But maybe that's just me. <br />When I clock links to download this app - for example when someone shares this app with me - I get a weird popup saying \"the request could not be completed\". Which is even weirder... I would expect something like \"this app does not support...\". Or, even better, let me see the app, but don't let me download it. Because the way things look now it seems as if the AppStore has a bug.<br /><br />Other than that, I must say the experience is great. Don't waste any time and by this device. Connectivity to iTunes and AppStore enriched my life in so many ways. There's good material here, not just junk. Science lectures, educational games, informative and free podcasts and some really good reading.<br /><br /><br /><br /><br />- Posted using BlogPress from my iPhone<br />"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4292785565737580497/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/ipod-experience-continued.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4292785565737580497"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4292785565737580497"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/ipod-experience-continued.html",
                        "_title": "iPod experience continued"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2721085574561586347",
                "published": "2010-12-17T08:00:00.001-08:00",
                "updated": "2011-01-01T09:29:02.090-08:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "ipod"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "First blog with iPod touch"
                },
                "content": {
                    "_type": "html",
                    "__text": "Just got an iPod touch. And I installed some application on it. I am posting this using blogpress as you can see below - the signature is created automatically.<br /><br />The first time experience with iPod touch ( which is exactly like iPhone) is hell. On my desktop my windows recognizes the iPod but iTunes does not. Couldn't find caps lock and had to use it. Spent 2 hours figuring out how to transfer ebooks from computer to iTunes/iPod . Not intuitive at all... Expected more. Had to google everything, and for some I didn't find the answer so easily. 6 hours later, and I think I am all set to go.<br /><br />On the bright side, the camera is awesome and fast. Really fast, it is amazing. And this blogpress is really fun. I can easily add images to blog now, and everything is automatically published in Facebook and twitter . <br /><br /><br /><br /><center><a href='http://blogpress.w18.net/photos/10/12/17/844.jpg'><img src='http://blogpress.w18.net/photos/10/12/17/s_844.jpg' border='0' width='400' height='400' style='margin:5px'></a></center><br />- Posted using BlogPress from my iPhone<br />"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2721085574561586347/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/first-blog-with-ipod-touch.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2721085574561586347"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2721085574561586347"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/first-blog-with-ipod-touch.html",
                        "_title": "First blog with iPod touch"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                "published": "2010-12-14T07:27:00.000-08:00",
                "updated": "2013-04-24T19:14:05.206-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "axis"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Getting really annoyed with Axis2"
                },
                "content": {
                    "_type": "html",
                    "__text": "<h1>Axis 2 - Not Axis! </h1><br />So I got a project while back that invoked SOAP messages, and I immediately thought about AXIS. <br />I used AXIS a long time ago. <br />This time around I decided to use MAVEN to build the project, and as I searched for axis plugins for maven, I was surprised to know I did the wrong search. <br /><br />I took me a while, but it seems that AXIS is deprecated for a long time now, and AXIS2 (just add 2 right after axis) is the updated project you should use. Funny enough, you won't know this by visiting AXIS project's homepage.<br /><br />I finally arrived to the <a class=\"mogi-reference\" href=\"http://axis.apache.org/axis2/java/core/tools/maven-plugins/maven-wsdl2code-plugin.html\">right axis2 maven plugin</a><br /><br />The configuration I like most is the following : <br /><pre><plugin><br />                <groupId>org.apache.axis2</groupId><br />                <artifactId>axis2-wsdl2code-maven-plugin</artifactId><br />                <version>1.5</version><br />                <executions><br />                    <execution><br />                        <goals><br />                            <goal>wsdl2code</goal><br />                        </goals><br />                        <id>create-query</id><br />                        <configuration><br />                            <packageName>mogi.code.test.query</packageName><br />                            <wsdlFile>http://testsystem.fakedomain.com/wsdls/gasquery.wsdl</wsdlFile><br />                            <generateAllClasses>true</generateAllClasses><br />                            <generateServerSide>true</generateServerSide><br />                        </configuration><br />                    </execution><br />                    <execution><br />                        <id>generate-order</id><br />                        <goals><br />                            <goal>wsdl2code</goal><br />                        </goals><br />                        <configuration><br />                            <packageName>mogi.code.test.query</packageName><br />                            <wsdlFile>http://testsystem.fakedomain.com/wsdls/gasorder.wsdl</wsdlFile><br />                            <generateAllClasses>true</generateAllClasses><br />                            <generateServerSide>true</generateServerSide><br />                        </configuration><br />                    </execution><br />                </executions><br />            </plugin><br /></pre><br /><br />Surprisingly enough, if I use different configuration, Intellij has difficulties understanding the output of the plugin. Some classes are undetected, and I get files marked with \"J\" (Java File) instead of \"C\" (Class File).. If the file is marked with C, Intellij detected the class successfully. Otherwise, it just detected it is a Java language file. <br /><br />Another surprise, is that the axis2 tutorial page I linked above, shows an example using \"xmlbeans\" as \"databinding\" method. However, I find the output to be unintuitive. I like the default \"ADB\" method. The output is very intuitive and similar to the required XML structure. <br /><br /><h1>62 Jars </h1><br />The plugin page tells you how to generate the code, but when it comes to compiling it.. well.. At some point I got so many errors, I decided to download AXIS2. <br />It was then I discovered this project has about 62 jars in the dependency lib!<br /><br />In such cases the easiest thing you can do when working with MAVEN is to search NEXUS. <br />I gathered around the necessary dependency list I finally got on my pom.xml. <br /><br /><pre><dependency><br />            <groupId>org.apache.axis2</groupId><br />            <artifactId>axis2</artifactId><br />            <version>1.5</version><br />        </dependency><br />        <dependency><br />            <groupId>org.apache.ws.commons.axiom</groupId><br />            <artifactId>axiom-impl</artifactId><br />            <version>1.2.8</version><br />        </dependency><br />        <dependency><br />            <groupId>axis</groupId><br />            <artifactId>axis-wsdl4j</artifactId><br />            <version>1.5.1</version><br />        </dependency><br />        <dependency><br />            <groupId>org.apache.ws.commons.schema</groupId><br />            <artifactId>XmlSchema</artifactId><br />            <version>1.4</version><br />        </dependency><br />        <dependency><br />            <groupId>org.apache.axis2</groupId><br />            <artifactId>axis2-transport-local</artifactId><br />            <version>1.5</version><br />        </dependency><br />        <dependency><br />            <groupId>org.apache.axis2</groupId><br />            <artifactId>axis2-transport-http</artifactId><br />            <version>1.5</version><br /> </pre><br />The tricky jar was AXIOM. The download I did to AXIS2 (about 20 MB) finally revealed the answer. The artifact I needed was axiom-impl with version 1.2.8.<br /><br /><h1>Code Sample </h1><br />What the AXIS2 project won't show you, is how to use the output. weird huh? <br />Well this is an example <br /><pre class=\"code\" name=\"java\">GasQueryServiceStub qstub = new GasQueryServiceStub(Properties.QUERY_URL);<br /><br /><br />        GetDVApproverList appList = new GetDVApproverList();<br />        GetDVApproverListRequest getDVApproverListRequest = new GetDVApproverListRequest();<br />        getDVApproverListRequest.setFQDN(\"www.mograbi.co.il\");<br />        QueryRequestHeader requestHeader = new QueryRequestHeader();<br />        AuthToken authToken = new AuthToken();<br />        authToken.setPassword(Properties.PASSWORD);<br />        authToken.setUserName(Properties.USERNAME);<br />        requestHeader.setAuthToken(authToken);<br />        getDVApproverListRequest.setQueryRequestHeader(requestHeader);<br />        appList.setRequest(getDVApproverListRequest);<br />        qstub.getDVApproverList(appList);<br /></pre><br />As you see, you use a \"stub\", and you simply invoke the method \"getDVApproverList\" - which is defined in the WSDL. (or documentation). <br />The rest is dictated by method signatures. <br />Now as I stated, the API gives you a 1-1 interpretation of the XML. So from look at the code you can see the XML looks something like <br /><pre><getDVApproverList><br />      <getDVApproverListRequest><br />           <FQDN>www.mograbi.co.il</FQDN><br />           <AuthToken><br />              <Username>myUsername</Username><br />              <Password>myPassword</Password><br />          </AuthToken><br />     <br /></getDVApproverList><br /></pre><br /><h1>Using TCP Monitor for debugging </h1><br />While writing code using SOAP messages, it is very helpful to see the outgoing and incoming messages. <br /><br />For this, there's a nifty tool named \"TCP Monitor\", and there are eclipse and intellij plugins. <br /><br />The idea is that you write the HOST and PORT in TCPMON, (for example www.realhost.com, 80) and then tell it to listen on port 8887. <br />Then in your code you redirect the stub to localhost:8887. <br />The TCPMON catches the message, and redirects it to www.realhost.com:80 while on the way - writing the XML going out, and the one coming in. <br /><br />As you can see in the example I wrote, I gave the stub a different URL. <br /><br />For convenience you can even tell TCPMON to format the messages in XML format. Making it more human readable. <br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/TR9-hlxWmCI/AAAAAAAAArg/VXzykoYEXJc/s1600/tcpmon.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"247\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/TR9-hlxWmCI/AAAAAAAAArg/VXzykoYEXJc/s320/tcpmon.png\" width=\"320\" /></a></div><br /><h1>Handling the xsi:nil=\"true\"</h1><br />At some point I got a lot of errors. <br />As I was looking at the messages with TCPMON, I kept seeing xsi:nil=\"true\" and I was sure this was the problem. <br /><br />I found a lot of articles referring to this, but none giving a solution how to get rid of it. <br />Tried several things, but nothing was nice or successful. <br /><br />Eventually, I found that the errors and this attribute were independent of one another. lucky I guess. However, if you are headed this direction, my advice is stay way. Most probably this is not your problem. <br /><br /><h1>TroubleShooting</h1><pre>org.apache.axis2.deployment.DeploymentException: org.apache.axis2.transport.local.LocalTransportSender<br /> at org.apache.axis2.deployment.AxisConfigBuilder.processTransportSenders(AxisConfigBuilder.java:694)<br /> at org.apache.axis2.deployment.AxisConfigBuilder.populateConfig(AxisConfigBuilder.java:121)<br /> at org.apache.axis2.deployment.DeploymentEngine.populateAxisConfiguration(DeploymentEngine.java:707)<br /> at org.apache.axis2.deployment.FileSystemConfigurator.getAxisConfiguration(FileSystemConfigurator.java:116)<br /></pre>Means you are missing jars. <br />Check jars axis2-transport-http-1.5.3.jar , axis2-transport-local-1.5.3.jar<br /><br /><h1>Conclusion </h1><br />For a mainstream project, I felt it took to many resources. Too many jars are included, while the experience I expect from a MAVEN project is to have a single dependency and it should figure out the rest. <br /><br />I expected more code samples, and more documentations. <br /><br />I hope this post fills in a few gaps in the system."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2598206490603381018/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html#comment-form",
                        "_title": "7 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                        "_title": "Getting really annoyed with Axis2"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/TR9-hlxWmCI/AAAAAAAAArg/VXzykoYEXJc/s72-c/tcpmon.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "7"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3779647458519422972",
                "published": "2010-12-11T14:43:00.000-08:00",
                "updated": "2011-05-21T22:37:13.050-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Chromenia is on its way"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://www.google.com/intl/en/chromeos/static/images/chrome-logo.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"38\" src=\"https://www.google.com/intl/en/chromeos/static/images/chrome-logo.png\" width=\"150\" /></a></div><br /><br /><br /><br />Google had a developers event for Chrome OS - with the addictive slogan \"Nothing but Web\". (A copy of the well known commercial slogan '<a href=\"http://www.youtube.com/watch?v=_oACRt-Qp-s\">nothing but net</a>' mcdonalds commercials)  <br />View it on the chrome <a class=\"mogi-reference\" href=\"http://www.youtube.com/user/googlechrome\">youtube channel</a>. <br /><br /><h1>Steps on Chrome Webstore </h1><br />I also took the chance to see how hard is it to add an application to the webstore. It takes about 20 minutes for the first application, but afterwards I bet you can get it right in 5. <br />You should have a 128X128 icon, a 400X275 screenshot and verify the site is yours - I recommend using google analytics and then registering the site with <a class=\"mogi-reference\" href=\"https://www.google.com/webmasters\">Google's Webmaster</a>. <br /><br />So now you can find <a class=\"mogi-reference\" href=\"http://steps.mograbi.co.il/\">Steps</a> on the webstore.<br /><br /><h1>Highlights From Event </h1><li>Chrome is fast. Really fast.. see the cool video for<a href=\"http://www.youtube.com/user/googlechrome#p/c/6C464642AA716B69/0/nCgQDjiotG0\"> Chrome Speed Tests</a> </li><br /><li>Chrome is considered an OS since it runs directly on the hardware</li><br /><li>All data is encrypted - encryption is built in, so you don't have to worry about hiding personal data while lending the laptop to friends</li><br /><li>Incognito is used for \"Guest\" users - guests don't need to clean cache before they return the laptop. Cache is deleted once you exit incognito mode</li><br /><li>Chrome applications/extensions will be able to run on all browsers</li><br /><li>Cool - chrome OS itself is on the cloud. Changes (for example installing a new application)  in one instance of chrome, are available anywhere</li><br /><li>Automatic updates to everything (OS and applications). No prompts to update.. update happens in the background with bothering you</li><br /><li>Citrix support - allows you to use all the applications you used via citrix so far. Really attractive to big organizations that use it</li><br /><li>Practically no load overhead. Chrome OS loads instantly</li><br /><li>Applications (probably some, not all) will be able to run when you're offline. - For example Google Docs</li><br /><li>Connectivity was discussed in the event. Google announced it funds connectivity on major airlines companies, and deals with Verizon connectivity. read more about <a href=\"http://www.mobileburn.com/news.jsp?Id=11981\">Verizon connectivity with Chrome laptops</a></li><br /><br /><br /><br />Nothing was said about the price, but reading online I see expectations are for a low price. <br />I can even guess a number and say I think the price will be somewhere around 200$ - 400$. While I am quite positive it will be closer to 200$. It may sound ridiculous to you now, but I think that's exactly the effect Google will won't at launch. At 200$ consumers will buy the laptop just out of boredom, giving Google a fair slice of the market. <br /><br />Running a Chrome installation on Windows/Mac/Unix machines will give users the same experience as the Chrome OS. Non the less, it will synchronize with the Chrome OS changes as specified above in the list. This is a clever step by Chrome, as the users know exactly what to expect from the new OS experience, and migrate in small steps probably skipping back and forward until they are convinced they need nothing other than Chrome. Google developers report they have been using Chrome OS laptops as their main computer for about half a year now in order to show it is a realistic view.  <br /><br />It is a custom by now to give away the launched item in developers events. All attendees got a chance to receive the laptop. Google also announced an open registration. So if you think you are a suitable candidate, you can <a class=\"mogi-reference\" href=\"https://services.google.com/fb/forms/cr48advanced/\">apply for a Chrome OS laptop</a> too."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3779647458519422972/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/chromenia-is-on-its-way.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3779647458519422972"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3779647458519422972"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/chromenia-is-on-its-way.html",
                        "_title": "Chromenia is on its way"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-768093617416009388",
                "published": "2010-11-19T08:47:00.001-08:00",
                "updated": "2010-11-19T09:05:47.407-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Using GitHub to contribute open source projects"
                },
                "content": {
                    "_type": "html",
                    "__text": "A lot of open source projects are currently using <a class=\"mogi-reference\" href=\"http://github.com/\">GitHub</a> as their source repository. As they should. <br /><br />Git gives you a lot more than SVN. <br /><br /><h1>Installing GIT </h1><br />First thing is first - you will to install GIT.<br /><br /><h1>Connecting to GIT </h1><br />Assuming you already have a git account, you will need to check if you are able to establish connection to it. <br /><br />you can run <br /><pre>ssh git@github.com<br /></pre><br />in order to check that.<br />If you don't have SSH (windows users) - use the built-in \"git bash\" console instead. For windows 7 simply click the windows key and type \"git bash\". SSH command should be recognized there. <br /><br />generate a key using the command <br /><pre>ssh-keygen -t rsa -C \"my@email.com\"<br /></pre><br />For windows users - I suggest using the default location of the file, since if you don't, you will need to run \"ssh-add\" that didn't work for me. <br /><br />once you're done, go to your github/account section, and add the key. Copy the content of the \"key.pub\" file to the console. You can leave the title blank. <br /><br />now recheck connection with <br /><pre>ssh git@github.com<br /></pre><br />Hope this works for you, because it worked for me, and I don't have troubleshooting for you. <br />However, if it didn't check out my references below/at reference-plugin on the right. <br /><br /><h1>Forking the project </h1><br /><br /><br />The standard way to contribute another project - one that you don't have permissions for - is to fork it. Go to the project in github and simply press \"fork\" button that looks like this  <a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TOatqSnoOII/AAAAAAAAArQ/V4Y39jKjicc/s1600/minibutton_icons.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TOatqSnoOII/AAAAAAAAArQ/V4Y39jKjicc/s1600/minibutton_icons.png\" /></a><br /><br />This will create a copy of that project for your account. <br />Now there are only 3 more things left to accomplish <br /><li> Commit a change locally and submit to fork </li><br /><li> Submit your changes to original project </li><br /><li> Update your fork from original project </li>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/768093617416009388"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/768093617416009388"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TOatqSnoOII/AAAAAAAAArQ/V4Y39jKjicc/s72-c/minibutton_icons.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6568548817448605693",
                "published": "2010-11-10T07:17:00.001-08:00",
                "updated": "2010-11-10T07:18:01.842-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Own CA - Openssl"
                },
                "content": {
                    "_type": "html",
                    "__text": "openssl req -newkey rsa:2048 -nodes -keyout ca.key -out ca.csr<br />openssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key<br />openssl x509 -req -days 365 -in client.csr -out client.crt -CA ca.crt -CAkey ca.key -CAcreateserial -CAserial ca.srl"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6568548817448605693"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6568548817448605693"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5430148522885820309",
                "published": "2010-10-24T23:50:00.000-07:00",
                "updated": "2010-10-24T23:50:02.742-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Mograblog's Birthday - about blog popularity"
                },
                "content": {
                    "_type": "html",
                    "__text": "Ok, I am 4 days late.. My blog is 1 year old. <br />This is a celebration post, or maybe it is not? <br />In the last 3-4 months, 1000 people entered my blog.  <br />Even though the blog exists for almost a year now, I've been monitoring it only since blogger integrated with <a href=\"http://www.google.com/analytics\" class=\"mogi-reference\">Google Analytics</a>. So roughly speaking, in the last year I probably had around 2500 viewers. <br /><br />Is this a good thing or a bad thing?<br /><br /><h1>Making your post popular </h1><br />If you ask Google, you will get a lot of junk advices like \"use provocative titles\". <br />I don't like \"selling\" content, I prefer quality content. That's why I liked reading  <br /><a href=\"http://www.pronetadvertising.com/articles/making-your-blog-popular-through-content.html\" class=\"mogi-reference\">Neil Patel's post about writing quality blogs</a><br /><br />As a technical writer, the posts I like most are those with Exceptions on them, and the reason for that is that searches are pretty much accurate. <br />Looking on my statistics/traffic sources, I seldom find queries that return very few results, somewhere between 1-10 results.<br />Here is an example for <a href=\"http://www.google.co.jp/search?q=_mysql.c:34:24:+fatal+error:+config-win.h:+No+such+file+or+directory&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:ja:official&hl=ja&client=firefox-a\" class=\"mogi-reference\" target=\"_blank\"> a very specific search that returned a single result</a><br /> <br />Other posts might be less accurate. For example, if you try searching for \"flex horizontal gap\" you will get about 2 million results. However, I try to keep my content very targeted and so this post gets a lot of hits. (actually, that is my most popular post). <br /><br />And last but not least, there is the occasional luck. I wrote a post about a very documentation and called it \"when documentation goes wrong\". It is the second most popular post here, and it gets a lot of attention. It even gets external links. <a href=\"http://flexlearner.com/2010/10/25/mograblog-when-documentation-goes-wrong-blazeds-turnkey/\" class=\"mogi-reference\">external link to my \"when doumentation goes wrong\" post, from flexlearner site</a> <br /><br />There are some posts that unfortunately are not indexed correctly. While writing about \"google instant\", I used some greek words as an example for search phrases, and I got indexed in some greek dictionary as reference. <br /><br /><h1>Getting paid for it </h1><br />Someone suggested to me the other, that I should quit work and start blogging full time.. <br />He was joking, but some might not know, there's no real money in it. <br />Statistics say that in order to get 10$ you need to get 10K impressions! <br />So currently, Mograblog can earn a 3 bucks a year!<br /><br />I use Google Ads campaign for <a href=\"http://steps.mograbi.co.il\" class=\"mogi-reference\">my steps application</a>, and I have to say, it's worth it! It's cheap and gets the job done. <br />For words \"todo list\", I paid less than 80$, and got 6K impressions and more than a hundred visits. I think that deal is fair, but if you don't you can simply change the configuration and pay as much as you want to. If you do the math, you get several visits for 4$ per day. I think it is nice. <br /><br />So putting all these factors into account, you will need hundred of thousands of entries per month in order to see serious sums of cash, and even then - you won't be able to quit your day job. Making money off of blogs is not for the weekend writer. <br /><br /><h1>My Tips </h1><br />  <br />And finally, here are my tips. <br /><li> Keep quality content. Keep to the point and have specific title. Titles affect your search rating. </li><br /><li> Be specific with links. Your link quality affects your blog rating. </li><br /><li> Don't spread links to your blog. It might get you traffic, but it might lower your rating with google and such. You're better off without unreliable traffic sources. </li><br /><li> Pay attention to what people are reading, and what they are looking for. Try to answer your audience needs. Use Google analytics for it. </li><br /><li> I read somewhere that there's an ideal length for posts, and I think so too. Don't advertise a lot of short posts, and don't linger on each one either. Say what you have to say. Maybe link to other resources you found while researching </li><br /><li> Organize your post. I like to have a \"reference\" section. So <a href=\"http://www.google.com/url?url=http://mograblog.blogspot.com/2010/08/my-first-blogger-gadget-widget.html\">I wrote the reference gadget </a> for that</li><br /><li> Write several posts per month. Not too much, but keep some fair minimum. A blog post is partially rated by your activity. I always have some posts in \"draft\" just in case. </li><br /><br /><br />There are still things that I would like to know. <br />If I have a post that never gets hit, should I remove it?<br />I didn't find any resource specifying what you should do. <br />My opinion is - if after a year, the post didn't get hits, remove it.. The internet has enough junk as it is - and it has nothing to do with your blog's popularity. <br />And if you are in \"archiving\" mood, I suggest you simply unpublish it. <br />Technically, I would disallow robots to access it, but there's no access to robots.txt or a nice access to meta tags in blogger.  <br /><br /><br /><h1>Conclusion </h1><br />I started by asking myself is 1000 visits per 3 months is a good thing for your blog.<br />Money-wise, it is not. However, since I am the sole result in some searches, I have to say, I am very pleased. <br /><br /><br />Well, you've heard my year's worth education. Lets see what next year will spring upon mograblog. Have a nice day."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5430148522885820309/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/mograblogs-birthday-about-blog.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5430148522885820309"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5430148522885820309"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/mograblogs-birthday-about-blog.html",
                        "_title": "Mograblog's Birthday - about blog popularity"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1997345219288720928",
                "published": "2010-10-21T03:07:00.000-07:00",
                "updated": "2010-10-21T03:08:47.705-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "nginx"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Quickly Solving NGNIX's \"The system cannot find the path specified\" in Windows"
                },
                "content": {
                    "_type": "html",
                    "__text": "I just downloaded nginx for a bug/feature to simulate the production environment, and I immediately got : <br /><br /><pre>[alert]: could not open error log file: CreateFile() \"logs/error.log\" failed (3: The system cannot find the path specified)<br />2010/10/21 11:39:49 [emerg] 4236#1936: CreateFile() \"C:\\dev_env\\Projects_SVN/conf/nginx.conf\" failed (3: The system cannot find the path specified)<br /></pre><br />The solution to the problem is to open the cmd console with the command <br /><pre>cmd /D<br /></pre><br />But let me explain what is going on <br /><br /><h1>Why is this happening? </h1><br />As you can see, nginx on my computer refers to <br /><pre>C:\\dev_env\\Projects_SVN<br /></pre>as my root directory. <br /><br />I am a developer, and it is natural for me to access my projects' root directory more than any other. So I created an AutoRun described at my <a href=\"http://mograblog.blogspot.com/2010/07/few-days-ago-i-wanted-to-change-folder.html\" class=\"mogi-reference\">Settings AutoRun for CMD and Java Runtime collision problem</a><br /><br />actually - the same solution applies in that post too.. So reading one of these should explain what is going on. <br /><br />When nginx runs, it probably opens new cmd console, or something of that sort and tries to navigate to it directory.. but due to my AutoRun command, nginx is confused and not looking at the correct root directory on startup. <br /><br />Adding \"/D\" - prevents running the AutoRun script, hence eliminates the problem immediately. <br /><br />problem solved."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1997345219288720928/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/quickly-solving-ngnixs-system-cannot.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1997345219288720928"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1997345219288720928"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/quickly-solving-ngnixs-system-cannot.html",
                        "_title": "Quickly Solving NGNIX's \"The system cannot find the path specified\" in Windows"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7227013278867435273",
                "published": "2010-10-14T14:02:00.000-07:00",
                "updated": "2010-10-15T00:12:14.244-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "django"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Django for Windows in 5 minutes"
                },
                "content": {
                    "_type": "html",
                    "__text": "This is a getting started post with Django. <br />I gathered instructions from several resources to this Windows specific tutorial. <br />By the end of the post you will have your first Django app running. <br /><br /><h1>Steps</h1><li> Install python </li><br /><li> Make sure python is in your path </li><br /><li> verify by running \"python -h\" </li><br /><li> Download Django </li><br /><li> Extract it to some folder </li><br /><li> Run \"setup.py install\" - distributes the modules and libraries to python path</li><br /><li> Add \"django\\bin\" folder to your path </li><br /><li> Verify all steps with command \"django-admin.py help\"</li><br /><li> Create an \"app\" folder to contain the applications you will write  - similar to rails_app in rails</li><br /><li> Start a new django app with the command \"django-admin.py startproject mysite\"</li><br /><li> Do not use names like \"Django\" and \"test\" for your project. Treat them as keywords.</li><br /><li> Start the server by running : \"python manage.py runserver\" in your \"mysite\" folder</li><br /><li>If everything worked well you should see a \"it worked!\" page</li><br /><li> Configure Database in file \"settings.py\" - follow documentation in file </li><br /><li> For DB beginners - Django recommends to simply write sqlite3 in the settings.py as it requires no other configuration/installation <br /><quote><br />If you're new to databases, we recommend simply using SQLite (by setting ENGINE to 'django.db.backends.sqlite3'). SQLite is included as part of Python 2.5 and later, so you won't need to install anything else.<br /></quote><br /></li><br /><li> For mysql - use \"create database <i>name</i>\" to create the database</li><br /><li> download compiled version of mysqldb model for your python version. This will be your hardest step ever! getting mysql to work with python is known as a nightmare - so make sure you get the correct download. Settle for nothing else but a file called \"MySQL-python-1.2.3.win32-py2.7.exe\" - where the windows version (win32) should match yours, and py2.7 - the python version - should also match yours. Otherwise the installer won't find python in the registry. <br />I spent 5 hours trying to manually install this - see troubleshooting below - and still couldn't do it.. too many files missing (header files) and versions incompatibility</li><br /><li> run command \"python manage.py syncdb\"  - this will verify you create the database and update the database with tables needed for full django functionality - and it will create a super user</li><br /><br />If you reached this point, you're good to go. <br />The next step for you is to read the <a href=\"http://www.djangobook.com/en/2.0/chapter03/\" class=\"mogi-reference\">Django Book from chapter 3</a><br /><br />Below you will find troubleshooting and some rails / django comparison.<br /><br /><h1>Django VS. Rails</h1><br /><h2>Applications and Projects </h2>I came across a section the <a href=\"http://docs.djangoproject.com/en/dev/intro/tutorial01/#creating-models\" class=\"mogi-reference\">official django tutorial</a> that explains a basic difference between Rails' application to Django application. <br /><br />When you create a project in Django - and setting the DB and what not - you actually get a start point to multiple applications - whereas in Rails you need to redefine everything for each application. <br /><br /><h2>No Controllers in Django - the MTV model VS. MVC model </h2><br />Another thing I came across while reading the django book is the different of MVC model and MTV model.<br />Rails/Play developers may know the MVC model - Model View Controller. <br />In Django the model is MTV : Model Template View.<br /><br />Template in Django is a View in Rails/Play. <br />View in Django is a Controller in Rails/Play. <br /><br />Reading this certainly untied a knot in my head.. <br />The first time, it seemed to me like the Views class is redundant, and when I finished the django \"first application\" tutorial, I was angry I couldn't find the part about Controllers, and assumed they mish-mashed the controllers with the views - which is ugly. <br />So learning about the MTV model certainly straightened things out for me. <br /><br /><h2>Template in Django does not support Python </h2><br />In Rails the templates support all Ruby statements. <br />In Java, JSP support all Java code. <br /><br />However, it seems in Django, the templates do not support all python statements. <br />You can read all about it in <a href=\"http://www.djangobook.com/en/2.0/chapter04/\" class=\"mogi-reference\"> chapter 4 of django book </a> <br /><br /><br /><h1>Troubelshooting </h1><br />If you are trying to execute a django command but get <br /><pre>ImportError: No module named django.core </pre>This means you have python installed and you extracted django, but you did not run \"setup.py install\" - a script in django home directory. <br />This action copies the required libraries and modules to python path.<br /><br /><br /><h1>Installing mysql module for python </h1><br />I rate this mission as : impossible for the everyday developer on windows. <br />Here are several of the problems I got along the way : <br /><li>_mysql.c:34:24: fatal error: config-win.h: No such file or directory</li><br /><li>serverKey = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, options['registry_key'])<br />WindowsError: [Error 2] The system cannot find the file specified</li><br /><li>error: Unable to find vcvarsall.bat</li><br /><br />Save yourself the headache - <br />Search for a \"download compiled python 2.7 mysql for windows\"<br />change the query to your python version. <br />Do not stop until you find a file named <br />\"MySQL-python-1.2.3.win32-py2.7.exe\"<br /><br />again - version might be different. <br /><br />Do not go on the mission of installing it by yourself, it is simply a nightmare."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7227013278867435273/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/django-for-windows-in-5-minutes.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7227013278867435273"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7227013278867435273"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/django-for-windows-in-5-minutes.html",
                        "_title": "Django for Windows in 5 minutes"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3295465944323380316",
                "published": "2010-09-28T05:51:00.001-07:00",
                "updated": "2010-09-28T05:52:27.386-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Caused by: java.lang.IllegalArgumentException: node to traverse cannot be null!"
                },
                "content": {
                    "_type": "html",
                    "__text": "Yet another hibernate mistake I ran into today. <br />when you get <br /><pre>Caused by: java.lang.IllegalArgumentException: node to traverse cannot be null!<br /></pre><br />This error basically means you don't have \"from\" clause in your query.<br /><br /><h1>Pitfall </h1><br />check that you are using \"createNamedQuery\" and not \"createQuery\"."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3295465944323380316"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3295465944323380316"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1747586892117119421",
                "published": "2010-09-28T03:10:00.001-07:00",
                "updated": "2014-02-28T02:15:53.992-08:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "hibernate"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "javax.persistence.PersistenceException: org.hibernate.PropertyAccessException: could not get a field value by reflection getter"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\" class=\"mograblog\"> <p>  I have worked with hibernate now for 6 years. and yet..  </p> <p>  Today I got this exception :  </p>  <pre><br />javax.persistence.PersistenceException: org.hibernate.PropertyAccessException: could not get a field value by reflection getter of my.pkg.ClassName<br /> </pre>  <p>  which was caused by   </p>  <pre><br /> Can not set java.lang.Long field ... to java.lang.Long<br /> </pre>  <p>  sounds strange and unclear, but the solution is pretty simple  </p>  <h2> The Problem </h2> <p>  The problem is in the query. <br />  The query I was trying to execute was something like :<br /> </p> <pre>Select * from A a where a.b = :b_val</pre> <p>  B is another entity with an id. <br />  When I tried to set the value for \"b_val\" I did the following :<br /> </p> <pre><br />B b = getB();<br />Query q = getQuery(); <br />q.setParameter(\"b_val\", b.id); <br /> </pre> <p>  However, this is wrong. What I should be doing is :<br /> </p> <pre>q.setParameter(\"b_val\", b);</pre> <p>  And that is because Hibernate handles the foreign key, extracts the ID from \"b\" and takes it on from there.<br/>  But sometimes, as in this case, you don't have the Object \"b\" but only the ID.    So how do you override hibernate in this scenario?  </p> <h2>The Solution </h2> <p>  In case you only have the ID, you should modify the query as so:<br /> </p>  <pre><br />  Select * from A a where a.b.id = :b_val<br /> </pre> <br /> note how I specify \"id\" after \"a.b\".<br /> This will generate the results you were after </div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1747586892117119421/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/javaxpersistencepersistenceexception.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1747586892117119421"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1747586892117119421"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/javaxpersistencepersistenceexception.html",
                        "_title": "javax.persistence.PersistenceException: org.hibernate.PropertyAccessException: could not get a field value by reflection getter"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-764650131207699259",
                "published": "2010-09-14T05:20:00.001-07:00",
                "updated": "2010-09-14T05:36:26.093-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Slimming your SWF file"
                },
                "content": {
                    "_type": "html",
                    "__text": "I got a mission at work - to make our SWF file smaller..<br /><br />Getting rid of the \"obvious\" stuff like \"Embedded Images\" and so on - we managed to remove about 200K. but still our application was about 1.7M(!) and we were inspired to bring it down to 500K. <br /> <br />So after that we turned to look on our 3rd-parties, as we have heard about RSL. <br />We are using <a href=\"http://code.google.com/p/fxspy/\" class=\"mogi-reference\">FlexSpy</a> for development (like a firebug for flex - I highly recommend this). <br />When you look at flexSpy.swf, you see about 800K. <br />So immediately we thought that FlexSpy adds about 800K to our compiled swf. Turns out this is untrue. <br />To test this, you should create a blank project that alerts \"hello world!\". <br />When you run it, note the the SWF is already 70K. <br /><br />Now add flex spy.. <br />Simply write somewhere <br /><pre>FlexSpy.show();<br /></pre><br />make sure to import the class and place the library in your path (libs folder for FBuilder). <br /><br />Rerun this and see that the SWF is not only 160K. <br />So FlexSpy's SWF is 800K, but only adds about 90K to your project. <br /><br />This is probably due to common code - like the flex framework. (which is known to add a lot). <br />The solution to common code is usually <a href=\"http://livedocs.adobe.com/flex/3/html/help.html?content=rsl_09.html\" class=\"mogi-reference\"> RSL. </a> Which does exactly that - externalizes shared code. The benefit is of course that common code remains cached, while the application downloads (if modified) - hence the client downloads only the parts that were modified ==> optimizing the download. <br /><br /><h1>The first thing you should do, before RSL </h1><br />However, I \"discovered\" that before RSL you should switch \"debug\" to false on the compiler arguments. simply add <br /><pre>-debug=false<br /></pre><br />We had about 1.7M output, and this reduced it to 900K. (800K reduction). <br /><br /><h2>Side Effects </h2><br />As a side effect, the debug=false caused a malfunction to the application. <br />After a couple of hours of research we discovered that some of the MetaData was gone. <br />It was not so obvious for us that debug=false causes this. <br /><br />The solution was simple - add the following to compiler arguments <br /><pre>-keep-as3-metadata+=OurAnnotationName<br /></pre><br />The \"+=\" means we are simply adding to default settings, so no harm there. <br />Also - don't be alarmed by \"as3\", we use flex4. <br /><br />Once we added \"OurAnnotationName\" to the compiler arguments, the metadata was available again."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/764650131207699259"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/764650131207699259"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6500509042479054763",
                "published": "2010-09-08T14:15:00.000-07:00",
                "updated": "2010-09-14T05:20:40.821-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Instant Google"
                },
                "content": {
                    "_type": "html",
                    "__text": "Check it out - you type something in google and the results immediately appear - no need for enter.. no delay! <br /><br />another Google win. <br /><br /><li><a href=\"http://www.google.com/instant/#utm_campaign=launch&utm_medium=van&utm_source=instant\">Google Instant Homepage</a></li><br /><br /><li><a href=\"http://www.facebook.com/#!/Google\">Google in facebook</a></li><br /><br />View the Lauch Event (1 hour 30 minutes) on Youtube<br /><br /><object width=\"640\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/i0eMHRxlJ2c?fs=1&hl=en_US&color1=0x402061&color2=0x9461ca\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/i0eMHRxlJ2c?fs=1&hl=en_US&color1=0x402061&color2=0x9461ca\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"385\"></embed></object><br /><br /><h1>Why ? </h1><br />Well it seems a query wastes about 25 seconds on average. <br /><li> 9 seconds to type the query</li><br /><li> 1 second for Google server to dispatch the results and render them on screen </li><br /><li> 15 seconds to choose the result we want </li> <br /><br />Google keeps trying to make our search faster according to their slogan : \"never underestimate fast\". <br /><br /><h1>1 second on result fetch and render </h1><br />Google made this faster with Google Chrome that renders the results very fast, and making their search algorithm better and faster. <br /><br /><h1>9 + 15 second to type and choose </h1><br />This is the main bottleneck. Google Instant is here to resolve that problem. <br />The results appear as you type in.. But wait a minute! <br />If I type \"w\" - it won't search for \"w\", but instead - Google will use their predictions engine, and they will predict what I want to query about (for \"w\" this is \"weather\"),and it will search that(!) and not what is currently typed in. <br /><br />The prediction mechanism is here for quite a while now - but up until now the prediction would simply show up in the drop box.  <br />Lets break it down and have a closer look.<br /><br /><h3>The three mechanisms working in Google Instant </h3><br /><li> Instant Results </li> <br /><br />The results appear as you type in.Type \"w\" and get results. <br /><br /><li> Predictions </li><br /><br />The best search for this feature is the one you don't really remember. For example - a book that you can't really remember its title. <br />In the launch event they take \"the girl with the dragon tattoo\" , and they type \"girl dragon\" and Google predicted they want results for \"the girl with the dragon tattoo\".<br /><br /><li> Scroll to Search </li><br /><br />Lets say we are searching for something that has multiple meanings - we know we will get those different meanings in the drop box, that I can select by pressing the \"down/up\" keys. <br />Once I click those keys - Google Instant will do the search for the currently selected option. <br />For example if I search \"greek\", the drop down will give me the following options : <br /><li> greek </li><br /><li> greek gods </li><br /><li> greek alphabet </li><br /><li> greek myhtology </li><br /><li> greek names </li> <br /><br />Lets say I wanted \"greek mythology\" - I can simply press down 4 times and I will see results without pressing \"Enter\".<br /><br /><h3>what the launch event won't tell you </h3><br />For some reason, other main features were not mentioned or were not given the correct spotlight. <br /><br /><li> Spell correction </li><br /><br />The predictions above include \"spelling correction\". try typing \"gurl dregon\" and you will see the result for \"girl dragon\" which is predicted to \"the girl with the dragon tattoo\".<br /><br /><li>Key shortcuts</li><br /><br /><b><u> Tab for auto-complete </u></b><br />As you type in the query - the prediction will try to auto-complete the query. If the auto-complete is correct, you can simply type \"Tab\" and move on to the next word in the query. <br />Try typing \"addam\" - and you will get a prediction for \"addams family\", so press \"Tab\" and then space and add \"mu\" - this will auto-complete to \"musical\".<br />With 7 key-strokes you searched for \"addams family musical\". <br /><br /><h1>Support </h1>The launch event specifies that \"instant\" will be supported in browsers : Chrome, FF, Safari, IE8 over the next few months.<br />and countries : U.S., U.K., France, Italy, Germany, Spain and Russia - for all users that are signed in. <br /><br />Google instant is not available on mobile phones, but it will be soon according to the launch.<br /><br />The classic Google Support is still supported. Google Instant simply tries to make your search faster, but if you prefer to, you can simply ignore it or even switch it off.  <br /><br /><b> Bandwidth support </b> - It seems that Google Instant auto detects your bandwidth, and if your bandwidth is low - Google Instant will not work. <br />This means - if you're in a cafe with a good internet connection, you'll have \"instant\", but if then you go to another place with a worse connection, it will be disabled. If you go back to the cafe, you'll have \"instant\" again. <br /><br /><h1>Saving time </h1><br />Google estimates that each user will save 2-5 seconds per query - which means that overall, summing over all users (over 1 billion each week), you will save 11 hours every second. <br />That is an amazing result. <br /><br /><h1>Q&A </h1><br />You can send question to Google on search2010@gmail.com<br /><br /><h1>Concerns </h1><br />Since Google has \"search history\" and \"impressions\" support for search statistics, some concerns were raised in the launch to as how this will affects those statistics.<br />If you did not get it yet - every key stroke you perform will, technically, be a search. So if you type a 10 letter word (without using auto-complete) you, theoretically, made 10 searches. Will those search phrases be included in your history? and what about impressions - that affect your benefit from AdSense. <br /> <br />Google's answer to this was that in Instant they have a 3 seconds delay requirement in order to count that search as impression and history. This means - if you typed a search phrase without \"enter\" and you paused for 3 seconds - that search will be in your \"history\" and added to Google's impressions statistics. <br />This is best put in the article <a href=\"http://www.fastcompany.com/1687976/google-instant-impressions-3-seconds-sneeze\" class=\"mogi-reference\">How Instant New Rule Makes a Sneeze into an Impression</a><br /><br />A lot of concerns were raised to SEO and page ranking.. even though their rules are the same, the behavior of the user is different - so the concern is legitimate. <br />However - Google does not seem to be concerned about that at all, and someone even suggested that the results for all of the above will be better - since the search is more accurate and since there will be more searches, we will see an increase on all statistics. <br /><br /><h1>Conclusion </h1><br />It seems that Google Instant is an empty shell that simply binds some powerful features made by Google over the years - where the most powerful so far is \"prediction\". <br />Indeed, prediction's effect is increased, maybe to a maximum, when Instant is activated. <br /><br />Technologically speaking, Instant is just Ajax.. so there's nothing to be proud of that.. However the power and algorithm running behind each key-stroke is pretty mesmerizing. <br /><br />I also think Google is right. Instant will benefit our experience, and will become a \"must\" on every search engine. <br /><br /><h1>Funnies </h1><br />What made me laugh during the launch was the result \"facebook\" that appeared each time they clicked \"f\". <br /><br />Another thing was the question about \"black list for words\"  - which refers to child protection. (since we don't want dirty results appearing as our children type). <br />The question was raised by someone named \"slutskin\" - and her name would simply no appear on \"Instant\"."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6500509042479054763/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/instant-google.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6500509042479054763"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6500509042479054763"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/instant-google.html",
                        "_title": "Instant Google"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-388988248300964079",
                "published": "2010-09-08T09:21:00.000-07:00",
                "updated": "2013-09-25T02:10:28.541-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "joomla"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "apache"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Installing Joomla - Good times ahead"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"> <h2> Setting up your Joomla environment </h2> <p>  After making my life easier by learning Rails, I decided it was time to learn Joomla. <br />   First thing was to install it.. <br/>  now if your environment is clean - no problem, you download WAMP or XAMPP or some other AMP and you're more or less good to go. <br />  But when you already have Apache and MySQL installed, you get a bit unsure - and you should, because there's no documentation. <br />  Finally, when you're me, and you run into every possible pitfall, you should be very concerned. <br /> </p>   <h1>Download Joomla Pitfall </h1><br /> <p>  First pitfall is when you download Joomla. <br />  Look for a link with \"Full Package\" and not \"Path\". <br />    In order to be 100% percent sure you got the correct zip, try to see if you have the file \"installation/index.php\" - if you don't, you should find another download. <br />    <a href=\"http://www.joomla.org/download.html\" title=\"Download Joomle Here\">I downloaded Joomla from here</a> and I chose \"Full Package\". <br />  I still don't know how to upgrade Joomla, but from what I read so far, it will be something like downloading the zip, and then uploading it to the site I choose, using the existing Joomla administration API. (But I might be wrong.. wait for my post about upgrading pitfalls :) )<br /> </p> <h2>Install PHP Pitfall </h2> <p>  PHP will do most of the work for you, if you only know how to tell it. <br />  For windows - when you install PHP, you must enable MySQL support. By default it will not be enabled. <br />   If you don't enable it - don't worry, you can always run installation again, and there's not even a need to uninstall first. <br />   Enabling PHP with MySQL support will automatically configure Apache for you, and PHP. <br />  PHP is configured with php.ini file. <br />  If you want to make sure configuration went fine, open that file and look for MySQL. <br />   if you find php_msql.dll - don't be confused, it's not that. msql is another database. <br />   The ini file should have the following text <br />  <pre><br />[PHP_MYSQL]<br />extension=php_mysql.dll<br />  </pre>     If you see that, than your PHP is configured correctly. <br /> </p> <h2>Configure Apache </h2> <p>  Technically, the PHP installation should've taken care of everything. BUT, sometimes it won't... <br />  In my case it didn't. <br />  Once PHP is installed - you should be checking if you can restart Apache. <br />  If something doesn't load correctly, make sure that the php_mysql.dll is loaded, and if that doesn't happen, try loading \"libmysql.dll\" as well. <br />  All in all you should have something like this in httpd.conf (or some other conf embedded)<br />     <pre><br />#BEGIN PHP INSTALLER EDITS - REMOVE ONLY ON UNINSTALL<br />PHPIniDir \"D:/dev_env/PHP/\"<br />LoadModule php5_module \"D:/dev_env/PHP/php5apache2_2.dll\"<br />LoadModule php5_module \"D:/dev_env/PHP/libmysql.dll\"<br />LoadModule php5_module \"D:/dev_env/PHP/php_mysql.dll\"<br />#END PHP INSTALLER EDITS - REMOVE ONLY ON UNINSTALL<br />  </pre>    The location will be varied according to you installation. <br /> </p>  <h2>Something with Apache still doesn't work smoothly? </h2> <p>  In windows you might get file permissions problems. <br />  The easiest and most recommended way is to move the folder htdocs (sometimes called \"www\"). <br />  That is the folder that apache approaches to get static files. <br />   In order to tell apache to move it, you should modify 2 locations in httpd.conf. simply look for the phrase \"htdocs\" (or \"www\"). You should find it around \"DocumentRoot\" and  \"<Document\" elements. <br />  <h2>Some tests you can perform along the way </h2> <p>  Basically there are 2 steps.. <br />  <ol>   <li>1. Install PHP </li>   <li>2. Configure PHP with Apache. </li>  </ol>  I don't even count the \"extract Joomla zip\".. come on.. <br />  So if the shi%^& hits the fans, and you don't know what's wrong any more, here are some small tests you should do <br />  <h3>Test Apache Configuration to htdocs </h3>  First go to http://localhost/<br />  You should see the infamous \"it works!\". <br />  If you don't, then something is wrong if you DocumentRoot or Document mapping. <br />   Since I have default redirection to www.mograbi.info I had to write a custom redirection to Joomla like this : <br />  <pre><br /><VirtualHost *:80><br />  ServerName joomla.mograbi.info<br />  ServerAlias www.joomla.mograbi.info <br /></VirtualHost><br />  </pre>  This small piece of code simply tells apache \"don't use the default Virtual Server\" - and that makes it fallback to htdocs - which is the default of all defaults.. :) <br /> </p> <h3>Make sure PHP is working </h3> <p>  Now that you know your htdocs is configured correctly, you might want to test that the PHP configuration is ok. <br />  You can write a simple piece of PHP code like this <br /> </p><pre><br /><html><br /> <head><br />  <title>PHP Test</title><br /> </head><br /> <body><br />  <?php echo '<p style=\"background-color:#00ff00;\">Hello World</p>'; ?> <br />  <?php phpinfo(); ?><br /> </body><br /></html><br /></pre> <p>  This will print a stylish table of all the PHP installation properties. <br />   If you don't see that - I recommend you simply rerun the PHP installation again. It's very friendly. <br /> </p> <h3>Make sure the Mysql extension for PHP is installed correctly </h3> <p>  Once you made sure php is running smoothly, you can test if php-mysql is configured by adding this code to the code above <br /> </p>  <pre><?php echo mysql_connect ('localhost', '<username>', '<yourwebuserpassword>'); ?></pre> <p>  If mysql is not configured correctly, you'll get nothing, but if it is installed you will get something like \"Resource id #2\" - where \"2\" can be another number. <br /> </p> <h1>Know when you're going the wrong way </h1> <p>  Sometimes, when we try to fix a problem, we tend to go to a wrong way. We take note of something unimportant in the exception thrown. <br />   If you get some about 'The MySQL adapter \"mysql\" is not available' - this means your PHP is not configured to use mysql or that Apache is not loading the module. Rerun the PHP installation, and make sure you enable Mysql. <br />   If you get <code>\"Error 101 (net::ERR_CONNECTION_RESET): Unknown error.\"</code> - this simply means you're going to the wrong page. <br/>  Try going to <code>\"installation/index.php\"</code> - even though XAMPP and WAMP may auto-redirect you to that page, your manually configured Apache might not. So enter that manually. <br />   If you don't see either of those messages - try using Chrome. Firefox sometimes says something general like \"unable to connect\" and does not specify. <br /> </p> <h1>session.save_path </h1> <p>  After you started the installation from the web GUI joomla supplies, you might get an error about \"session.save_path\". <br />   Go to your php.ini file, and find that string. <br />  It should point to a folder. Make sure that folder is not READ ONLY. <br />  I simply redirected it to \"D:/dev_env/temp\" - as I liked my dev_env folder.. :) <br />  </p> <h1>index.php as default in Apache </h1><br /> <p>  At first I didn't think it was such a problem - but turns out it is.. <br />  If you direct your browser to a folder with index.php, but Apache gives you a file-list instead, you should fix it. <br />   Simply go to httpd.conf, find DirectoryIndex, and add <code>\"index.php\"</code>. <br />  the items are \"space separated items\". so you should add a space followed by \"index.php\".<br />  <h1>Conclusion </h1> <p>  I look forward to using Joomla. <br />  It is just a ~6-7MB download, and seems like a real fun. <br />   So far I have learned a lot - and I've yet to use Joomla :) . <br />  For example - I learned that PHP for Python is like Rails for Ruby. <br />   Installation is probably the hardest thing in Joomla - I've spent about 5 hours to find many pieces of forums that had advices until I got it right. <br />  But after I did it once, I am positive the next time will be less than 2 minutes.. <br />    Another fun thing I thought about - I will install Joomla on my server, and then I can develop my site from my laptop - which is really weak. <br />  I still don't know about how to SVN my source in Joomla.. I guess I'll learn in the next couple of days :).  </p></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/388988248300964079/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/installing-joomla-good-times-ahead.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/388988248300964079"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/388988248300964079"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/installing-joomla-good-times-ahead.html",
                        "_title": "Installing Joomla - Good times ahead"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1365103668398170976",
                "published": "2010-09-05T02:09:00.001-07:00",
                "updated": "2010-10-08T08:59:40.995-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "OpenSSL on windows"
                },
                "content": {
                    "_type": "html",
                    "__text": "I decided to explore HTTPS a bit.. I mean.. it's time! don't you think? <br /><br />First thing I tried to do, is of course configure Apache to use HTTPS. <br /><br /><h1>HTTPS </h1><br />HTTPS is a combination between HTTP and SSL/TLS protocols. <br />So in order to get HTTPS working, I have to know SSL/TLS. <br />Since I downloaded Apache 2.2 with OpenSSL I started reading about SSL even though TLS is newer (as far as I know). But I guess the rules are pretty much the same. <br /><br /><br /><h1>Open SSL </h1><br /><br />I found <a href=\"\" class=\"mogi-reference\">a great documentation for it</a> so I won't even bother to detail everything here, just the commands<br /><br />NOTE : <br />all the commands below contain -des3 flag - which means you will have a passphrase. <br />HOWEVER - after I tried this, I discovered apache on windows does not support passphrases. <br /><br />I got the following log entry <br /><pre>[error] Init: SSLPassPhraseDialog builtin is not supported on Win32<br /></pre><br />so the commands are the same, but without the -des3 for all those windows developers like me. <br /><br /><br />The two commands to create a root CA key are <br />// TODO : what is root CA key ? <br /><pre>openssl genrsa -des3 -out ca.key 4096<br />openssl req -new -x509 -days 365 -key ca.key -out ca.crt<br /></pre><br />you might need to add location of openssl.cnf file (which is under Apache/conf) <br />use the following parameter in the second command <br /><pre>-config \"c:\\Program Files\\Apache\\Apache\\conf\\openssl.cnf\"<br /></pre><br />Create and Sign Intermediate Certificate command is : <br /><pre>openssl genrsa -des3 -out server.key 4096<br />openssl req -new -key server.key -out server.csr<br />openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt<br />openssl pkcs12 -export -out exported.pfx -inkey server.key -in server.crt<br /></pre><br />you might need to add \"config\" to second command as well."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1365103668398170976"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1365103668398170976"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-552560221846065308",
                "published": "2010-08-29T02:28:00.001-07:00",
                "updated": "2010-08-29T02:30:44.390-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Flex - white spaces in HTML pitfall"
                },
                "content": {
                    "_type": "html",
                    "__text": "Those of you who know HTML, know that extra white spaces are ignores, and we have to manually add &nbsp; in order to have extra spaces visible. <br /><br />However FLEX decided to make this optional, and by default - they do include the extra white spaces!!! WTF? <br /><br />If you try to use htmlText, and get a lot of break-lines that you don't know where they came from - it's because you don't use <br /><br /><pre><mx:Text condenseWhite=\"true\" ... /><br /></pre><br />enojy!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/552560221846065308"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/552560221846065308"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7857452334249894978",
                "published": "2010-08-25T00:11:00.001-07:00",
                "updated": "2011-11-13T08:19:58.650-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Automating with Winscp"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\">If you find yourself working on windows in a mixed unix/windows development environment, you probably need to copy files from a unix computer. <br />You might even need to do this periodically. <br /><br />In these cases, winscp is your friend - while using the <a class=\"mogi-reference\" href=\"http://winscp.net/eng/docs/scripting\"> winscp commands </a><br /><br />Today I decided to dump a remote Mysql DB and upload it locally. <br />There are several ways to attack this issue : <br /><br /><li> remotely create the dump  </li><br /><br /><li> create the dump locally and copy it</li><li>create the dump locally, and upload it to your computer remotely.&nbsp;</li><blockquote class=\"webkit-indent-blockquote\" style=\"border: none; margin: 0 0 0 40px; padding: 0px;\"> <li style=\"text-align: left;\">This option is quite nice since you can always control the access to your DB and configure it for remote access.&nbsp;</li></blockquote><br />Even if both DBs have remote access, you might still want to dump and load the DB locally and that's due to the fact that these operations lock the DB, in large quantities of data you might want to shorten them as much as possible, thus settling on local operations.<br />The lock will minimize, but the overall time will remain the same as you still need to copy the file.<br /><h1>Dumping remotely</h1><br />Using 2 commands in a batch file like this : <br /><br /><pre>mysqldump --add-drop-database -u username -psecret -h 123.123.123.123 -B db1 db2 > temp.sql<br />mysql -u root -psecret < temp.sql<br /></pre>will generate a temp dump file and inject it locally.  however, you can only use this in case mysql is configured with remote connect.   In other cases, you will need to dump the file locally, copy it and then inject it.  <br /><span class=\"Apple-style-span\" style=\"font-size: 32px; font-weight: bold;\"><br /></span><br /><span class=\"Apple-style-span\" style=\"font-size: 32px; font-weight: bold;\">Automating local dumps with WinScp</span><br />write a file called \"my_dump.winscp\" and write something like  <br /><pre>option echo on<br />option confirm off<br />open guy:secret@123.123.123.123<br />pwd<br />cd /tmp<br />lcd %TMP%<br />! mysqldump  --add-drop-database \\-u username \\-psecret \\-B db1 1> temp_dump.sql<br />! test \\-e temp_dump.sql && echo yes <br />get temp_dump.sql<br />rm temp_dump.sql<br />exit<br /></pre>then run the winscp commands like this  <br /><pre>winscp /script=my_dump<br /></pre>The script above does the following  <br /><li> login </li><li> go to temp dirs remotely and locally </li><li> dump db1 to file </li><li> copy output file locally </li><li> exit </li><br /><h4>troubleshooting </h4>White writing the script I encountered several problems.  The most important one is while writing the mysqldump command I got \"Unknown switch 'u'.\". I later discovered this is due to the fact the winscp needs switches to be escaped.   NOTE : this is very strange, since it is not documented anywhere. See <a class=\"mogi-reference\" href=\"http://winscp.net/eng/docs/script_commands#call\"> Official Winscp Mysqldump example </a>.  Another thing to note is the exclamation point in the mysql command.  This is a shorthand of \"call\" - a command in winscp that basically allows you to invoke any command you might want to.   Last but not least, the command   <br /><pre>! test \\-e temp_dump.sql && echo yes<br /></pre>tests the existence of the output file. You will see \"yes\" printed if it is there, otherwise blank. This is similar to \"dir filename\" behavior in DOS.   <br /><h4><br /></h4><h1>Other WinScp automation script</h1><div>In this case, I wanted to intercept a buffer in the form of a file.&nbsp;</div><div>So I needed a script that&nbsp;goes to a directory and copies files. The Winscp script looks like this :</div><pre>option echo on<br />option confirm off<br />open guy:secret@123.123.123.123<br />pwd<br />cd /tmp<br />lcd %TMP%<br />get filename1*[0-9]  <br />get filename2*[0-9]  <br />get filename3*[0-9]  <br />exit<br /></pre><br />this goes to tmp folder locally, and tmp folder remotely, and copies all files with template <br />filename1*[0-9], filename2*[0-9], filename3*[0-9]. <br /><br />this is a very simple yet useful case.</div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7857452334249894978/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/automating-with-winscp.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7857452334249894978"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7857452334249894978"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/automating-with-winscp.html",
                        "_title": "Automating with Winscp"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8073604210801014092",
                "published": "2010-08-23T23:31:00.001-07:00",
                "updated": "2010-08-23T23:50:20.250-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Shared hosting - not for developers."
                },
                "content": {
                    "_type": "html",
                    "__text": "Recently I tried some shared hosting offers for  <a href=\"http://steps.mograbi.co.il/\" class=\"guy-reference\"> my site - steps </a>, and was amazed to discover how annoying the world of \"shared hosting\" is for a developer. <br /><br /><br />Steps is written  in Rails. Settings it up should be very easy. Usually - something like 3 commands (written as pseudo code here) : <br /><pre>rake gems:install <br />rake db:create RAILS_ENV=production <br />ruby script/server <br /></pre><br />and that's it, you're good to go. <br />However - shared hosting takes everything away from the convenience of a command line and frameworks like Rails and replaces this with a proprietary GUI called CPanel. <br /><br />I tried 2 hosters so far - both are supposed to be good. <br /><h1>Go Daddy </h1><br />which I actually tried second, was no help at all. <br />I tried making it my DNS registrar, but couldn't find how to do that, so I emailed their support. I quickly got a reply with steps I can take to do exactly that, only to discover it was wrong - the flow they gave me didn't give me a \"co.il\" domain suffix option. <br /><br />So I emailed them back only to recieve a \"we don't understand\" reply. ???? huh ?????  <br /><br /><br /><h1>Host Gator </h1><br />I have to admin everything was swell and I highly recommend them. They have a great 24/7 online chat support. <br /><br />However, as a developer, I was really annoyed that I had to approach support for every little thing. <br /><br /><li> SSH access </li> <br /><li> Enable SVN </li> <br /><li> Install missing rails gems </li><br /><li> Apache configuration - after 3 hours of breaking my brain, they finally admitted they have a bug on their end </li> <br /><li> Email configuration - they didn't admin they have a bug, and I simply told them goodbye </li> <br /><br />Putting all these 3 together, it took me 3-4 days to try and set up my site in Host Gator, which concluded in about 12 hours. (each time 3-4 hours). <br /><br />This is simply unacceptable. So I had to go. <br /><br /><h1>Conclusion </h1><br />Seems to me that shared hosting, while offering a \"trouble-free\" world for deployment, have no idea what they are talking about. <br />Who cares about a built in Mysql when it takes you forever to configure a new table and a user with access , and OH.. no console access? Mysql takes about a minute to install on a computer and no farther effort to start using. <br /><br />Built in rails support ?  Built in Apache ?  <br />For people who know how to handle these things its much more easier to install and configure manually than to learn some GUI someone decided was good for \"setting up a site in a minute\".. <br /><br />I think it requires a dedicated person to get these things going right. <br /><br />For developers - I recommend a virtual host - something like Amazon's cloud. Although I haven't tried it yet, we use it at work and I access it sometimes."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8073604210801014092"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8073604210801014092"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8678903791522377585",
                "published": "2010-08-21T15:09:00.001-07:00",
                "updated": "2010-08-22T10:35:37.059-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My first Velocity Experience"
                },
                "content": {
                    "_type": "html",
                    "__text": "Almost everything went smoothly. <br /><br />I won't linger on explaining what <a href=\"http://velocity.apache.org/\" class=\"mogi-reference\">Velocity</a> is since <a href=\"http://velocity.apache.org/engine/devel/index.html\" class=\"mogi-reference\">Velocity's documentation</a> is clear enough. <br />It's nice to know this project is still very much alive. <br /><br /><h1>Goal </h1><br />It's a good practice I acquired over the years, detecting tasks at work that can be easily automated without a lot of effort. For example - when I was working in Mercury (now known as HP-Mercury) - we maintained 3 different SQL files, one for each Database. (Oracle, MSSQL, and another one.. I don't remember). <br /><br />The syntax is very similar however there are minor differences. <br />I realized the differences are not so big, and wrote a little something to convert one to the other. practically allowing us to maintain one file, and automatically generate the others.. <br /><br />The input to the application was the mapping properties. <br /><br />for example if one SQL syntax says <br /><br />ALTER TABLE table_name ADD COLUMN guy ... <br /><br />and another says <br /><br />ALTER TABLE table_name ADD guy ... <br /><br />The only difference is the work \"COLUMN\" so I would write <br /><br />ALTER TABLE table_name $ADD_COLUMN guy ... <br /><br />and in a properties file I would write <br /><br />mssql.properties : <br /><br />ADD_COLUMN=ADD COLUMN <br /><br />oracle.properties : <br /><br />ADD_COLUMN =ADD <br /><br />once replacing $ADD_COLUMN with the correct value I had the correct syntax for each database. <br /><br />NOTE : the above is just an example, and I am unsure that the syntax difference between MSSQL and ORACLE in ADD COLUMN is correct. However the differences that do exist have the same nature. <br />More such example can be easily seen from the different DB types, while one might define NUM(0,20) and another INT of BIGINT.. <br /><br />Once I did that, we could also have \"code reuse\" - which is GREAT! (I won't linger on this here). <br /><br />Now, I came across yet another, similar situation in <a href=\"http://incapsula.com/\" class=\"mogi-reference\">Incapsula</a> but this time I decided to make my life much easier and use Velocity to merge the template and the context. <br /><br /><h1>Example Scenario </h1><br />Copy paste the following to see velocity at work <br /><br /><pre class=\"java\" name=\"code\">VelocityEngine ve = new VelocityEngine();<br />ve.setProperty(VelocityEngine.RUNTIME_LOG_LOGSYSTEM, this);<br />ve.setProperty(\"file.resource.loader.class\",\"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\");<br /><br />ve.init();<br />Template t = ve.getTemplate(\"velocity.vm\");<br />StringWriter writer = new StringWriter();<br />Context ctxt = new VelocityContext();<br />ctxt.put(\"name\",\"guy\");<br />t.merge(ctxt , writer);<br />System.out.println(\"writer = \" + writer.toString());<br /></pre><br />place the following somewhere in your classpath. <br /><pre>hello ${name}<br /></pre><br />What you should see on the screen is \"hello guy\". <br /><br /><h1>Troubleshooting</h1><br />The above is a copy paste from the tutorial (see references), however I had to add something to it, since I kept getting <br /><pre>org.apache.velocity.exception.ResourceNotFoundException: Unable to find resource 'velocity.vm'<br /></pre><br />after a little googling I found <a href=\"http://www.java-forums.org/web-frameworks/316-velocity-cannot-find-resource.html\">the solution to the problem</a> here. <br /><br />It was the line <br /><pre>ve.setProperty(\"file.resource.loader.class\",\"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader\");<br /></pre><br />There are also  <a href=\"http://velocity.apache.org/engine/devel/apidocs/org/apache/velocity/runtime/resource/loader/package-tree.html\" class=\"mogi-reference\">other loaders</a> you can use. However it seems that none of them are as easy to configure as it might seem."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8678903791522377585"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8678903791522377585"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1868774185227891058",
                "published": "2010-08-21T12:23:00.000-07:00",
                "updated": "2010-09-14T05:20:40.822-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Setting up log4j in a maven project"
                },
                "content": {
                    "_type": "html",
                    "__text": "I always forget how to quickly set up log4j in my maven project, even though it is really easy. <br /><br />I keep getting <br /><br /><pre>log4j:WARN No appenders could be found for logger (mogi.code.reflection.Utils).<br />log4j:WARN Please initialize the log4j system properly.<br /></pre><br />So if you get this too, and all you want is to get things printed to your console, all you need to do is add a log4j.properties file under src/main/resources folder and populate it with the following text <br /><pre>log4j.rootLogger=DEBUG, A1<br />log4j.appender.A1=org.apache.log4j.ConsoleAppender<br />log4j.appender.A1.layout=org.apache.log4j.PatternLayout<br /><br /># Print the date in ISO 8601 format<br />log4j.appender.A1.layout.ConversionPattern=%d [%t] %-5p %c - %m%n<br /><br /># Print only messages of level WARN or above in the package com.foo.<br />log4j.logger.com.foo=WARN<br /></pre><br />after that you should start seeing your log on console. <br /><a href=\"http://logging.apache.org/log4j/1.2/manual.html\" class=\"mogi-reference\">read more about log4j</a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1868774185227891058/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/setting-up-log4j-in-maven-project.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1868774185227891058"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1868774185227891058"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/setting-up-log4j-in-maven-project.html",
                        "_title": "Setting up log4j in a maven project"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6519884212049548252",
                "published": "2010-08-17T14:14:00.000-07:00",
                "updated": "2010-09-14T05:20:40.822-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "When documentation goes wrong - BlazeDS turnkey"
                },
                "content": {
                    "_type": "html",
                    "__text": "Trying to learn BlazeDS, I am unable to get past the installing documentation stage.<br />So here are rules as to \"what not to do when documenting\".&nbsp; <br /><br /><h1>Downloading</h1><br />Each page I found that detailed the turnkey download (as containing tomcat etc..) didn't have a link, or had a broken link.<br /><br />For example - <a href=\"http://opensource.adobe.com/wiki/display/blazeds/Release+Builds\">Google's first result for searching blazeds-turnkey</a>.<br /><br />Why do I have to download 40MB tomcat for a lame war? was it too hard to write another packaging ant target??<br /><br /><h1>Bad naming </h1><br />if you have an examples file/folder, don't call it examples.. call it artifactname-examples.<br /><br />looking into blazeds content - we have samples.war.. I am NOT going to place this in my tomcat.. I will rename this to blazeds-samples. is it so hard?<br />technically it shouldn't bother anyone, unless references to this - meaning, if someone had an image for example referencing to /samples/myimage.gif - then the link will be broken due to rename. However, since this specific case is \"samples\" - no one should be pointing to it.<br />if it was \"core.war\" I'd probably won't change it even though I want to - since it is likely there are references to core from other wars (see next item on this list).<br /><br /><h1>Multiple Wars</h1><br />Why 3 WARS?<br />Am I obligated to have 3 WARS from now on just to use blazeds?<br />NO! So why 3 WARS? really..<br /><br />Samples, should be as simple as possible. - at least \"turnkey\" that claims to be a \"getting started\" session. 3 WARS is not \"getting started\"..<br /><br /><h1>Database Connection</h1><br />The only \"example\" tutorial I can think of that needs a DB connection, is a DB component like Hibernate. All other \"examples\" in the world should be simple enough to use \"HashMap\".<br /><br />BazeDS - Did you write a new ORM model layer? no? than why do I have to \"start samples db\" before I look at the examples?<br /><br /><h1>Bad Code</h1><br />Last, but not least.. after you finally got the examples running.. you should NEVER get an exception, unless it is demonstrating an example.<br />Do whatever you need to avoid it, however, if an exception happens, show it to the user so it will be clear to him the example is not working.<br /><br />A request URL will look like this. <br /><div style=\"font-family: \"Courier New\",Courier,monospace;\">http://my_host/my_context/rest_of_path</div><br />If you are referring to a resource in the same context and host, you should start the reference with a simple \"/\". however, if you for some reason need to fill in the context and the host, you can always extract that information from the request details. (lots of documentation for this, so I won't elaborate) <br /><br />This way - if someone cleverly renamed your WAR, you code will keep on working.<br /><br />Unlike the blazeDS samples war that threw his hidden error to firebug console :<br /><br />http://localhost:8080/samples/messagebroker/amfpolling&nbsp;&nbsp; 404 no found<br /><br />Which clearly happened due to my WAR rename.&nbsp; <br /><br /><h1>Conclusion</h1><br />When writing a \"getting started\" examples documentation&nbsp; :<br /><ul><li>keep it as simple as possible both code-wise and installation-wise.&nbsp;</li><li>try to stick to the basics and not do redundant samples like DB connection (unless your module has no meaning without a DB like Hibernate). </li><li>Write good and clear code - this is a sample(!) so it should be too complex a code to write it safe.&nbsp;</li> <ul><li>This includes giving meaningful names to files/folder/classes/function etc..&nbsp; </li></ul><li>Make sure the client understand what happens - especially if the example went wrong. Again, this should be a simple code, so this should be so hard to implement.&nbsp;</li><li>If possible - make source visible from within the example.&nbsp;</li> <ul><li>The best thing would be to allow the user to modify the source at run-time, but for some cases, like blazeDS it is impossible. However a good example is www3.schoool's \"try-it-yourself\" examples. take a look in this <a href=\"http://www.w3schools.com/css/tryit.asp?filename=trycss_table_border-collapse\">border-collapse try it yourself</a></li></ul></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6519884212049548252/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/when-documentation-goes-wrong-blazeds.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6519884212049548252"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6519884212049548252"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/when-documentation-goes-wrong-blazeds.html",
                        "_title": "When documentation goes wrong - BlazeDS turnkey"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1106860399229856939",
                "published": "2010-08-17T12:07:00.000-07:00",
                "updated": "2010-08-17T12:07:41.651-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Blogger - not for developers?"
                },
                "content": {
                    "_type": "html",
                    "__text": "As I am writing new posts rapidly, I keep running into an annoying behavior. <br /><br />Code syntax may include the character '<' and '>' however these character are also used in HTML. <br /><br />When I first started combining HTML and code, I was convinced <pre> tags will solve the problem but they didn't. So the solution is to convert manually all < character to < string. This process is known as \"escaping\", and for HTML it is called <a href=\"http://www.theukwebdesigncompany.com/articles/entity-escape-characters.php\">HTML escaping</a>. It exists to all languages since each language has reserved words and characters. <br /><br /><br /><br />The most common is the \"quotes\" which have the backslash as an escape character, in order to enable developers to include the character \" inside a string. For example if I want to write : <br />The name of the book was \"Mogi on Rails\"<br />I will write the following string<br /><pre>\"The name of the book was \\\"Mogi on Rails\\\"\"<br /></pre>Note that this causes '\\' (backslash) character to be a reserved character as well, which requires another escaping. so if I wanted to escape the string above another level I would write <br /><pre>\"\\\"The name of the book was \\\\\\\"Mogi on Rails\\\\\\\"\\\"\"<br /></pre>And this keeps on and on. This is on my top 10 bug causes in an application.<br /><br />Today, I noticed a disturbing behavior in blogger draft. <br /><br />take the following code that was written correctly but unescaped: <br /><br /><pre class=\"java\" name=\"code\">List<string> strings;<br /></string></pre><br />If the disturbing behavior still occurs you should see an appended string which looks like this <br /><pre></string><br /></pre><br />however I did not write it. Moreover, blogger modifies the string <br /><pre>String<br /></pre>to lower case... if you already see it lowered, know I wrote it like this <br /><pre>String<br /></pre><br /><br />To make things clearer, or in case the disturbing behavior does not occur any more I added an image that compares the string as I wrote it with how it displayed in draft.<br /><br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/TFfiZxbt5_I/AAAAAAAAAkc/GDKss9gr4a4/s1600/blogger_disturbing_behaviour.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/TFfiZxbt5_I/AAAAAAAAAkc/GDKss9gr4a4/s1600/blogger_disturbing_behaviour.png\" /></a></div><br /><h1>Why CDATA causes blogger errors? </h1><br /><br />Another expected behavior is when you try an obvious solution like adding <a href=\"http://en.wikipedia.org/wiki/CDATA\">CDATA tags</a><br /><br />However that causes an even more annoying error <br /><pre>Your HTML cannot be accepted: Tag is broken: ![CDATA[<br /></pre>Come on! <br /><br /><h1>Using Compose Mode </h1><br />Funny enough the \"best\" solution is to use the Compose mode, which is a Rich Text Editor mode - that takes care of escaping for you - however, as ironic as it might seem, the audience that needs it the most, usually don't like Rich text editors, so they don't use it. <br /><br />We either manually escape character, or we can temporarily switch to \"Compose\" and paste the code, then go back to \"Edit HTML\" mode."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1106860399229856939/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/blogger-not-for-developers.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1106860399229856939"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1106860399229856939"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/blogger-not-for-developers.html",
                        "_title": "Blogger - not for developers?"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/TFfiZxbt5_I/AAAAAAAAAkc/GDKss9gr4a4/s72-c/blogger_disturbing_behaviour.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2409017476697355656",
                "published": "2010-08-17T12:06:00.001-07:00",
                "updated": "2010-08-17T12:06:51.401-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Google Blooper - Translate bar requires FireFox!"
                },
                "content": {
                    "_type": "html",
                    "__text": "Google just released a new translate bar with a cool feature where you can pause with the mouse on a word, and it will be translated.. you don't need to mark the word or anything like that.<br />You can <a class=\"mogi-reference\" href=\"http://translate.google.com/translate_tools\">read all about it </a> - just scroll down a bit. <br /><br />So naturally, I went to install it using my chrome browser, only to discover it requires Firefox! <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/TGEG_3DqawI/AAAAAAAAAmI/iZJYhdZiZWc/s1600/translate_toolbar_not_for_chrome.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"146\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/TGEG_3DqawI/AAAAAAAAAmI/iZJYhdZiZWc/s320/translate_toolbar_not_for_chrome.png\" width=\"320\" /></a></div><br /><br />A Blooper?<br />I don't know..<br /><br />Maybe Google thinks their Chrome Translation bar is enough.. maybe I just need to upgrade my chrome to get this toolbar built in or something.<br />In any case this is funny.<br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TGEHBmkrM0I/AAAAAAAAAmM/2nsMZb9JJxY/s1600/chrome_translate.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"73\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TGEHBmkrM0I/AAAAAAAAAmM/2nsMZb9JJxY/s320/chrome_translate.png\" width=\"320\" /></a></div><br /><br /><h1>Only Google Can</h1><br />In an older post I wrote about <a href=\"http://mograblog.blogspot.com/2010/06/googles-translator.html\">My thoughts about Google Translate</a> and the power it holds. <br /><br />No one other than Google can dispatch such a toolbar <b>for free</b> as a <b>by the way</b> kind of manner. \"By the way.. there's also a toolbar..\" . <br /><br />So far only chrome automatically offered to translate pages, however Google got this right - it doesn't really matter which browser you use, as long as you get a good translation experience. <br />So now.. I guess, we have it in FF as well. <br /><br /><br /><h1>Blogger Translation Widget</h1><br />Weird enough, the context in which I heard about this toolbar was Blogger.. <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/TGEIuIGvlGI/AAAAAAAAAmU/u-XTrgwJxbY/s1600/translate_blog.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"87\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/TGEIuIGvlGI/AAAAAAAAAmU/u-XTrgwJxbY/s320/translate_blog.png\" width=\"320\" /></a></div><br /><br />However, as you've probably seen in the link about, this is not a blogger gadget, but a template modification..<br />How weird is that???<br /><br />Searching for such a gadget, I couldn't find one.. Weird again!<br /><br />How hard can that be?<br />Yours truly will try to embark on a mission to write this gadget, following <a href=\"http://mograblog.blogspot.com/2010/08/my-first-blogger-gadget-widget.html\" class=\"mogi-reference\">my own blog on writing a blogger gadget</a> from last time."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2409017476697355656/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/google-blooper-translate-bar-requires.html#comment-form",
                        "_title": "1 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2409017476697355656"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2409017476697355656"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/google-blooper-translate-bar-requires.html",
                        "_title": "Google Blooper - Translate bar requires FireFox!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/TGEG_3DqawI/AAAAAAAAAmI/iZJYhdZiZWc/s72-c/translate_toolbar_not_for_chrome.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "1"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-237966726947909314",
                "published": "2010-08-17T12:06:00.000-07:00",
                "updated": "2010-08-17T12:07:14.288-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Html CSS to Flex Style - about HBox horizontalGap and table border collapse or padding"
                },
                "content": {
                    "_type": "html",
                    "__text": "<p>The other day I was modifying a file, and I accidentally caused this GUI modification <br /></p><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/TGpK_1b4aZI/AAAAAAAAAmk/tQDWXouvLoM/s1600/accident_gui_change.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"29\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/TGpK_1b4aZI/AAAAAAAAAmk/tQDWXouvLoM/s320/accident_gui_change.png\" width=\"320\" /></a></div><br />The required Look and Feel was the one on the left, where all balls are one beside the other. <br />What I did was wrap those circles with an HBox. <br /><br />It was obvious to me that I needed a behavior similar to <a href=\"http://www.w3schools.com/css/tryit.asp?filename=trycss_table_border-collapse\" class=\"mogi-reference\">border-collapse</a> for a table or some sort of padding in CSS - as shown in this <a href=\"http://www.somacon.com/p141.php\" class=\"mogi-reference\">table style wizard</a>. <br /><br />The answer to my question was \"horizontalGap\". Setting this to 0, gave me the required behavior."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/237966726947909314/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/html-css-to-flex-style-about-hbox.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/237966726947909314"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/237966726947909314"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/html-css-to-flex-style-about-hbox.html",
                        "_title": "Html CSS to Flex Style - about HBox horizontalGap and table border collapse or padding"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/TGpK_1b4aZI/AAAAAAAAAmk/tQDWXouvLoM/s72-c/accident_gui_change.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-779891916381859251",
                "published": "2010-08-15T10:35:00.000-07:00",
                "updated": "2013-07-25T03:03:53.029-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Fail Safe - go.sh script"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\" dir=\"ltr\" style=\"text-align: left;\">    <h1> Fail Safe - go.sh Script </h1> <div>  <p>   As I am deploying my <a href=\"http://steps.mograbi.info\" target=\"_blank\">Steps Project Manager application</a> on a Unix host, I came across some failures. <br />   The application would stop work for some reason - nothing is written to the log. <br />  </p>  <p>   Since this is just a hobbie, and not my daily job, and since this application has only 40 users so far, <br/>   hat only 2-3 of them (besides me) actually use it.. I decided on a brute force solution. <br />  </p>  <p>   A friend helped me to write a script that runs \"forever\" and keeps my application up. <br />  </p>  <pre class=\"prettyprint\"><br />#!/bin/bash <br /><br />while true ; do <br />ruby script/server -e production &> res.out  <br />done <br /><br />  </pre>  <p>   My session information is saved in a cookie, so I will not lose it.    </p> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/779891916381859251/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/fail-safe-gosh-script.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/779891916381859251"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/779891916381859251"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/fail-safe-gosh-script.html",
                        "_title": "Fail Safe - go.sh script"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5783193993796923459",
                "published": "2010-08-11T13:11:00.000-07:00",
                "updated": "2010-08-11T13:11:22.074-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "play"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Play Framework cannot access public field of anonymous classes"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.playframework.org/images/play.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://www.playframework.org/images/play.png\" /></a></div>WOW! do I have a bug for you! <br />A while back I started a new job, and the project I am currently working on uses <a class=\"mogi-reference\" href=\"http://www.playframework.org/\">Play Framework!</a> - which is a Rails like implementation in Java. <br />Since I already knew Rails, Play came very natural to me. However, I came across an error that only a month and a half later I found the cause to - purely by accident.. I forgot a breakpoint and I was debugging something entirely unrelated, when suddenly it popped right in front of me. <br /><br /><h1>The Error </h1><br />I got the following error<br /><br /><pre  name=\"code\" class=\"java\">Oops: IllegalArgumentException<br />An unexpected error occured caused by exception IllegalArgumentException: argument type mismatch<br />><br />play.exceptions.UnexpectedException: Unexpected Error<br />        at play.mvc.ActionInvoker.invoke(ActionInvoker.java:300)<br />        at Invocation.HTTP Request(Play!)<br />Caused by: java.lang.IllegalArgumentException: argument type mismatch<br />        at play.utils.Java.invokeStatic(Java.java:129)<br />        at play.mvc.ActionInvoker.invoke(ActionInvoker.java:163)<br />        ... 1 more<br /><br /></pre><br />It doesn't get any more general that that. If you don't see anything on the browser, always look in the console. <br /><br />What naturally occurred to me was \"argument type mismatch ==> I have a problem with url mapping to a function signature\". Well, not at all.. At some point I found a pattern, which can only mean that a certain flow can cause this. Once I accidentally found that flow, problem was quickly solved. <br /><br /><h1>The Solution </h1><br />It turns out that if you wrap the correct code correctly with try/catch you can finally see the causing exception, which says this : <br /><pre>java.lang.IllegalAccessException: Class play.classloading.enhancers.PropertiesEnhancer$FieldAccessor can not access a member of class com.name.XXX$1 with modifiers \"public\"<br /></pre><br />the com.name.XXX is a fake class name. <br />The important part of the message is $1 and \"can not access a member with modifier public\".. <br /><br />Every 6 years young kid knows that you can access a public field. So what is the problem? <br /><br /><h2>Reproducing </h2><br />The problem is with a code that looks like this in play <br /><br /><pre name=\"code\" class=\"java\">....<br /><br />MyDoer doer  = new MyDoer;<br /><br />public static void myFunc(){<br /><br />      doer.doSomething(new IResultListener(){<br />                   public String result;<br />                   @Override <br />                   public void handleResult(String str){<br />                          result = str;<br />                    }<br /><br />             }<br /><br />}<br /><br />...<br /><br /></pre><br />Where doer can do whatever it likes... <br />The \"public String result\" is not accessible for some really odd reason. <br />This is of course a bug in Play Framework. <br /><br /><h2>Code Modifications </h2><br />In order to get rid of this error, all you should do is make that anonymous class a \"named class\" or not-anonymous class. <br /><br /><br /><br /><h1>Afterthought </h1><br />As I am writing this post, I wrote the sample code above.. it seems that if you handle your exceptions correctly, you will see the error as it happens. <br /><br />Here is the picture of the error that I saw in reproduction : <br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/TGL7v6N5isI/AAAAAAAAAmc/K_0KJtKxUmw/s1600/bug_play_frmwrk.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"147\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/TGL7v6N5isI/AAAAAAAAAmc/K_0KJtKxUmw/s320/bug_play_frmwrk.png\" width=\"320\" /></a></div><br /><h2>This lead me to think.. hmmm.. we have another bug!!!  </h2><br />Obviously, if the simplest reproduction gives me an exception and my application gets another exception, there's another problem with my application. <br /><br />Remember, the original exception was : <br /><br /><pre>Caused by: java.lang.IllegalArgumentException: argument type mismatch<br /></pre><br />Since I solved the previous bug, I had to reproduce this one in another way. <br />Thank god for my persistence with reproducing, because the problem popped right away. <br /><br />At first I tried to write <br /><pre>throw new RuntimeException(\"myException\");<br /></pre><br />however this did not reproduce the problem. <br />Now remember the exception I found today said <br /><pre>java.lang.IllegalAccessException</pre><br />So I tried writing <br /><pre>throw new IllegalAccessException(\"myException\");<br /></pre><br />because this HAD to reproduce the problem.. no other option is available. <br />BUT THEN! the IDE told me I have a compilation error (good sign) because IllegalAccessException is not a RuntimeException!!!!!! <br /><br />And this is the answer I was looking for. <br />Someone wrote a function expecting a RuntimeException but instead got an Exception (or to be more specific IllegalAccessException) which does not extend RuntimeException. <br /><br />Since I know play and the source so far, I had a lucky guess. <br />You can write a <a href=\"http://www.playframework.org/@api/play/mvc/Catch.html\" class=\"mogi-reference\"> @Catch function</a> - that catches all the errors in the application. <br /><br />I found the following signature <br /><pre name=\"code\" class=\"java\"> @Catch(value={Exception.class})<br />    protected static void incapCatch( RuntimeException e )<br /></pre><br />Which is EXACTLY what I was looking for!!!<br />All I had to do is modify this code to <br /><pre name=\"code\" class=\"java\"> @Catch(value={Exception.class})<br />    protected static void myCatch(Exception e )<br /></pre><br />and problem was solved. <br /><br /><h1>Critical Bugs </h1><br />The bug I found was critical for 2 reasons : <br /> <li><b><u>It belonged to an error reporting flow </u></b> <br/><br />     The problem in these scenarios is that you never really know where the problem really is. An error printing mechanism must never have a bug otherwise it will be hard to resolve. <br /></li> <br /><br /><li> <b><u>This is a general framework reflection error</u></b> <br/> a reflection error is really hard to solve when it's not your code , and doesn't contain the information. Impossible to pin point. This is clearly Play!Frameworks problem, and I will let them know about it</li><br /><li><br /><b><u>This is a fundamental bug</u></b> <br/> This happens to the best of the best at some point. Once you see Exception.class in an annotation written next to a RuntimeException signature, you can identify this bug. Hack, this can even be a question in your Java beginners course. However.. mistakes happen. But the more fundamental, the wider its scope, and the more effect it will have on your application. <br /></li><br /><br /><h1>Importance of Reproducing </h1><br />I could not have discovered all these bugs and solutions if I did not insist on reproducing them first. Reproducing a bug tells you : <br /><li> You understand the problem </li> <br /><li> You understand the solution</li><br /><li> You know what to expect when something goes wrong </li><br /><li> You know what to expect when something goes right </li><br /><br />And it can't get any better than that."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5783193993796923459/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/play-framework-cannot-access-public.html#comment-form",
                        "_title": "2 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5783193993796923459"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5783193993796923459"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/play-framework-cannot-access-public.html",
                        "_title": "Play Framework cannot access public field of anonymous classes"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/TGL7v6N5isI/AAAAAAAAAmc/K_0KJtKxUmw/s72-c/bug_play_frmwrk.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "2"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2081481594491326769",
                "published": "2010-08-06T14:11:00.000-07:00",
                "updated": "2013-04-24T19:33:23.832-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My First Blogger Gadget (Widget) - The Reference Gadget"
                },
                "content": {
                    "_type": "html",
                    "__text": "<p><a href=\"http://t2.gstatic.com/images?q=tbn:ANd9GcR_L27BJMmvEUHTUA8iyzZ2lo4_ZohQuHUi1mrM4SctFb8zu10&t=1&usg=__cpyE_6WG2xeqb5odppqAYQUlmgA=\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"200\" src=\"http://t2.gstatic.com/images?q=tbn:ANd9GcR_L27BJMmvEUHTUA8iyzZ2lo4_ZohQuHUi1mrM4SctFb8zu10&t=1&usg=__cpyE_6WG2xeqb5odppqAYQUlmgA=\" width=\"200\" /></a><br /><br /><br />I follow <a href=\"http://mograblog.blogspot.com/search/label/blogger\" class=\"mogi-reference\" >blogger </a>closely, and I enjoy everything I see.<br />However, from time to time I feel something is missing.<br /><br />It's time I began being more active.<br /></p><h1><br /></h1><h1><br /></h1><h1>This post is not about Blogger Hacks </h1><br /><h2>What is a blogger \"hack\"</h2><br />A hack in blogger is a piece of code you can place in the \"template\" of the blog, and that will generate the source you want. For example - you can write JavaScript in the template to generate \"Table Of Contents\" div. <br />This method is used when you need to modify the content of the post - since the \"document\" referred to in JavaScript is the same \"document\" of the post, it is usually an easier and quicker way than a gadget to achieve your goal.<br /><br />I don't think the word \"hack\" but that's the most commonly used phrase in this case. <br /><br /><h2>This post is about Gadgets<br /></h2><br />A gadget will add information to your post, but will not modify it. <br />You can still add Table of Contents but it will not look and feel as part of the post. <br /><br />A gadget uses the blogger API to achieve its goal and is not considered a hack in any way. <br />However it is considered harder than a hack since it requires you to learn the Blogger's API and use it in JavaScript. You cannot use the commands you know in JavaScript since the gadget's \"document\" and the post's document is different. <br /><br />This is however not the case if the data the gadgets is showing is unrelated to the post. (Advertisement for example). <br /><br /><h1>The Reference Gadget</h1><br />I try to maintain a \"references\" section in each post I have links in. (Like this one). <br />However.. I believe this should be automated, and it annoyed me there's no such gadget. <br /><br /><h2>Writing Your First Blogger Gadgets </h2><br />The first thing you will notice trying to write your first gadget is that there's a lot of documentation, but its quality is so low.. it's disturbing. <br />It's organized and everything, but the information you need is missing. <br /><br />That's probably because you reached <a href=\"http://code.blogger.com/\">Blogger Developer Network</a> or <a href=\"http://code.google.com/apis/gadgets/index.html\">Google Gadget Developer Guide</a> which both seem great, but they are the wrong documentations for this case. <br /><br /><br />Surprisingly enough, these are the first result you get when searching \"blogger widget api\". <br />What you should be looking for is <a class=\"mogi-reference\"  href=\"http://code.google.com/apis/blogger/docs/gadgets/gadgets_for_blogger.html\">\"blogger gadget api\"</a>. - the difference is between widget and gadget. <br />Quoting <a class=\"mogi-reference\"  href=\"http://webtrends.about.com/od/widgets/a/widgetgadget.htm\"> an article about the difference between gadgets and widgets </a> : <br /><br /><blockquote><i>The easiest way to explain it is that a gadget is any widget that is not a widget. Sound confusing? A widget is a piece of reusable code that you can plug into virtually any website. A gadget acts just like a widget, often fulfilling the same purpose, but it is proprietary. It only works on a certain website or a specific set of websites.</i></blockquote><br /><h2>Getting Started </h2><br />You start with the following template<br /><br /><pre class=\"xml\" name=\"code\"><?xml version=\"1.0\" encoding=\"UTF-8\"?><br /><Module><br /><ModulePrefs title=\"References\"<br />               author=\"Guy Mograbi\"<br />               author_email=\"guy.mograbi@gmail.com\"<br />               description=\"Takes links and shows them as list\"<br />              title_url=\"http://www.mograbi.co.il\" ><br />  </ModulePrefs><br />  <Content type=\"html\"><br />    <![CDATA[<br />  Hello world!<br />    ]]><br />  </Content><br /></Module><br /></pre><br />Just modify author, author_email and so on. (you can also add \"screenshot\" and \"thumbnail\" - but I am guessing you'll be doing that once you have an image of your gadget :) ) <br /><br /><h2>Running the gadget </h2><br /><h3>Need to make the XML accessible somehow </h3><br />Don't wait for this step, once you have the XML above accessible somewhere online you should load it to your blog (or some fake temporary blog you have). <br />I tried following the <a href=\"http://code.google.com/apis/blogger/docs/gadgets/gadgets_for_blogger.html#TestingGadget\">test tutorial</a> in documentation, but it failed for me. I found it quicker to test it on an actual blog. <br /><br />You can host your file on Google Code or Github. <br/>For example -  <a href=\"https://blogger-reference-gadget.googlecode.com/svn/trunk/references_gadget.xml\" title=\"My gadget on google code\" class=\"mogi-reference\">mine is available on Google Code</a><br />Don't try the <a href=\"http://code.google.com/apis/gadgets/docs/tools.html#GGE\"> Google Gadget Editor </a> since it is full of bugs. (and I am using chrome, so its not a compatibility issue). <br /><br /><br />Best practice says to use some online files repository, where you can write an XML file and save it online - however there's no such thing (STARTUP!) <br /><strong>Update: Actually, now you can finally edit files online in Github and Google Code</strong><br /><h3>Add the gadget to a blog </h3><br />Pick a blog you don't care to make inaccessible for some time (expect javascript errors). <br />Click \"design\" ==> \"add gadget\" ==> \"add your own\". <br />Give the URL to the XML which should now be accessible online. <br /><br />View your blog - you should see \"hello world!\". <br />Everything went smoothly for me to this point. (after a lot of research I summarized above) - so there's no troubleshooting, only \"best practice\" advice. <br /><br /><h2>Writing Gadget Functionality </h2><br />Now that you have the gadget up and running, with a good work process, it's finally time to start coding. <br /><br /><h3>Disabling Gadget's Cache </h3>Try to modify your XML in any way - for example, modify the \"Hello World\" string and hit refresh in your blog. Did it change? <br />I expect the answer to be NO and the reason for that is that blogger caches the Gadget's XML. <br /><br />In order to disable the cache, you will need to modify the template of the blog (hack). <br /><br />Add the following lines before </head><br /><pre class=\"html\" name=\"code\"><script src='http://www.google.com/friendconnect/script/friendconnect.js' type='text/javascript'></script><br /><script type=\"text/javascript\">google.friendconnect.container.setNoCache(1);</script><br /></pre><br />This code was taken from <a class=\"mogi-reference\" href=\"http://code.google.com/apis/gadgets/docs/publish.html#Testing\">Blogger's Documentation about testing</a><br /><br /><h3>Getting info From Blogger</h3><br />As I mentioned before - if all you want is to show data unrelated to the post, simply write your HTML and JavaScript, there's nothing new for you to learn here. <br />However, since I want to gather all the links in the post and display them as a list of links, I will need the content of the post. <br /><br />This requires me to get the content of the post by using Blogger's API. <br />Reading in <a class=\"mogi-reference\" href=\"http://code.google.com/apis/blogger/docs/gadgets/gadgets_for_blogger.html#BlogData\">Blogger's data api documentation</a> I decided to write code that looks like this<br /><br /><pre class=\"html\" name=\"code\"><div id=\"hidden_div\" style=\"display:none\"></div><br /> <div id=\"references_mogi_gadget\"></div><br /><br />  <script><br /><br /> function $(id){ return document.getElementById(id);}<br /> <br /> function write_references(){ <br />  var ref_div = $('references_mogi_gadget');<br />  if (ref_div == null){<br />   ref_div = document.createElement('div');<br />   document.body.appendChild(ref_div);<br />  }<br />  <br />  as = document.getElementsByTagName('a');<br />  for each (a in as){<br />   <br />   if ( a.className && a.className.indexOf('mogi-reference') >=0) {<br />   <br />    var li = document.createElement('li');<br />    <br />    var newa = document.createElement('a');<br />    // I don't know why but JSON strips the http: part..<br />    <br />    newa.href=a.href;<br />    newa.target = 'top';<br />    newa.innerHTML = a.innerHTML;<br />    li.appendChild(newa);<br />    ref_div.appendChild(li);<br />   <br />   }<br />  } <br /> }<br /> <br />  function onLoadFeed(data){<br />  var content = data.data.entry.content.$t;<br />  <br />  $('hidden_div').innerHTML = content;<br />  write_references();<br />   }<br />   <br /> // Get the feed data<br />       blog = new google.Blog(function() {<br />         blog.getCurrentPostJson(onLoadFeed);<br />       }, window.name);<br /> <br /><br /></script><br /><br />    <br /></pre><br /><br /><h4>Lets break it down </h4><br />The first thing to run is \"fetch post content\" code<br /><pre class=\"javascript\" name=\"code\">// Get the feed data<br />       blog = new google.Blog(function() {<br />         blog.getCurrentPostJson(onLoadFeed);<br />       }, window.name);<br /></pre><br />I give the constructor a function - which is invoked by the end of the constructor. (as seen in documentation).<br /><br />Then, we get to \"onLoadFeed\"<br /><pre>function onLoadFeed(data){<br />  var content = data.data.entry.content.$t;<br />  <br />  $('hidden_div').innerHTML = content;<br />  write_references();<br />   }<br /></pre><br />What I basically do is pour the content of the reply to a hidden div. The reason I do that is because I want to handle JavaScript code, and not start parsing HTML code.. <br /><br />Then I run an algorithm that finds all links with class=\"mogi-reference\" and put them nicely in a list. this is the \"write_references\" function which is pure JavaScript - no blogger api specifics.. <br /><br />This is my first draft.. but running it, I get the result I wanted. <br />All I have left is to match the style of the gadget to the style of the blog and add customizations etc..  <br /><br /><h1>Future Features </h1><br />More features I can add easily are : <br /><li> add a small description of the link by adding attribute to anchor tag</li><br /><br /><li> add \"group\" attribute to anchor tags, and group the links to different lists </li><br /><br /><br />This will give all my viewers an easy \"references\" box which I won't have to make manually anymore. <br /><br /><h1>The Gadget gets Cached Data!!!! </h1><br />As I was testing my gadget, I accidentally had a problem with the blog's content. So I modified it, but it didn't change in the gadget!!! denying me to test with proper data. <br /><br />This is how I learned that gadgets get cached data. This might be a problem. <br />I found posts that claim to solve the problem. nothing worked. <br />Eventually, after a couple of minutes, the cache refreshed, and I continued, but you should be aware of this. If you insist on not waiting - simply create a new post. <br /><br />Here is an image showing that the gadget is out of sync with the post. <br />According to my code, I am taking the entire anchor tag, with its inner HTML, so the text for the link should be the same, but it's not. <br /><br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TFxlTMUHlPI/AAAAAAAAAlY/iNIjsVBfvW8/s1600/gadget.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"80\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TFxlTMUHlPI/AAAAAAAAAlY/iNIjsVBfvW8/s320/gadget.png\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">The text in the gadget saying \"My Site\" should match the link in the post saying \"Google\"<br />but it's not since it is using a cached version of the post.&nbsp;</td></tr></tbody></table><br /><h1>Applying the Style</h1><br />The style part is quite easy, all you have to do is get the style from blogger api, and apply it in the correct places. <br />Just read the <a class=\"mogi-reference\" href=\"http://code.google.com/apis/blogger/docs/gadgets/gadgets_for_blogger.html#BestUIPractices\"> documentations</a><br /><br /><pre class=\"html\" name=\"code\"><ModulePrefs ... ><br />          ... <br /> <require feature=\"opensocial-0.8\"><br /> <optional feature=\"skins\"><br />          ....<br />     </ModulePrefs><br /><br /><body id='myBody'><br />... <br /><script><br /> $('myBody').style.borderColor = gadgets.skins.getProperty('BORDER_COLOR');<br /> $('myBody').style.backgroundColor = gadgets.skins.getProperty('CONTENT_BG_COLOR');<br /> $('myBody').style.color = gadgets.skins.getProperty('CONTENT_TEXT_COLOR');<br /> $('myBody').style.font = gadgets.skins.getProperty('FONT_FACE');<br />/// use $('linkId').style.color = gadgets.skins.getProperty('CONTENT_LINK_COLOR');<br />// on every \"a\" tag. <br /></script><br /><br />     .... <br />    <br /></optional></require></pre><br />This should pretty much cover everything.. <br /><br /><h1>Best Practice I Learned</h1><br />I learned that firebug or writing \"debugger\" in the JavaScript code is not useful. I couldn't find a proper way to debug the code. <br />So I had to resort to alerts.. thank god this gadget was pretty easy. <br /><br /><h1>Where to get my Gadget? </h1><p>All the info you need is at <a class=\"mogi-reference\"  href=\"http://code.google.com/p/blogger-reference-gadget\">google code project</a><br /></p>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2081481594491326769/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/my-first-blogger-gadget-widget.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2081481594491326769"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2081481594491326769"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/my-first-blogger-gadget-widget.html",
                        "_title": "My First Blogger Gadget (Widget) - The Reference Gadget"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TFxlTMUHlPI/AAAAAAAAAlY/iNIjsVBfvW8/s72-c/gadget.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5043865329563212222",
                "published": "2010-08-03T02:09:00.000-07:00",
                "updated": "2010-08-21T12:08:56.083-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Generics - method signature type definition"
                },
                "content": {
                    "_type": "html",
                    "__text": "<p>On my <a href=\"http://mograblog.blogspot.com/2010/02/generics-did-you-know.html\" class=\"mogi-reference\">previous post</a> I introduce some advanced things about generics, when I discovered I forgot a very important feature. <br /><br /></p>As specified before, you can declare a generic type on a method declaration. <br /><br /><br /><pre class=\"java\" name=\"code\">public <T> T newInstance(Class<T> clzz, String name) throws IllegalAccessException, InstantiationException<br />    {<br />       return (T) Spring.getBean( \"myBean\" );<br />    }<br /></pre><br />disregarding for a moment the ugly cast. (in this case you better use Class#cast function).  <br />as you can see, I don't really need \"clzz\" there. I use it only to define T. <br />However you can also do without it\"Class<T> clzz\".<br /><br />You can also write the following function definition<br /><pre class=\"java\" name=\"code\">public <T> T newInstance(String name) throws IllegalAccessException, InstantiationException<br />    {<br />       return (T) Spring.getBean( \"myBean\" );<br />    }<br /></pre><br /><br />and call it like this <br /><pre class=\"java\" name=\"code\">public void test() throws InstantiationException, IllegalAccessException<br />    {<br />        String str = this.<String>newInstance( \"guy\" );<br />    }<br /></pre><br />In this specific case, you don't really need to specify <T> since it is \"inferred\" and so the compiler will tell you <br /><pre>Explicit type arguments can be inferred<br /></pre><br />however when you get to inheritance and scenarios which are more complex than this one, it will no longer be inferred. <br /><br />NOTE : This was tested on JDK 1.6. I am unsure about 1.5 compatibility.<br /><br /><h1>Compiler Support Issue </h1><br />Some of you might try this and get the following message : <br /><pre>type parameters of <t>  T cannot be determined; no unique maximal instance exists for type variable T with upper bounds, java.lang.Object<br /></t></pre><br />Intellij users will run into this the fastest.. <br /><br />It seems this is compiler dependend. <br /><br />Java has several compilers : <br /><br /><br /><br /><li> <a class=\"mogi-reference\" href=\"http://en.wikipedia.org/wiki/Javac\"> Javac </a> </li><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><li> <a class=\"mogi-reference\" href=\"http://jikes.sourceforge.net/\"> Jikes </a> </li><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><li> Eclipse </li><br /><br /><br /><br /><br /><br /><br /><br />probably more, but these are the compilers intellij supports. <br />Each with its own advantages. <br /><br />However - it seems that when working on Intellij, you get JavaC as default compiler, but that compiler cannot handle the syntax shown above!! - you can reproduce the problem from command line. <br /><br />To resolve this, all you need to do is tell intellij to use Eclipse Compiler. <br />Settings ==> Compiler ==> Java Compiler ==> Use compiler : Eclipse<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TF_0ipfILkI/AAAAAAAAAmA/d6OeFx_9PY8/s1600/eclipse_compiler_setting.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"110\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TF_0ipfILkI/AAAAAAAAAmA/d6OeFx_9PY8/s320/eclipse_compiler_setting.png\" width=\"320\" /></a></div><br /><br /><br />And the error will go away.<br />HOWEVER - NOTE - Once you use the eclipse compiler, you should insert the target/source attributes to command line : <br />like this : <br /><pre>-target 1.6 -source 1.6<br /></pre><br />or whatever version you use.<br /><br />There's also <a href=\"http://youtrack.jetbrains.net/issue/IDEA-52447#comment=27-139287\" class=\"mogi-reference\">a comment in a \"YouTrack\" thread by intellij</a> that explains this while suggesting a different solution.<br /><br /><br /><h1>Configuring Eclipse Compiler in a Maven Project</h1><br />If you are compiling with Maven, you should define the eclipse compiler as such <br /><pre class=\"xml\" name=\"code\"><plugin><br>&nbsp;&nbsp;&nbsp; <artifactId>maven-compiler-plugin</artifactId><br>&nbsp;&nbsp;&nbsp; <configuration><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <compilerId>eclipse </compilerId><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <source>1.6</source><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <target>1.6</target><br><br>&nbsp;&nbsp;&nbsp; </configuration><br>&nbsp;&nbsp;&nbsp; <dependencies><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <dependency><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <groupId>org.codehaus.plexus</groupId><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <artifactId>plexus-compiler-eclipse</artifactId><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <version>1.8</version><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </dependency><br>&nbsp;&nbsp;&nbsp; </dependencies><br></plugin><br><br /></pre><br />You can also <a href=\"http://maven.apache.org/plugins/maven-compiler-plugin/non-javac-compilers.html\" class=\"mogi-reference\">read about configuring other compiler</a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5043865329563212222/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/generics-method-signature-type.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5043865329563212222"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5043865329563212222"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/generics-method-signature-type.html",
                        "_title": "Generics - method signature type definition"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TF_0ipfILkI/AAAAAAAAAmA/d6OeFx_9PY8/s72-c/eclipse_compiler_setting.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1367968114921065453",
                "published": "2010-07-31T22:52:00.001-07:00",
                "updated": "2010-08-01T01:51:22.752-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Flex Spy - like Firebug for Flex"
                },
                "content": {
                    "_type": "html",
                    "__text": "The first thing I did on my first day as Flex developer was to find a Firebug parallel for Flex.<br />I quickly found <a href=\"http://code.google.com/p/fxspy/\">FlexSpy</a>.<br /><br />However, if you expect a smooth ride like you had with Firebug, you're in for a disappointment.<br /><br />Setting it up is very easy, all you have to do is run the code :<br />FlexSpy.show()<br /><br />You'd probably want to do this when a button is clicked, or a key event has happened.<br />Using a button might ruin the layout, but it is easier to remember it is there, while key-store might be a security hazard. I am not a big believer in security hazards so I use a key stroke.<br /><br /><br />Pitfalls<br /><br />If you have a pop up of some kind, or any UI component which is not a descendant of \"Application\" you will need to create a new FlexSpy window in order to see that component.<br /><br /><br /><br />References<br /><br />*&nbsp;<a href=\"http://code.google.com/p/fxspy/\">http://code.google.com/p/fxspy/</a>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1367968114921065453"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1367968114921065453"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7834327397064278076",
                "published": "2010-07-26T07:00:00.001-07:00",
                "updated": "2010-07-29T22:32:12.102-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "How to Remote Debug : Java, Flex, Rails.."
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"></div><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TFJiJ31poXI/AAAAAAAAAjc/r-F862UBZlw/s1600/remote_debug.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"239\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TFJiJ31poXI/AAAAAAAAAjc/r-F862UBZlw/s320/remote_debug.png\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">A small diagram trying to show the relationship<br />between the debug-client machine, and debug-server</td></tr></tbody></table><br /><h1>A Bit about Remote Debug</h1>When you work on a web-app you must remote debug from time to time.<br />Java developers use this technic&nbsp;to debug Web-App application (even if you are running the server from the IDE, the logic is still the same).<br /><br />Remote debug is needed when you're running as part of an external application. A Web-App is the most common usage I know of, but I also use this for Maven and more.<br />Remote debug means the application opens up a listener, that listens on debug clients. So technically, if you know the host and the port you can debug that application.<br />The tricky part is, the code you are looking at must be synchronized with the code running remotely.<br /><br />So if you try \"remote debug\", but the application doesn't stop on your breakpoint, or your breakpoint is showing a weird icon (X sign, or something like that) - you are out of sync.<br />Best Practice says - try to break on printings, and if required, add a printing. Adding one is the best way to go - print out something the application would not print. If you're out of idea print out \"I read mograblog\". (mograblog is a very good search phrase).<br /><br />Either way - make sure that you are debugging what you are running.<br /><br /><span class=\"Apple-style-span\" style=\"font-size: 24px; font-weight: bold;\">Java</span><br /><br /><h2>Flex</h2><br /><div style=\"margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;\">When you use Flash Builder for Flex developing, this is done simply by going to \"debug configuraiton\" and unselecting \"Use Default\" for the required configuration.</div><div style=\"margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;\">Instead, you should place something like http://localhost/ - the path to run the Flex application.</div><br /><h2>Rails</h2>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7834327397064278076"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7834327397064278076"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TFJiJ31poXI/AAAAAAAAAjc/r-F862UBZlw/s72-c/remote_debug.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3526948187195769036",
                "published": "2010-07-25T23:16:00.000-07:00",
                "updated": "2010-07-25T23:16:48.335-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Mogi On Blogger - Preview does not count in Stats"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_5lL1y9ELMFM/R--cMUfneJI/AAAAAAAACWM/uq_vnmXCeuw/s400/Blogger_In_Draft.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"108\" src=\"http://2.bp.blogspot.com/_5lL1y9ELMFM/R--cMUfneJI/AAAAAAAACWM/uq_vnmXCeuw/s320/Blogger_In_Draft.jpg\" width=\"320\" /></a></div><br /><br /><br />Still not in draft version! urrrrghhh... use it already! it is awsome.. <br /><br /><br /><h1>New Preview </h1><br />So far blogger had a small preview that didn't really help you see how the post will evetually look like because it was smaller, so the layout was messed up. <br />I think that other than that javascript didn't run as well, and embedding videos didn't really work.. but I can't remember now. I know there were problems. <br /><br />If you blogged recently you would see a nifty popup declaring a new preview ==> A great way to notify users about new features. I really liked it. Unfurtunately I closed it before I captured my screen.. of well. <br /><br />The new preview is also announced in a <a href=\"http://bloggerindraft.blogspot.com/2010/05/better-post-preview.html\">blogger draft blog post</a> just in case you want to read about it. <br /><br /><h1>Stats </h1><br />Once I clicked the \"preview\" I was surprised to see the url on top as \"blogpost\" - meaning, this is as close a preview as it can get. <br /><br />I was \"alarmed\" that this might ruin my statistics, because I try not to enter my own blog in order to get clean numbers about who entered it. <br /><br />I am glad to say the count of \"today pageviews\" remained the same and did not increment. <br /><br />So for all of those wondering if a preview will contaminate your statistics, you can rest assured it won't."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3526948187195769036/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/mogi-on-blogger-preview-does-not-count.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3526948187195769036"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3526948187195769036"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/mogi-on-blogger-preview-does-not-count.html",
                        "_title": "Mogi On Blogger - Preview does not count in Stats"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_5lL1y9ELMFM/R--cMUfneJI/AAAAAAAACWM/uq_vnmXCeuw/s72-c/Blogger_In_Draft.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6727248007997881835",
                "published": "2010-07-25T23:04:00.000-07:00",
                "updated": "2010-07-25T23:08:06.866-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "windows"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Settings AutoRun for CMD and Java Runtime collision problem"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.iconspedia.com/uploads/1250639072811966051.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"200\" src=\"http://www.iconspedia.com/uploads/1250639072811966051.png\" width=\"200\" /></a></div><br /><br />A few days ago I wanted to change the folder my command processor opens at. <br />So I ran into <a href=\"http://www.computing.net/answers/windows-xp/changing-cmd-prompt-directory/139132.html\">this</a> article. <br />Which basically says the following : <br /><br /><br /><br /><br /><br /><br /><li> Open Regedit </li><br /><br /><li>Navigate to \"HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor\" - You can search (ctrl+f)for \"command processor\" </li><br /><br /><li>In the right hand panel, modify Autorun. If there is no Autorun present right click , New ==> String Value </li><br /><br /><li>Call it Autorun and type “cd\\” if you want to set it to C: (provided Windows in installed on C drive). Say to want it to be C:\\togo, type cd\\togo. </li><br /><br /><br />And then I discovered a problem.<br /><br /><h1>Problem when running Runtime.execute in Java</h1><br />I was surprised to discover that this settings cause a problem in Java Code that open new Runtime and executes a command. <br /><br /><pre>Runtime rt = Runtime.getRuntime();<br />rt.exec(\"cmd /c dir\");<br /></pre><br />It turns out the folder I am diring is the folder set at AutoRun. <br />For example if I am running the java code from \"c:\\myJavaCode\\test\\forBlogPost\" but my Auto-Run is set to \"c:\\autorun\" , then I will dir \"c:\\autorun\" - and it is quite obvious when you think about it. <br /><br />The solution is to add \"/D\" to the command which will make is <br /><br /><pre>cmd /D /c  dir<br /></pre><br />the /D option ignores AutoRun scripts.<br /><br />I wrote the following code for you to copy paste<br /><pre class=\"java\" name=\"code\">@Test<br />    public void tempTest() throws IOException {<br />        Runtime r = Runtime.getRuntime();<br />        Process process = r.exec(\"cmd /D /c  dir\");<br />        BufferedReader reader = new BufferedReader(new    InputStreamReader(process.getInputStream()));<br />        String line;<br />        while ((line = reader.readLine()) != null){<br />            System.out.println(\"line = \" + line);<br />        }<br />    }<br /></pre><br />You can read more about cmd options by running \"cmd /?\" and I also found <a href=\"http://ss64.com/nt/cmd.html\">this</a> nicely edited page for you.<br /><br /><h1>Best Practice </h1><br />From now on, whenever you will run a process that runs a command, there is a dilemma whether to ignore AutoRun or not.. <br /><br />In these situations I always like to implement BOTH(!), so I read a system variable or a property file that can disable it. <br /><br />Since this command is for windows, and you probably want to support other OS as well, it is a good idea to export the entire command to a property file all together. <br /><br /><br /><br /><br /><h1>References</h1><br /><li><a href=\"http://www.computing.net/answers/windows-xp/changing-cmd-prompt-directory/139132.html\">Source</a></li><br /><br /><br /><br /><br /><br /><li><a href=\"http://ss64.com/nt/cmd.html\">cmd Reference page</a></li>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6727248007997881835/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/few-days-ago-i-wanted-to-change-folder.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6727248007997881835"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6727248007997881835"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/few-days-ago-i-wanted-to-change-folder.html",
                        "_title": "Settings AutoRun for CMD and Java Runtime collision problem"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4775907942682476031",
                "published": "2010-07-24T04:37:00.000-07:00",
                "updated": "2010-07-24T04:45:37.143-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Mogi On Blogger - Bugs on Draft"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://www.blogger.com/img/logo230_draft.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"129\" src=\"https://www.blogger.com/img/logo230_draft.gif\" width=\"320\" /></a></div>Google is doing a great job with the next version of Blogger.<br />I keep advising you to upgrade.. you should!<br /><br />For developers, it's also a beautiful example of how to develop in an agile way, while keeping the application stable enough for usage.<br /><br />However, as it always happens, there are bugs.<br />Today I started wondering if there's a bug reporting system for blogger?<br /><br />It seems there's a forum. So I decided to try and use it.<br /><a href=\"http://www.google.com/support/forum/p/blogger/thread?tid=3f0a484a089f0f57&hl=en\">http://www.google.com/support/forum/p/blogger/thread?tid=3f0a484a089f0f57&hl=en</a><br /><br />However, I doubt this forum is an official bug reporting system.<br /><a href=\"http://www.google.com/support/forum/p/blogger/thread?tid=53b994d7d0ec7765&hl=en\">http://www.google.com/support/forum/p/blogger/thread?tid=53b994d7d0ec7765&hl=en</a><br /><br />The bug I found (July 24th 2010) if when I try to label a bunch of posts all together using the \"label actions\" on \"edit posts\" page.<br />I have about 60 posts. So in order to label post #45 I have to go to \"Older\" pages.<br />So I reach page for posts 40-45 (for example) and I label the post.. but then I am suddenly back to posts 1-5... annoying! I am unable to label posts quickly and efficiently. <br /><br /><br /><h1>Images Look and Feel Changed </h1><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TErQK8jcIqI/AAAAAAAAAi8/ccbgeU0IoQY/s1600/Images.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TErQK8jcIqI/AAAAAAAAAi8/ccbgeU0IoQY/s1600/Images.gif\" /></a></div>And if we are on Google topic, did you notice Google Image Search look and feel changed? <br />The page used to show small thumbnails with text below it. <br />Now there's no more text and images are bigger. When you hover on one with the mouse it zooms in with a cool effect. <br /><br />The biggest change, however, is probably the fact that you don't have Prev and Next pages anymore.<br />All the images are on same page, and they load in background as you scroll. Which makes the search faster and nicer.<br /><br />I liked it. how about you? (comment below)."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4775907942682476031/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/mogi-on-blogger-bugs-on-draft.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4775907942682476031"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4775907942682476031"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/mogi-on-blogger-bugs-on-draft.html",
                        "_title": "Mogi On Blogger - Bugs on Draft"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TErQK8jcIqI/AAAAAAAAAi8/ccbgeU0IoQY/s72-c/Images.gif",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6318179536794643601",
                "published": "2010-07-17T02:44:00.000-07:00",
                "updated": "2010-07-29T22:03:02.554-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Mogi on Blogger - revisited"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://googlified.com/files/blogger-in-draft-logo.gif\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://googlified.com/files/blogger-in-draft-logo.gif\" /></a></div><br /><a href=\"http://mograblog.blogspot.com/2010/07/first-experience-with-bitly-and-google.html\">Last time</a> I wrote how I would like \"Google Analytics\" built into blogger.. <br /><br />Amazingly, a day or two afterward, it appeared!<br />Of course it is a coincidence, but what a weird one he?<br /><br />&nbsp;It seems<a href=\"http://bloggerindraft.blogspot.com/2010/07/introducing-blogger-stats.html\"> Google announced it a</a>ctually 2 days before I wrote the post, but it appeared a bit later.&nbsp; <br />For those of you who are not using \"draft\" version of blogger, you should, it is stable now, and starts to offer some cool things.<br /><br />However, I feel a lot of things are still missing. My number 1 on the list is the ability to link to an older post easily. I mean - come on.. it's not that hard a feature anyways..<br /><br />So the new \"Stats\" tab that shows you the traffic in your blog was just what I needed, and its getting quite a buzz. I have to admit, I didn't think anyone was reading this blog, and it seems I get a low number of hits per day. And even though it is low, it motivates me.<br /><br />Naturally, I decided to compare this to other people. I got conflicting answers.<br /><a href=\"http://www.blogcatalog.com/discuss/entry/how-many-hits-a-day-on-your-blog\">In this blog,</a> people commented they have hundreds and thousands of entries and unique visitors. (many unique visitors means you're not the only one reading your blog). Moreover, note their blog's age - two weeks, two months.. Mograblog exists for almost a year now.<br />Please comment here as well, on how many hits you get .<br /><br />However <a href=\"http://hubpages.com/hub/Easy-Ways-to-Increase-Traffic-to-your-Website\">this article</a> tells just the opposite, and is probably more reliable.<br />And then you get those annoying photos showing many hits :<br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://s1.hubimg.com/u/3373646.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"120\" src=\"http://s1.hubimg.com/u/3373646.jpg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">http://s1.hubimg.com/u/3373646.jpg</td></tr></tbody></table><br /><br /><br /><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://www.walyou.com/blog/wp-content/uploads/2010/07/Blogger-Stats.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"210\" src=\"http://www.walyou.com/blog/wp-content/uploads/2010/07/Blogger-Stats.jpg\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">http://www.walyou.com/blog/wp-content/uploads/2010/07/Blogger-Stats.jpg</td><td class=\"tr-caption\" style=\"text-align: center;\"></td></tr></tbody></table><br />There are many things you should consider while comparing yourself to others, and while monitoring your own blog.<br /><ul><li>If you read your own blog, \"stats\" will count it as a hit. So you are better of staying in \"edit\" mode or count your own entries in order to calculate the \"real\" hit count.&nbsp;</li><li>Human or Crawler? It is important to know if the reader is a machine or human. However, I couldn't tell if \"stats\" filters out the automated visitors while I compared it to my Google Analytics results. - Google Analytics works with JavaScript, so you can assume the data is from Human visits, but Blogger's Stats might gather in such a way it accidentally picks up non-human traffic as well. In order to get a better understanding, I try to look at the \"traffic source\". This way I can&nbsp;</li> <ul><li>Filter myself out - because all hits from \"draft\" or \"blogger\" are probably me.&nbsp;</li><li>Make sure the reader was human - if you see a google search phrase in the source you can be sure its human.&nbsp;</li><li>Know what your readers are looking for. - I tried doing that with the survey (right top), but as you can see it didn't buzz enough.&nbsp;</li></ul></ul><span style=\"font-size: x-large;\">Going over peoples' searches</span><br /><span style=\"font-size: x-large;\"><span style=\"font-size: small;\">As&nbsp;</span></span>I was going over the sources, I was surprised to find out that they get me as \"sole result\" in Google.<br />Just so you'd get the idea here are two queries for example :<br /><ul><li><a href=\"http://www.google.de/search?hl=de&q=%22uninitialized+constant+Rails%3A%3AInitializer%3A%3AExceptionNotifier%22&aq=f&aqi=&aql=&oq=&gs_rfai=\">http://www.google.de/search?hl=de&q=%22uninitialized+constant+Rails%3A%3AInitializer%3A%3AExceptionNotifier%22&aq=f&aqi=&aql=&oq=&gs_rfai=</a></li><li><a href=\"http://www.google.de/search?hl=en&safe=off&q=HTTP%3A+canonicalising+URL+%2F%2Flocalhost%3A8080%2Fhudson%2F&aq=f&aqi=&aql=&oq=&gs_rfai=\">http://www.google.de/search?hl=en&safe=off&q=HTTP%3A+canonicalising+URL+%2F%2Flocalhost%3A8080%2Fhudson%2F&aq=f&aqi=&aql=&oq=&gs_rfai=</a></li></ul>Note I pasted the search URL and not keywords so I won't mess up this searches in the future.<br />Finding out I am the sole result makes me the happiest blogger on earth - this is exactly why I am writing this blog.<br /><br />The main thing I learned from this is most readers are searching technical information - meaning this post will probably not get a lot of hits, of well..<br />I am glad to announce that since I found this out, I started gathering a lot more technical stuff, and populating my <a href=\"http://wiki.mograbi.co.il/\">wiki</a>. So hopefully soon you will get a lot more unique technical stuff.<br /><br /><br /><span style=\"font-size: x-large;\">Comments<span style=\"font-size: small;\">&nbsp;</span></span><br /><span style=\"font-size: x-large;\"><span style=\"font-size: small;\">Another source of feedback is the comments. It seems blogger can notify your email when a comment was submitted. Have you ever asked yourself \"where can I see comments in blogger?\" . As I was searching I couldn't find the answer.&nbsp;</span></span><br /><span style=\"font-size: x-large;\"><span style=\"font-size: small;\">Blogger! where are my comments?&nbsp; </span></span>it seems there's not single view to show all my comments.<br />Yet another feature that I am missing - and yet again, not a hard one..&nbsp; <br />I strongly recommend you enable email notification for comments.<br />It's a bit confusing because blogger does this great buzz about \"Comment Moderation\" that when you arrive to \"Settings/Comments\" and you see \"moderation\" - you are convinced that the only feature available is moderation..<br /><br />I don't want moderation - I want comments to appear right away. I trust my few readers.. ( <3)<br />It seems that below everything, you have an \"email notification\" for comments. Just scroll down the settings/comments windows and you will see it - then just fill in your email.<br />Strange!! I would have expected this feature to be enabled by default, or at least have a yellow/red status bar saying<br />\"This is important - you don't have comments email notifications\" - with a link and everything.<br /><br />While Google marches on writing the amazing blogger designer, and Stats, for some odd reason these really important and really easy todo (tech joke) features are getting left unnoticed."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6318179536794643601/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/mogi-on-blogger-revisited.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6318179536794643601"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6318179536794643601"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/mogi-on-blogger-revisited.html",
                        "_title": "Mogi on Blogger - revisited"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7719759672692922814",
                "published": "2010-07-03T02:31:00.000-07:00",
                "updated": "2010-07-03T02:39:38.963-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "First experience with Bit.ly and google analytics"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://aboutblog.net/Images/Wordpress/bit.ly-logo.jpg\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"155\" src=\"http://aboutblog.net/Images/Wordpress/bit.ly-logo.jpg\" width=\"200\" /></a></div><br /><a href=\"http://bit.ly/\">Bit.Ly</a><br /><br />Are you using twitter?<br />Did you notice those weird links that start with bit.ly? but direct you to some other place? What is that all about? And they are not nice links.. something like http://bit.ly/9URPo6..<br /><br />Since tweeter allows only 140 characters in a message, someone thought it would be good to shorten all links. On the way they added a tracking one all links - so you can know how many clicks you had.<br />Plus, you can reuse the link.<br /><br /><br />The interface is a bit annoying - sometimes, same URL will appear as different links, because they don't recognize their own links, and reshorten them. meaning - http://bit.ly/9URPo6&nbsp;&nbsp; will become some other bit.ly link, and will be added to tracking log.<br /><br />Oh yeah.. you can't delete a link.. :( <br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://darkrisinggrafx.com/blog/wp-content/uploads/2010/04/1246831917417792463.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" height=\"200\" src=\"http://darkrisinggrafx.com/blog/wp-content/uploads/2010/04/1246831917417792463.png\" width=\"200\" /></a></div><br /><a href=\"http://www.google.com/analytics/\">Google Analytics</a><br /><br />Unlike other \"cool\" applications, this application has a developers look and feel - meaning only developers should look at it.. <br /><br />It's easy to set a new tracking, but finding your way around the different sites you're tracking takes time to get used to.<br /><br /><br />The hierarchy is : Accounts / Profiles / Reports<br /><br />I don't actually know what account and profile differs in, but navigation-wise, if you want to reach from \"profiles\" to \"account\" you should search for \"overview\" link.<br /><br />Reports are the hardest to get out from. You need to click \"Analytics Settings\" - to reach to \"profiles\". only then can you go to \"account/overview\".<br /><br />Once you got a hold of these things, it's almost a smoot ride. This application doesn't perform as smooth as a google application. It lingers on every click.<br />However - the layout of information is quite good, and graphic. In one screen you can know how may visitors you had, when, from where and so on.. <br /><br />I was amazed to discover that blogger doesn't have a built-in support for analytics.. why should I configure anything? it's all google! it seems no google application supports it by default. and that's a shame.<br />While you can easily add it to <a href=\"http://www.andywibbels.com/how-to-add-google-analytics-to-your-blogger-blog/\">blogger by moditfying the template</a> and<a href=\"http://www.google.com/support/sites/bin/answer.py?hl=en&answer=173135\"> \"google sites\" by changing configuration</a>, you can't really use it on picasa for example. Youtube for example has a small analytic mechanism, but it's not sufficient.<br />I was also amazed to know - Flickr (by yahoo) had outdone google by giving the users great analytics on their photos. oh well..&nbsp; <br /><br />And it's always a bummer to discover that you're not imagining - no one visits your sites."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7719759672692922814/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/first-experience-with-bitly-and-google.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7719759672692922814"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7719759672692922814"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/first-experience-with-bitly-and-google.html",
                        "_title": "First experience with Bit.ly and google analytics"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3296100897318852145",
                "published": "2010-07-03T01:03:00.000-07:00",
                "updated": "2010-07-03T02:39:32.465-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "gem"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "YARP - const_missing is depdencies"
                },
                "content": {
                    "_type": "html",
                    "__text": "<table class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\" align=\"center\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S82ZwITYVxI/AAAAAAAAAiE/pGk-YNcy4I8/s1600/rails_pothole.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"><img src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S82ZwITYVxI/AAAAAAAAAiE/pGk-YNcy4I8/s1600/rails_pothole.png\" border=\"0\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">YARP - Yet Another Rails Pitfall</td></tr></tbody></table>I am living on the edge, working with rails 2.3.4.. As I am moving to production, I decided to integrate with \"<a href=\"http://github.com/rails/exception_notification\">exception_notification</a>\" gem. (or plugin?) , and that's after looking at <a href=\"http://railscasts.com/episodes/104-exception-notifications\">Ryan's RailsCasts</a> that I love.<br /><br />Even though Ryan recommends the exception_logger, for starters I preferred the notification instead.<br /><br />At first - I followed <a href=\"http://engtech.wordpress.com/2008/02/06/rails-guide-exception-notifier-plugin/\">these instructions</a> or something similar to those.<br /><br />And it worked fine.. But then, as I committed to SVN, I noticed I have a lot of exception_noti*.rb files marked as \"not-versioned\" - and I couldn't find the exception_notification when I did gem list .. weird..<br /><br />Well, if you note those instructions, they say<br /><pre>ruby script/plugin install exception_notification</pre><br />and not<br /><pre>gem install exception_notifiction</pre><br />huh!? is there a difference?<br /><br />So I tried installing the gem instead. I like running<br /><pre>rake gems:install </pre><br />and see everything happening automatically, and I dislike having code I did not write in the SVN.. BUT - that didn't work! I got<br /><pre>`const_missing': uninitialized constant Rails::Initializer::ExceptionNotifier</pre><br />or other versions of this exception..<br />darn! What is that?<br /><br />Well, as I dug around, it seems what I had was loading order problems. The environment is loaded before the gems, and - practically - there are no exceptions except for rails of course.<br /><br />so I reverted back the plugin configuration, and it sorted everything out.<br />Another \"nice\" thing with plugins is that you don't need to install them on each new environment. You just checkout and go.."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3296100897318852145/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/yarp-constmissing-is-depdencies.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3296100897318852145"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3296100897318852145"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/07/yarp-constmissing-is-depdencies.html",
                        "_title": "YARP - const_missing is depdencies"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S82ZwITYVxI/AAAAAAAAAiE/pGk-YNcy4I8/s72-c/rails_pothole.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1277135364780105458",
                "published": "2010-06-21T13:58:00.000-07:00",
                "updated": "2010-06-21T14:02:45.169-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "javascript"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "SortTable - a nice JavaScript quick add-on to your site"
                },
                "content": {
                    "_type": "html",
                    "__text": "<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://www.thebottomlineisthebottomline.com/images/sorting.gif\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"187\" src=\"http://www.thebottomlineisthebottomline.com/images/sorting.gif\" width=\"200\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">taken from <a href=\"http://www.thebottomlineisthebottomline.com/images/sorting.gif\">.thebottomlineisthebottomline.com</a></td></tr></tbody></table>Amazed that it is not yet built into browsers, I came across the JavaScript called <a href=\"http://www.kryogenix.org/code/browser/sorttable/\">sorttable</a>. By quickly importing the src and marking your table with class=\"sortable\" you can have your tables sorted.<br /><br />It has support in \"total\" lines - that should remain static, and not be sorted and also have an API you can play with from your code. <br /><br /><h1>How do they do it?</h1><br />You have to use 3/4 JavaScript capabilities<br /><br /><a name='more'></a><br /><br /><h3>getElementByTagName </h3><br />You can quickly get all the tables in your HTML page by running <br /><pre>document.getElementsByTagName(\"table\");<br /></pre><br /><h3>getClassName </h3><br />Since we mark the sorted tables with classname \"sortable\", we can know which tables should be sorted simply by using the following function<br /><pre>var t = document.getElementsByTagName(\"table\")[0]; // lets take the first table for example<br />var cn = t.className<br /></pre><br />Now, the variable \"cn\" contains the string written in \"class\". Since there can be more than  a single style in the class, you should split and iterate over results, or using regular expression - something like <a href=\"http://snipplr.com/view/1696/get-elements-by-class-name/\">this site</a> does. Examples are not missing. <br /><br /><h3>Replacing Rows </h3><br />This will probably be most tedious step of all. You should know about <a href=\"http://tutorials.haxansweb.com/javascript/miscellaneous/Add-a-table-row-dynamically-By-david\">Table API in JavaScript</a> and there are more than enough tutorials for that. <br /><br />This is also the time to remember the sort algorithms you once knew. <br />I'd probably prefer to build a small array simulating the table, sort that, and let it output the correct order of rows by index, then iterate one last time ( O(n)) over the table, setting the rows in their new indexes. <br /><br /><h3>Enhancements </h3><br />As I said before, the script also allows you to keep some rows unsorted. For example - the \"total\" row. <br /><br />This is a simple extension. While accessing the table via JavaScript, you can choose which part of the table. <br />Each table can support THEAD, TFOOT, and multiple TBODY. <br /><br />All you have to do is access the TBODY part, and that's it. <br />You can also decide here to support multiple TBODY as well, and configure how to sort them - each TBODY on its own, or all of them together.. <br /><br /><br /><h1>Example </h1><br />I have allowed myself to copy a small example from the documentation on to this post. <br /><br /><div style=\"border: 1px solid black;\"><script src=\"http://www.kryogenix.org/code/browser/sorttable/sorttable.js\"></script><br />This example is from <a href=\"http://www.kryogenix.org/code/browser/sorttable/\">sorttable documentation</a><br /><br /><style>/* Sortable tables */ table.sortable thead {     background-color:#eee;     color:#666666;     font-weight: bold;     cursor: default; } </style><br /><br /><table class=\"sortable\"><tbody><tr>     <th>Name</th> <th>Salary</th> <th>Extension</th> <th>Start date</th> <th>Start date (American)</th> </tr><tr> <td>Bloggs, Fred</td> <td>$12000.00</td> <td>1353</td> <td>18/08/2003</td> <td>08/18/2003</td> </tr><tr><td>Turvey, Kevin</td> <td>$191200.00</td> <td>2342</td> <td>02/05/1979</td> <td>05/02/1979</td> </tr><tr> <td>Mbogo, Arnold</td> <td>$32010.12</td> <td>2755</td> <td>09/08/1998</td> <td>08/09/1998</td> </tr><tr> <td>Shakespeare, Bill</td> <td>$122000.00</td>  <td>3211</td> <td>12/11/1961</td> <td>11/12/1961</td> </tr><tr> <td>Shakespeare, Hamnet</td> <td>$9000</td> <td>9005</td> <td>01/01/2002</td> <td>01/01/2002</td> </tr><tr><td>Fitz, Marvin</td> <td>$3300</td> <td>5554</td> <td>22/05/1995</td> <td>05/22/1995</td> </tr></tbody> </table></div><br />Also available at <a href=\"http://mograbi.co.il/guy_mograbi/jsps/examples/sortTable.jsp\">my site</a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1277135364780105458/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/sorttable-nice-javascript-quick-add-on.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1277135364780105458"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1277135364780105458"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/sorttable-nice-javascript-quick-add-on.html",
                        "_title": "SortTable - a nice JavaScript quick add-on to your site"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5435833448438586237",
                "published": "2010-06-21T13:10:00.000-07:00",
                "updated": "2010-06-21T14:03:53.624-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "ruby"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "redis"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "gem"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Redis"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a href=\"http://code.google.com/p/redis/logo?cct=1238151630\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://code.google.com/p/redis/logo?cct=1238151630\" /></a><br />At first, it is most easy to think about <a href=\"http://code.google.com/p/redis/\">Redis</a> like a fancy HashMap masked as a database. But as you go along, you see it is more than that. <a href=\"http://try.redis-db.com/\">try it yourself</a><br /><br />Unfortunately, Redis can only be installed on unix machines. There's no windows installation. <br /><br /><br /><a name='more'></a><br /><br /><h1>plugins </h1>There are many clients in many <a href=\"http://code.google.com/p/redis/#Supported_languages\">supported language</a><br /><br /><h1>RubyGem</h1>In order to get the gem you should install GIT and ruby first. <br />Then run the command<br /><pre>git clone http://github.com/ezmobius/redis-rb.git<br />cd redis-rb/<br />rake gem<br />gem install pkg\\redis-2.0.0.gem<br /></pre><br />Now that the plugin is installed, you can start using it like this<br /><pre>require \"rubygems\";require \"redis\"<br />r=  Redis.new(:host=>\"localhost\")<br />r.get \"myKey\"<br /></pre><br />The most useful commands you'd probably use a lot would be <br /><pre>r.type key<br /></pre>That tells you what is the type of the value, and <br /><pre>r.keys k*<br /></pre>Which returns a list of all keys matching the regular expression. <br /><br /><h1>When to Redis </h1><br /><a href=\"http://www.paperplanes.de/2009/10/29/when_to_redis.html\">When to Redis</a> is a good article that will give you some idea about when you should use Redis. <br />To name a few : Worker Queue and Cache. <br />Recommended reading. <br /><br /><h1>References</h1><br /><br /><li> <a href=\"http://masonoise.files.wordpress.com/2010/03/redis-cheatsheet-v1.pdf\">Cheat Sheet</a></li><br /><br /><br /><br /><li> <a href=\"http://try.redis-db.com/\">Online Tutorial</a></li><br /><br /><br /><br /><li><a href=\"http://www.paperplanes.de/2009/10/29/when_to_redis.html\">When to Redis</a></li>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5435833448438586237/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/redis.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5435833448438586237"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5435833448438586237"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/redis.html",
                        "_title": "Redis"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3787702584464972381",
                "published": "2010-06-15T02:55:00.000-07:00",
                "updated": "2010-06-28T07:55:47.847-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "eclipse"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Flex Quicky - How to define a new Application after file already created"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S69fN8i_IfI/AAAAAAAAAiE/Ch8Cm8MOJdI/s1600/flex_debug.bmp\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S69fN8i_IfI/AAAAAAAAAiE/Ch8Cm8MOJdI/s1600/flex_debug.bmp\" /></a></div><br /><br /><br />So you are writing code, and now you want to run it.It is then you discover you forgot to select MXML Application and instead you chose MXML Component, which means you can not run it.<br /><br />Solution after the jump<br /><a name='more'></a><br /><br />To fix this, open a file called \".actionScriptProperties\"<br />find the tag \"applications\" and add another entry \"application\" under it with the path to your file.<br /><br />It will look something like<br /><pre><application path=\"testers/VisitsTester.mxml\"/><br /></pre>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3787702584464972381/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/flex-quicky-how-to-define-new.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3787702584464972381"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3787702584464972381"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/flex-quicky-how-to-define-new.html",
                        "_title": "Flex Quicky - How to define a new Application after file already created"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S69fN8i_IfI/AAAAAAAAAiE/Ch8Cm8MOJdI/s72-c/flex_debug.bmp",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5997716385198642429",
                "published": "2010-06-14T00:51:00.000-07:00",
                "updated": "2010-06-28T07:56:32.244-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "word"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "microsoft"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "office"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Document Location in Office 2007"
                },
                "content": {
                    "_type": "html",
                    "__text": "A very helpful customization in Office is the \"Document Location\". <br />What it does is simply place a text-field with the full path of the file.. <br /><br />This way, you have an immediate copy-paste of the file location. <br />I don't know about you, but as a developer I use it a lot. <br /><br />This is how it looks like<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TBXenSl4SsI/AAAAAAAAAiM/J-zMWcuge3Q/s1600/document_path.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"113\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/TBXenSl4SsI/AAAAAAAAAiM/J-zMWcuge3Q/s320/document_path.jpg\" width=\"320\" /></a></div><br /><br />See how to get it after the jump<br /><a name='more'></a><br /><br />For example in WORD<br /><li> Go to the Office Icon on top left </li><br /><li> Go to Word Options  </li><br /><li> Click Customize  </li><br /><li> Choose \"all commands\" </li><br /><li> Scroll down and double click on Document Location </li><br /><li> Close everything and look at the top left of the window - you should see the same image as embedded above </li><br /><br /><br />Enjoy. <br /><br />In order"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5997716385198642429/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/document-location-in-office-2007.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5997716385198642429"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5997716385198642429"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/document-location-in-office-2007.html",
                        "_title": "Document Location in Office 2007"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/TBXenSl4SsI/AAAAAAAAAiM/J-zMWcuge3Q/s72-c/document_path.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3327955798585214096",
                "published": "2010-06-13T16:05:00.000-07:00",
                "updated": "2013-04-24T19:36:39.771-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "youtube"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "intellij"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "How fast can you go? - Uploading Videoto YouTube with API"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://tell.fll.purdue.edu/JapanProj/FLClipart/Adjectives/fast.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"181\" src=\"http://tell.fll.purdue.edu/JapanProj/FLClipart/Adjectives/fast.gif\" width=\"320\" /></a></div><br /><br />Today, I was asked to help with uploading a video to YouTube.<br />I said I will look into this when I get home.<br /><br />Since I already had an environment - it took me 30 minutes with Troubleshooting - this is a very long time.. However, for some it might seem really quick. <br /><br />Lets go over from the start - what you should have in order to get things going really fast.<br /><br /><a name='more'></a><br /><br /><h1>Java </h1><br />I don't like when people use the IDE's Java. <br /><br />Best thing to do is to download the JDK, and then define a system variable : <br />JAVA_HOME which points to the parent of the JDK bin folder. <br />Then add to Path %JDK_HOME%\\bin<br /><br />Most of the developers I know simply place the JDK under \"c:\\Program Files\\Java\". <br />I hate that approach. <br />When I get a new computer, I create a new folder \"c:\\dev_env\" - and place everything under it.. so in the JDK case, I get the hierarchy :<br />c:\\dev_env\\jdk\\jdk_1.6.10 - for example. <br />You should note that I am prepared for multiple JDK versions. <br /><br />If I do have multiple versions, I can simply change JAVA_HOME to JAVA_1_6_HOME and create a new variable for JDK 1.5 (for example), while switching between them is as easy as modifying the name. <br /><br />You should verify you have JDK installed properly by opening a command line and running the command <br /><pre>java -version </pre><br />It should print the version. <br />If this doesn't work well : <br /><br /><li> make sure you opened a new command line - each change in system variable requires a new command line </li><br /><br /><br /><br /><br /><br /><li> make sure you understand the meaning of JAVA_HOME. <br />In the location %JAVA_HOME%\\bin you should find the file java.exe and javac.exe.</li><br /><br /><br /><br /><br /><br /><h1>Maven </h1><br />The process above is similar to almost all the Java frameworks you will work with. <br />For example - Maven. <br />Maven is probably the most efficient tool when you start developing with Java. <br />Download it from <a href=\"http://maven.apache.org/download.html\">here</a> and take the time to go over tutorials. Feel free to have a peek at <a href=\"http://sites.google.com/site/guymograbi/presentations\">my slide</a>. <br /><br />The following instructions are from the Maven Site. <br />Define M2_HOME system variable to point to Maven's bin parent folder. <br />Define M2 system variable as %M2_HOME%\\bin<br />Add %M2% to Path. <br /><br />make sure everything is installed correctly by running the command <br /><pre>mvn -version </pre>just like with Java. <br /><br />Once these two things work it is time to get going with an IDE. <br /><br /><h1>IDE </h1><br />Personally, I like Intellij, and I will use it in the rest of this post. <br />However, you are probably using Eclipse. <br /><br />You should make sure you know the following : <br /><br /><li> Tell the IDE to use the external JDK - the one we defined together just a minute ago. This gives you a much better control of the environment </li><br /><br /><br /><br /><br /><br /><li> Explore using Maven with your IDE. In Intellij there's nothing to explore - it is built it.. With Eclipse, I believe there's a plugin to install - this plugin is known as the best Maven support in an IDE... I still prefer Intellij.  </li><br /><br /><br /><br /><br /><br />Did you notice we are not dealing with google-api yet?? wait for it.. <br /><br />Now that you installed Maven and Java and an IDE, you should be able to create a new Java project with Maven support. <br /><br />HINT : <br /><pre>mvn archetype:generate </pre>use the default menu number (mine is 58) - it points on quickstart.. <br /><pre>cd <project_name> mvn clean install</pre><br />First run takes a lot of time, because Maven initializes itself. <br />The following clean/installs will be quicker. <br /><br />Your project should have the following stucture : <br /><pre>root<br />+---- pom.xml<br />+---- src<br />+----main<br />+----java<br />+----resources<br />+---test<br />+-----java<br />+----resources<br /></pre><br />pom.xml is your bible from now on.. learn it, know it, love it.. <br />Your IDE should support \"open project\" + select the pom.xml. <br /><br />The reason the IDE supports that is that the POM.xml is the description of the entire project.<br /><br /><h1>Nexus </h1><br />Nexus Maven Repository is your friend. <br />The repository allows you to find jars very quickly. <br />For example - while running the google youtube code sample, I got a ClassNotFoundexception ... 2 seconds later, I already had the jar in my project, and I was running again. I simply copy-pasted the fully qualified class name to nexus search and it gave me the required jar. <br />Clicking the search result, nexus also gives you the code you need to copy-paste into your pom.xml. It can't get any simpler than that. :)<br /><br />Sometimes you need to configure Maven with new repositories. <br/>You do that in the settings.xml file found under M2_HOME. This file is very well documented. So if you have a problem, simply read it.<br />It's self-explanatory.<br /><br /><h1>Setting the project with a test </h1><br />Go to your pom.xml, change the junit dependency version to 4.5, instead of 3.8.1. <br />This will allow you to use @Test notation. <br /><br />Create a new Class under \"src/main/test/...\" lets name it <br />\"YouTubeSample\". <br /><br />Write the following  method <br /><pre>@Testpublic void testHelloWorld(){   System.out.println(\"hello world!\");}</pre><br />with a mouse right-click you should be able to run only that method.. <br />This is a very powerful way to run sample codes. <br />And you will probably use it along the way. <br />We won't use it here any more, but it will be important later on. <br /><br /><h1>Google API </h1><br />In google's <a href=\"http://code.google.com/p/gdata-java-client/downloads/list\">GData Project</a> You can find gdata-samples.java-version.zip which is a great source for code-samples for their entire API. <br /><br />Very quickly you will find gdata\\java\\sample\\youtube - in which you will find YouTubeUploadClient, however I used an older version that only had \"YouTubeWriteClient\".. I don't think there's a great difference. <br /><br />Copy-Paste the content. Change the package name, change the class name  - this is a great opportunity to learn the refactor functionality of your IDE. Intellij users - alt+enter is your guardian angel. <br /><br />Ok, currently, your code won't compile. <br />Find the classes you are missing, and search them in the nexus repository - add each jar you need to your pom. <br /><br />This will repeat itself like 3-4 times. <br /><br />My Project has some dependencies you won't need since I have code samples other than YouTube, but it will definitely help you when you hesitate between multiple suitable jar results in Nexus<br /><br /><pre><dependencies><br /><dependency><br /><groupId>org.apache.httpcomponents</groupId><br /><artifactId>httpclient</artifactId><br /><version>4.0</version><br /></dependency><br /><dependency><br /><groupId>com.google.gdata</groupId><br /><artifactId>gdata-core</artifactId><br /><version>1.0</version><br /></dependency><br /><dependency><br /><groupId>com.google.gdata</groupId><br /><artifactId>gdata-blogger</artifactId> <br /><version>2.0</version><br /></dependency><br /><dependency><br /><groupId>com.google.collections</groupId><br /><artifactId>google-collections</artifactId><br /><version>1.0</version><br /></dependency><br /><dependency><br /><groupId>com.google.gdata</groupId><br /><artifactId>gdata-media</artifactId><br /><version>1.0</version><br /></dependency><br /><dependency><br /><groupId>javax.mail</groupId><br /><artifactId>mail</artifactId><br /><version>1.4</version><br /></dependency><br /><dependency><br /><groupId>com.google.gdata</groupId><br /><artifactId>gdata-youtube</artifactId><br /><version>2.0</version><br /></dependency><br /><dependency><br /><groupId>com.google.gdata</groupId><br /><artifactId>gdata-client</artifactId><br /><version>1.0</version><br /></dependency><br /></dependencies><br /></pre><br />While you're fixing compilation errors, you should see the test is reading username/passowrd and something called developer-key or application-key or something like that.. <br /><br />A quick search in google shows I should register my application <a href=\"http://code.google.com/apis/youtube/dashboard\">here</a>. Just give it a name, and it will give you a key. Copy paste them to the code. <br /><br />This was my first troubleshooting - I discovered after several minutes, that the account I was using didn't activate YouTube well. Make sure you can login to YouTube with the account you're testing with - otherwise you get \"Invalid login credentials\" message. <br /><br />It seems they have a lack of consistency in the API while constructing the YouTubeService.. This is what worked for me : <br /><pre>new YouTubeService(developerKey,developerKey);</pre><br />make sure you set the correct credentials later <br /><pre>service.setUserCredentials(username, password);</pre><br />NOW RUN! In the ClientWriter code sample I got a menu that looked like this <br /><pre>Choose one of the following demo options: 1) My Uploads 2) My Playlists 3) My Favorites 4) Comment on a video 5) Upload a new video 6) Add a favorite 7) Print user activity 8) Print my friends' activity 0) Exit</pre><br />So I chose \"5\" of course.. <br />I prepared a small video in advance.. you can download it at <a href=\"http://sites.google.com/site/guymograbi/java/test1.avi?attredirects=0&d=1\">my google site</a>. It is 300K, so it only takes a couple of seconds to load. <br />I gave it the path, later the <a href=\"http://www.w3schools.com/media/media_mimeref.asp\">Mime type</a> and then a name. <br />It looked like this <br /><br /><pre>Enter Number (0-8): 5First, type in the path to the movie file:C:\\Users\\User\\Desktop\\test1.aviWhat is the MIME type of this file? (ex. 'video/quicktime' for .mov)video/x-msvideoWhat should I call this video?myFirstApiTestVideo uploaded successfully!</pre><br /><br />And my video was loaded :) <br /><br />Here it is<br /><object height=\"385\" width=\"640\"><param name=\"movie\" value=\"http://www.youtube.com/v/Raze1jCZDPo&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/Raze1jCZDPo&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"385\"></embed></object><br /><br /><h1>Conclusion </h1><br />Once your environment is set up properly, the \"real work\" is easier than you can imagine."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/3327955798585214096/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/how-fast-can-you-go-uploading-videoto.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3327955798585214096"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3327955798585214096"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/how-fast-can-you-go-uploading-videoto.html",
                        "_title": "How fast can you go? - Uploading Videoto YouTube with API"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-129325111819698734",
                "published": "2010-06-12T02:44:00.000-07:00",
                "updated": "2010-06-13T23:35:34.717-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "facebook"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Facebook Fan Pages: How To Create and Promote Yours"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><br /><br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://www.kliaekspres.com/erlsb/Portals/0/Images/socialnetworking/icon_facebook.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"102\" src=\"http://www.kliaekspres.com/erlsb/Portals/0/Images/socialnetworking/icon_facebook.png\" width=\"200\" /></a></div><br /><br />Do you want a facebook page but don't know how?? I didn't know either until I saw this video. Thank you Mari. I really liked your accent.<br /><br /><br /><br /><br /><br /><br /><br /><br /><object height=\"344\" style=\"background-image: url(http://i2.ytimg.com/vi/igLDVCywlls/hqdefault.jpg); clear: right; float: right;\" width=\"425\"><param name=\"movie\" value=\"http://www.youtube.com/v/igLDVCywlls&hl=en_US&fs=1\"><param name=\"allowFullScreen\" value=\"true\"><param name=\"allowscriptaccess\" value=\"always\"><embed src=\"http://www.youtube.com/v/igLDVCywlls&hl=en_US&fs=1\" width=\"425\" height=\"344\" allowScriptAccess=\"never\" allowFullScreen=\"true\" wmode=\"transparent\" type=\"application/x-shockwave-flash\"></embed></object>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/129325111819698734/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/facebook-fan-pages-how-to-create-and.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/129325111819698734"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/129325111819698734"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/facebook-fan-pages-how-to-create-and.html",
                        "_title": "Facebook Fan Pages: How To Create and Promote Yours"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-902164486796088638",
                "published": "2010-06-12T01:32:00.000-07:00",
                "updated": "2010-06-13T23:36:40.127-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Google's Translator"
                },
                "content": {
                    "_type": "html",
                    "__text": "Wow! Did you see that? <br /><br />Youtube has subtitles now, and it's in all languages(!).. cool, isn't it?<br /><br /><br /><object height=\"364\" width=\"445\"><param name=\"movie\" value=\"http://www.youtube.com/v/siOHh0uzcuY&hl=en_US&fs=1&rel=0&color1=0xcc2550&color2=0xe87a9f&border=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/siOHh0uzcuY&hl=en_US&fs=1&rel=0&color1=0xcc2550&color2=0xe87a9f&border=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"445\" height=\"364\"></embed></object><br /><br />It probably works with Voice Recognition, and Google Translator to achieve these features.. <br /><br />You can change the language with the controller below, to get the subtitles in your native language. <br /><br />It's far from perfect, especially when dealing with technical words and acronyms, which is totally understandable. It rocks. It really does. <br /><br />There are many projects that should supply translations to you, such as in <a href=\"http://mozillalabs.com/conceptseries/2010/03/11/announcing-the-collaborative-video-subtitling-design-challenge/\"> Mozilla's Lab</a>. However, while some just start talking about it, Google is already there! <br /><br />Simply by taking 2 technologies it probably already has : voice recognition and <a href=\"http://translate.google.com/#\">translation</a> you get yet another powerful boost from Google to the web. <br /><a name='more'></a><br /><h1>Keeping ahead </h1><br />It seems the world simply can't keep up with Google's pace. And the translation feature simply proves it yet again. <br /><br />It seems to me that if someone wants a breakthrough, they should support not a translation, but rather dubbing the videos. We are still far away from automating that process, so manual work is still required in this section, <b>if such a feature is required at all</b>. <br /><br /><h1>Goodbye Babylon </h1><br /><a href=\"http://i42.tinypic.com/1222p7n.jpg\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"189\" src=\"http://i42.tinypic.com/1222p7n.jpg\" width=\"200\" /></a><br />It so often happens that a company survives on a mere small niche that is so desperately needed in the world. <br />Such a case is the translation need. Over the years Babylon became more than that - allowing search on Wikipedia and defining your own dictionaries (which I found very helpful to keep a phonebook in). <br /><br />How far are we to say goodbye to such applications? Babylon seems to me to be the strongest one, so we will probably see it first at some smaller initiatives. <br /><br />Just think of the potential Google has right now! <br /><br />For example : about 4 months ago I bought Windows 7, and accidentally got it in my native language and not English. It was hell to switch it back - time consuming and full of bureaucracy. Now think about OS by Google, and how hard should it be to translate it? <br />Not only it should be painless, but it can dynamically translate everything to your needs. <br /><ul><li> Files you just downloaded will automatically have a translated file name</li><li> content of such files can be automatically translated</li><li> String of applications running in that OS can be automatically translated (goodbye I18N support! Yey) </li><li> SMS over Google phones can be auto translated </li></ul><br />We are soon to experience that translation power on <a href=\"http://www.youtube.com/watch?v=AvQhxWK9-KY\">Google Wave with Rosy</a> and to tell you the truth, I see no limit to Google's translation power. Adding to that - no competitors on the market at all! Wake up giants.<br /><br /><h1>The final frontier </h1><br />How far can this go?  really.<br />Will we one day have a single language on the keyboard? <br />Will we be able to talk Hebrew on the phone, and it will be English on the other end? (Something like in Start-Trek world?)<br />Will we be able to take lectures in Hebrew from Harvard? <br /><br />Will we be able to finally talk to dolphins, and will dogs be able to search Google easily? :) (Just Kidding).<br /><br /><img src=\"http://www.spudart.org/blog/images/2006/dog-on-computer.jpg\"/><br /><br /><br /><br /><h1>What does this mean for developers? </h1><br />Developers today need to program the support for translations. We have mechanisms in frameworks and so on, but eventually, we need to supply the translation, and layout new layouts. <br /><br />How much of this will be redundant with Google Translation Advanced? Potentially, everything.  Your site today can already be translated automatically without any effort. What about non web applications? We might be seeing a breakthrough in this in a much nearer future than we imagined so far - who imagined that by 2009-2010 Google will be able to auto caption and translate movies? I didn't. <br /><br />Remains to be seen. <br />Thank you Google yet again."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/902164486796088638/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/googles-translator.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/902164486796088638"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/902164486796088638"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/googles-translator.html",
                        "_title": "Google's Translator"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://i42.tinypic.com/1222p7n_th.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5447931219313034057",
                "published": "2010-06-12T00:00:00.000-07:00",
                "updated": "2010-06-12T00:01:25.625-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "aptana"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Helpful things to have with Rails"
                },
                "content": {
                    "_type": "html",
                    "__text": "As I was writing  <a href=\"http://projectmanager.mograbi.co.il/\">\"Steps\"</a> I ran into some very helpful information about Rails. So I thought to share.<br /><br /><br /><br /><h1>Aptana RadRails </h1><br /><br /><a href=\"http://www.rubyinside.com/wp-content/uploads/2007/06/aptana_ide.gif\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://www.rubyinside.com/wp-content/uploads/2007/06/aptana_ide.gif\" /></a>Basically, you don't need an IDE to help you program Ruby. It's a very simple language to handle with a Notepad. However, IDEs are not just a language helper, and while using Rails, I found it very helpful to use <a href=\"http://aptana.com/products/studio3\"> Aptana - RadRails </a><br /><br />It helps me find definition and usage of functions.<br />It helps me refactor (even though I don't do much.. when I do, it is helpful).<br />It helps me open a file quickly, and mark when I have a definite error.<br /><br />And of course.. debug...<br /><br />It has a lot of cool features, and I just specified a few. If you decide to try it, you should check out the rake support they have as well.<br /><br />Now, if your IDE already does all these things, then you don't really need it, however it is a really cool tool for beginners since it is based on Eclipse, so it introduces a familiar Look & Feel.<br /><br /><br /><h1>ScreenCases By Ryan Bates </h1><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://railscasts.com/images/logo.png?1265599255\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"62\" src=\"http://railscasts.com/images/logo.png?1265599255\" width=\"320\" /></a></div><br /><br />Books and Articles, Forums and Tutorials cannot help you as much as <a href=\"http://railscasts.com/\">Ryan Bates</a> can.<br />You simply don't know until you try.<br /><br />Not a post goes by without teaching you something new, or something old but in a different way.<br /><br />And its not just the content of the posts, but everything is all so organized. Each post has links to older posts that is somehow related to it and the entire source. So you don't have to work hard at all to get when you need.<br /><br />Ryan, thank you."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5447931219313034057/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/helpful-things-to-have-with-rails.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5447931219313034057"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5447931219313034057"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/06/helpful-things-to-have-with-rails.html",
                        "_title": "Helpful things to have with Rails"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7698591367613665305",
                "published": "2010-05-16T02:53:00.001-07:00",
                "updated": "2010-06-12T00:09:39.884-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Flex truncate"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7698591367613665305"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7698591367613665305"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1454622919312358441",
                "published": "2010-05-11T13:52:00.001-07:00",
                "updated": "2010-06-12T01:38:01.600-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "windows 7"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "microsoft"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Windows 7 and Antivirus = Router Disconnections ?"
                },
                "content": {
                    "_type": "html",
                    "__text": "As if straight out of Ripley's believe or not, it seems that an antivirus installed on windows 7 prevents router reconnection. May sound strange, but I believe so. <br /><br />I can live with an internet connection that sometimes disconnects. However, I do expect a router to recover from such thing. Since I was home ever since my win7 arrived, I didn't notice it until 2-3 weeks ago (when I started working again) - but the router did not recover from disconnections anymore. <br /><br />I have 3 computers. 2 XPs and 1 Win7. But I experienced the problem only on Win7.<br /><br />OK - so what do you do? Well, the solution was to remove my Anti-Virus  and install \"Microsoft Security Essential\". It's been a week now and everything seems to be fine. I detect disconnections, but 1-2 minutes later, the problem is solved. (Which is tolerable).<br /><br /><br />UPDATE<br /><br />Well several weeks later, and I am glad to say problem is solved! <br />I can see disconnections occur still, but at least the system bounces back and reconnects - so my surf is undisturbed."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1454622919312358441/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/05/windows-7-and-antivirus-router.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1454622919312358441"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1454622919312358441"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/05/windows-7-and-antivirus-router.html",
                        "_title": "Windows 7 and Antivirus = Router Disconnections ?"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8927091369250042685",
                "published": "2010-05-06T13:47:00.000-07:00",
                "updated": "2010-05-06T13:47:08.606-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Workspace"
                },
                "content": {
                    "_type": "html",
                    "__text": "<span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\">It is very simple and easy today to have a working integration environment.&nbsp;</span></span></span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\">You have public Maven repositories for build with dependencies.&nbsp;</span></span></span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\">You have Google Code (among others) for SVN repositories.&nbsp;</span></span></span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\"><br /></span></span></span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\">Soon you will have IDEs online, but the free stuff that you download are just the same.&nbsp;</span></span></span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\">You have downloadable, plug & playable, out of the box servers such as mongrel, Tomcat, Jetty (just to name a few) and nowadays we are starting to see Play! Framework and this is just the beginning.&nbsp;</span></span></span></span><br /><span class=\"Apple-style-span\" style=\"font-family: Arial; font-size: small;\"><span class=\"Apple-style-span\" style=\"font-size: 13px;\"><span class=\"Apple-style-span\" style=\"font-family: 'Times New Roman';\"><span class=\"Apple-style-span\" style=\"font-size: medium;\"><br /></span></span></span></span><br />Do you want to build an IPhone application but you don't have a mac? No problem, with just a few cents you can have one in a cloud up and running.<br /><br />How cool is it? think about it...<br /><br />However, I don't really like spreading myself too much. Its a bit crazy even, because if my computer fails, I loose everything. There's no logic, I know. But I like to try out stuff, and find better platform while understanding why they are better. Is Eclipse better than Intellij ? Is SVN better than GIT or Starteam (can I even compare?). How do you configure Tomcat to listen on port 80 and not 8080.. I want to know!<br /><br />So everything is running locally.. In this blogspot I will explain a bit about how I work, and what installed here.<br /><br /><br /><a name='more'></a><span class=\"Apple-style-span\" style=\"font-size: xx-large;\">Brief Overview</span><br />I write my code on Intellij - currently open community, but I will soon but a personal license.<br />Until I but Intellij, I use Aptana to write code for Rails.<br /><br />I have SVN repository for Version Control - and soon I will upgrade to GIT.<br />I have Tomcat for Java webapps, Mongrel for Rails webapps, and Apache Server to manage incoming connections.<br />The Apache server also opens dav to expose SVN with HTTP protocol.<br />My Tomcat is running my site, Nexus Maven repository, and recently I also added Hudson.<br /><br />I have a mysql database. (I used to have MSSQL Express)<br /><br />I maintain a wiki on Google Sites, and this blog on Blogger.<br /><br />I use paint.net to create images. (I create or render all the images you will find in this blog and at my site).<br />I record my screen and my voice for videos on YouTube using CamStudio. I encode it to MP3 using ffdshow video encoder. <br /><br />I use FireFox, Chrome, Safari and Explorer to check the things I did.<br /><br />And it's all running on a new Win7 Quad desktop. That's more or less that...<br /><br /><span class=\"Apple-style-span\" style=\"font-size: xx-large;\">Not so far in the future</span><br /><br />My latest edition was Hudson. Soon I will buy an Intellij license - this will allow me to continue writing Flex after the evaluation license on FlexBuilder expired.<br /><br />Once that is done, I will use Selenium to automate testing for my site. Hudson will run everything automatically for me.. which basically means I can be far away from my computer and update my sites continuously.<br /><br />I will also get a Macintosh in a cloud to write some IPhone / IPad applications for some time.<br /><br />I will use GIT instead of SVN (or combined? probably not)<br /><br />I still want an issue tracking system. (considering Trac, but only since I am out of options. Maybe this will be a fun&nbsp;challenge&nbsp;to write myself with Hudson/SVN/GIT/Eclipse/Intellij integrations).<br /><br />Somewhere along the line I will get a .NET and PHP workspace as well. (and probably some other technologies I have yet to read about).<br /><br /><span class=\"Apple-style-span\" style=\"font-size: xx-large;\">What I want to see</span><br />I was amazed to discover Hudson. I assumed that such a cool application will be widely familiar.<br /><br />It's not the first and not the last time this will happen to me.<br /><br />How I would love to see a site that summarizes technologies of the type I mentioned above and more, allowing others to review and rate them while categorizing them by usages.<br /><br /><span class=\"Apple-style-span\" style=\"font-size: xx-large;\">Conclusion</span><br /><br />Ah... The road is long, and by the time I get to the end, some of it might not be relevant anymore, new stuff will arise and this list will lengthen.<br /><br />Setting up these environments is quite easy - if you get a good documentation.<br />When I go to a new work-place today, I have no problem setting these environments quickly and allowing myself the flexibility I need in order to Research and Develop better and quicker.<br />My goal is, of course, to document everything on this blog and in the wiki. So far, my pace is slower than I hoped for.<br /><br />I recommend you get your hands dirty as well. It's challenging, educational,&nbsp;intriguing and once you get it to work - satisfying."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8927091369250042685/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/05/my-workspace.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8927091369250042685"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8927091369250042685"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/05/my-workspace.html",
                        "_title": "My Workspace"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7278552956630803975",
                "published": "2010-04-27T13:38:00.000-07:00",
                "updated": "2010-06-12T00:10:40.111-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "apache"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "svn"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "SVN + Apache (Continue) - Permissions"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S7mA62ZCkHI/AAAAAAAAAbY/TFOnWXhtrr0/s1600/rails-flash.jpg\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"156\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S7mA62ZCkHI/AAAAAAAAAbY/TFOnWXhtrr0/s200/rails-flash.jpg\" width=\"200\" /></a></div><a href=\"http://mograblog.blogspot.com/2010/04/svn-apache-easy-lets-make-it-work.html\">Last time </a>I explained how I got my Apache to forward calls to the SVN. <br />It was pretty hard due to lack of documentation. <br /><br />This time I wanted to configure some basic permissions. It was pretty easy - and I also found great documentation. One catch though... as always. <br /><br /><a name='more'></a><br /><br /><h1>Goal Definition </h1><br />If you read any of my articles so far, you might have noticed that when I deal with something new, I try to keep my goals to a minimum. <br /><br />The minimum I could think of in this case is : <br /><ul><li>Allow me to write into the SVN</li><li>Allow anyone to read - Anonymous read accesss</li></ul><br /><h1>Wrong documentation </h1><br />When I started the search, I looked for configuring permissions in SVN. I found <a href=\"http://draft.blogger.com/post-edit.g?blogID=7135654868651822449&postID=7278552956630803975\">this</a> documentation. <br /><br />However - this is the wrong documentation since I am looking for Apache+SVN. Whereas this documentation is for SVN Server. This is a small nuance you should note when reading documentations. <br /><br /><a href=\"http://svn.spears.at/\">This</a> is the documentation I used to achieve my goal. <br /><br /><h1>Configuration </h1><br />The entire configuration for Apache+SVN is done in Apache. <br /><h3>Adding user/password</h3>If file does not exist, create the file <br /><pre>d:\\dev_env\\svn_repository\\svn-auth-file guy<br /></pre>run command <br /><pre>htpasswd -cm d:\\dev_env\\svn_repository\\svn-auth-file guy<br /></pre>replace \"guy\" with your username. <br /><br />Technically - the \"-c\" flag is supposed to create the file if it does not exist. However it didn't work for me, but creating it manually solved the problem. <br /><br />Afterwards you will be prompted for a password. <br /><pre>New password: *********<br />Re-type new password: *********<br />Adding password for user guy<br /></pre><br />Now we need to match between username and permission. <br /><br /><h3>Match between username and permission</h3><br />Next to the \"svn-auth-file\" , create a new file named \"svn-acl\"<br />ACL - stands for \"Access control list\".<br /><pre>[/]<br />* = r<br />guy = rw<br /></pre><br />the path \"[/]\" means the parent directory - which lists all projects. <br />following that you can see \"* = r\" - this means, I grant everyone read permission<br />Last we have \"guy = rw\" which means I grant myself read/write permission. <br /><br />These will apply to all my projects. They can also be define per project. <br />You can also define users into groups, and give permission by groups. (see links in references). <br /><br />The last step is to point apache to these files. <br /><br /><h3>Configuring Apache </h3><br /><br />The final configuration will look something like this <br /><pre><Location ~ \"/svn/\" ><br />    DAV svn<br /> SVNListParentPath on <br />        SVNParentPath d:/dev_env/svn_repository/projects<br /> <br />         <!-- PERMISSIONS --><br /> AuthType Basic<br /> AuthName \"Subversion Repository Authentication\"<br /> AuthUserFile D:/dev_env/svn_repository/svn-auth-file<br /><br /> Satisfy Any<br /> Require valid-user<br /><br /> AuthzSVNAccessFile D:/dev_env/svn_repository/svn-acl<br /><br /></Location><br /><br /></pre><br />We already saw the first 3 lines in the previous post. <br />Afterward, we tell Apache to prompt a basic authentication with \"AuthType Basic\". AuthName simply gives a name to the authentication popup. <br />Then we point to the auth file we defined in the first step. <br /><br />The \"Satisfy Any\" is the catch, and took me some time to find. This means - prompt for password only if action requires... Since I am giving read permission to everyone, you won't be prompted for a password for a read operation. (for example, clicking <a href=\"http://svn.mograbi.co.il/svn/\"> http://svn.mograbi.co.il/svn/</a>.<br /><br />Later we say that for any other option - we require a valid user. <br />The final line points to the access file - telling Apache who can read and who can write. <br /><br /><br /><h1>Result </h1>Everything went smoothly for me, so there's no troubleshooting this time. <br /><br /><br />If you try to read from your repository but see a password prompt, you did something wrong. <br /><br />In order to see that it works you should <br /><ul><li> Check that you can read without password prompt </li><li> See that when you try to \"commit\" (write) you are requested for a password - see section below</li></ul><br /><h1>Supplying a password </h1><br />When you test the configuration you should do something like this  (assuming you already have a working copy of the project. If not - you should checkout first. \"svn co URL folderName\") <br /><pre>echo aa > aa<br />svn status<br />(see that you have the line : \"?       aa\" - which means this file is not monitored.)<br />svn add aa<br />svn commit aa -m \"adding test for auth\"<br />Authentication realm: <http: svn.mograbi.co.il:80=\"\"> Subversion Repository Authentication<br />Password for 'User': ***<br />Authentication realm: <http: svn.mograbi.co.il:80=\"\"> Subversion Repository Authentication<br />Username: svn: Commit failed (details follow):<br />svn: MKACTIVITY of '/svn/project_manager/!svn/act/96456c34-fea7-aa4b-a25d-000e43429ecf': authorization failed: Could not authenticate to server: r<br /></http:></http:></pre><br />This shows that I couldn't commit with a bad authentication. <br /><br />But how to I define the new credentials ? <br />I simply do the following <br /><pre>svn commit aa -m \"show good credentials\" --username guy<br /></pre><br />And supply the password when prompted. <br /><br />Q: Will I need to specify username in every commit ? <br />A: No, SVN caches the credentials. Don't like it? <a href=\"http://svn.haxx.se/users/archive-2009-03/0740.shtml\"> Clean it</a> or <a href=\"http://svnbook.red-bean.com/en/1.1/ch07.html#svn-ch-7-sect-1.3.2\">Prevent it</a><br /><br /><h1>Conclusion </h1><br />So far, I have to admit, I like SVN. However, I assume this is mainly because I am the sole user :) . <br />The authorization configuration was a piece of cake, and the entire thing (including this post) didn't take more than 2 hours. <br /><br />Now that I fill good enough with SVN, I am going to make a transition to GIT (finally). <br /><br /><h1>References </h1><br /><ul><li><a href=\"http://wiki.wsmoak.net/cgi-bin/wiki.pl?Subversion/Configuration\"> BEST REFERENCE I FOUND SO FAR -  A KEEPER </a></li></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7278552956630803975/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/svn-apache-continue-permissions.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7278552956630803975"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7278552956630803975"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/svn-apache-continue-permissions.html",
                        "_title": "SVN + Apache (Continue) - Permissions"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S7mA62ZCkHI/AAAAAAAAAbY/TFOnWXhtrr0/s72-c/rails-flash.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4488909593678385824",
                "published": "2010-04-20T06:18:00.000-07:00",
                "updated": "2010-06-12T01:38:42.245-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Mogi on Blogger - Setting up a  Favicon for Blogger"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S82n8yrt2VI/AAAAAAAAAbo/FFO5Ulfn7OQ/s1600/mogi_on_blogger.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"106\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S82n8yrt2VI/AAAAAAAAAbo/FFO5Ulfn7OQ/s200/mogi_on_blogger.png\" width=\"200\" /></a></div>Hey, in order to see this thing at work - you should see this article through blogger. If you are already here look at the favicon (tab/address bar) - and you should see other icon than blogger. You should see my site's favicon or some variation of it.<br /><br />I won't explain how to do it here, since a lot of places already do that.. <br />I used  <a href=\"http://hapiblogging.blogspot.com/2009/01/how-to-change-favicon-in-blogger-in-xml.html\">this article</a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4488909593678385824/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/mogi-on-blogger-setting-up-favicon-for.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4488909593678385824"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4488909593678385824"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/mogi-on-blogger-setting-up-favicon-for.html",
                        "_title": "Mogi on Blogger - Setting up a  Favicon for Blogger"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S82n8yrt2VI/AAAAAAAAAbo/FFO5Ulfn7OQ/s72-c/mogi_on_blogger.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7289913835401719712",
                "published": "2010-04-20T05:21:00.000-07:00",
                "updated": "2010-06-12T01:38:22.043-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Rails Quicky - Rails Layout Pothole"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S82ZwITYVxI/AAAAAAAAAbg/n8Q8shzX4nY/s1600/rails_pothole.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S82ZwITYVxI/AAAAAAAAAbg/n8Q8shzX4nY/s1600/rails_pothole.png\" /></a></div><br /><br />So I am working on a small project to exercise my new Rails brain muscles. And just as I start to feel good, I run into a problem.<br /><br /><h1>Defining a layout</h1>In rails you can very easily define a layout. This layout - if named after a controller - makes all views of that controller invoke the layout.<br />Only if the layout has \"yield\" in it will you see the actual view you wanted.<br />The exact syntax is :<br /><br /><pre><%= yield :layout %> </pre><br /><br /><h1>My Problem </h1><br />Well, I wrote a controller \"manager\" with a layout. <br />Now, I want to make that layout over all the application. <br />This means - if I invoke an action of another controller, I want the layout to remain the same. This is a reasonable demand, and is actually explained in the book. <br /><br />What you need to do is write <br /><pre>layout \"layout_name\"</pre><br />in my case it will be <br /><pre>layout \"manager\"</pre><br />in the ApplicationController.<b><i> But it didn't work!</i></b><br /><br /><h1>The Pothole </h1><br />My new controller was a scaffold. A scaffold has an auto-generated layout. <br />So if my scaffold is \"project\", I will have \"project.html.erb\" in the layouts folder. <br /><br />It seems that as long you don't delete the controller's layout, it will not use the manually defined layout. <br /><br />In my case - Rails will keep using \"project.html.erb\" and not \"manager.html.erb\" even though I defined <pre>layout \"manager\" </pre>. Once I deleted the project.html.erb, everything worked fine."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7289913835401719712/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/rail-quicky-rails-layout-pothole.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7289913835401719712"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7289913835401719712"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/rail-quicky-rails-layout-pothole.html",
                        "_title": "Rails Quicky - Rails Layout Pothole"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/S82ZwITYVxI/AAAAAAAAAbg/n8Q8shzX4nY/s72-c/rails_pothole.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8918149719125402239",
                "published": "2010-04-10T13:57:00.000-07:00",
                "updated": "2010-06-12T01:38:14.408-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "apache"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "svn"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "SVN + Apache - Easy ? Lets make it work!"
                },
                "content": {
                    "_type": "html",
                    "__text": "Well... I am a bit frustrated..<br /><br />It is supposed to be easy - but!!!! it's not!<br /><br />All I wanted to do - is to expose my SVN on the web - I currently don't care about permissions, just let me see it work first. Then I will go on to permissions.<br /><br />I found several extensive tutorials such as<br /><ul><li><a href=\"http://www.howtoforge.com/apache_subversion_repository_p2\">http://www.howtoforge.com/apache_subversion_repository_p2</a></li><li><a href=\"http://svn.spears.at/\">http://svn.spears.at/</a></li><li><a href=\"http://www.codeproject.com/KB/winsdk/SubversionApache.aspx\">http://www.codeproject.com/KB/winsdk/SubversionApache.aspx</a></li></ul><br />All were very long to my taste.. not well constructed at all.. None of them referred to troubleshooting problems I saw along the way. But since that's what I have to work with.. then lets make it work.<br /><br />If you're like me, and all you care about it seeing it work - and if you already have Apache Server and SVN installed - there are only 2 more steps you should do.<br /><ul><li>Copy DLLS and SO files</li><li>Add several lines to httpd.conf</li></ul><br /><a name='more'></a><br /><h1>Copy DLLs and SO Files</h1><br />When I finally got everything working I had 2 SO files copied and 2 Dlls copied.<br /><br />intl3_svn.dll, libsvn_fs-1.dll - Copied from SVN bin to Apache bin.<br /><br />mod_authz_svn.so, mod_dav_svn.so - Copied from SVN <b>bin</b> to Apache's <b>modules</b>.<br /><br />I am not sure at all that the DLLs should be copied - all the articles specify the SO files, but only one specifies the DLL..<br /><br />Before you restart the server you should start modifying the httpd.conf.<br />For now - lets just load the new modules.<br /><br />So add the following<br /><pre>LoadModule dav_svn_module modules/mod_dav_svn.soLoadModule authz_svn_module modules/mod_authz_svn.so</pre><br />Plus - make sure the following line is uncommented<br /><pre>LoadModule dav_module modules/mod_dav.soLoadModule dav_fs_module modules/mod_dav_fs.so</pre><br />** NOTE: again - not sure about the second one, but couldn't hurt.<br />Now you should try to restart the Apache Server<br /><br /><h3>Troubleshooting </h3><br />Believe or not, but this will probably be the hardest step you'll face.<br />When I restarted the server it failed to restart. Getting \"The requested operation has failed!\".<br /><br />Looking at the logs I saw :<br /><pre>expected signature 41503232 but saw 41503230 - perhaps this is not an Apache module DSO, or was compiled for a different Apache version?</pre><br />At first I said - uh, the version is incorrect. Looking at SVN download they specify which apache version you can integrate with. But which Apache version do I have - I knew 2.2 because the folder path said so.. but SVN specified 2.2.9 and above... hmm...<br /><br />To see the full verison run httpd -v in your apache server bin.. mine was 2.2.14.<br /><br />So I downloaded version 1.6.4 that specifies it is compatible.. guess what - it's not! but I couldn't know that.. so I thought it wasn't a version issue, maybe something else - BIG MISTAKE, it was a version issue. version 1.6.6 worked fine.<br /><br />If you're wondering why I didn't try 1.6.6 to begin with - well, funny story, in the SVN download list, 1.6.4 appears before 1.6.6 - why??? I don't know.<br /><a href=\"http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100\">http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100</a><br /><br />(Probably changed by the time you read this).<br /><br />I found a lot of other crazy suggestions. Tried several, nothing helped. Finally I went back to version and it worked. Thank GOD!!!!<br /><br /><h3>Another troubleshooting </h3><br />Well - when I say - it worked.. it didn't really work that well.<br />I also got the error \" could not load mod_dav_svn.so into server: The specified procedure could not be found.  \". However then I started copying some more DLLs and the problem was solved - since I already told you to copy those DLLs I assume you didn't get it..<br /><br />If you still get it - try also copying (overwriting!) the file libapr-1 from SVN to apache. Apache has its own copy, but you will have to overwrite it (use backups of course). I can't really remember if I eventually did it or not - but I read it helped someone..<br /><br /><h1>Modifying HTTPD.conf</h1><br />Well, we already modified load modules. Now it is time we told Apache where the repository is..<br /><br />All the places will tell you the same thing (different versions, but basically the same thing).<br /><br /><pre><br /><Location ~ \"/svn/\" >   <br />      DAV svn    <br />      SVNListParentPath on     <br />      SVNParentPath d:/path_to_repository</Location></pre><br />This is correct.<br />Some places say that the last slash in \"/svn/\" is important. However, I didn't find anything about why that is. - but it's free..<br /><br />You should also note that I use a slash ('/') and not a backward slash ('\\')  even though it is windows. <br /><br />Did it work?? NO!<br /><br /><h3>Troubleshooting </h3><br /><br />What no one tells you is that if you have a VirtualHost, Apache server will append that location to your default virtual host. (!?)<br /><br />I had 2 virtual hosts when I configured Apache, and I saw the following annoying log entry :<br /><pre><br />proxy: BALANCER: canonicalising URL //tomcat/svn<br />proxy: BALANCER (balancer://tomcat) worker (http://127.0.0.1:8080) rewritten to http://127.0.0.1:8080/svn<br /></pre><br />Technically saying that he will redirect this call to my tomcat.. URGHH!!!!<br />This is hardly documented. I didn't find a solution online..<br /><br />However - I did solve it on my own.<br />Maybe you won't consider it a solution, but it's a solution enough for me.<br /><br />I defined a new virtual host :)<br /><pre><br />#forward requests to apache server<br /><VirtualHost *>  <br />     ServerName svn.mograbi.co.il  <br />     ServerAlias www.svn.mograbi.co.il<br /></VirtualHost><br /></pre><br />nice? What it means - don't redirect calls going to svn.mograbi.co.il.. :)<br />And it worked.<br /><br /><h3>How did I find out the problem and made sure it works ? </h3><br />Well - you should know that by the time I wrote this article - I didn't try to run SVN yet.. do I don't actually know it works.<br />However - I did see the following :<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S8Dko75O8lI/AAAAAAAAAbc/DKW6GbZ8KuA/s1600/collection_repositories.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S8Dko75O8lI/AAAAAAAAAbc/DKW6GbZ8KuA/s1600/collection_repositories.jpg\" border=\"0\" /></a></div><br />Which is good enough for me - I am dying to sleep.<br /><br />Well the answer is I first deleted the Virtual Hosts.<br />According to the configurations I pasted above I should've seen the repository at<br /><pre>http://localhost/svn</pre><br />It was weird - I at first got 404.. and refreshes and delete of cache didn't work.<br />Then I tried<br /><pre>http://localhost/svn/depot</pre>Which is the depot project I did while learning rails. And it worked!<br />So I suggest you will play around before giving up. Like a stubborn key-lock.<br /><br />Once I figured out it was the VirtualHosts that caused the problem - it was just a matter of time to come up with this cute solution.<br /><br />And then it all worked.<br /><br /><h1>Next Time </h1>Next weekend I will try to checkin/checkout sources and add permissions.<br />Cross your fingers!<br /><br />The next step is doing the same with GIT, and make GIT and SVN communicate.<br />Hopefully at that point I will be an experienced SCV/SCM user."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8918149719125402239/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/svn-apache-easy-lets-make-it-work.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8918149719125402239"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8918149719125402239"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/svn-apache-easy-lets-make-it-work.html",
                        "_title": "SVN + Apache - Easy ? Lets make it work!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S8Dko75O8lI/AAAAAAAAAbc/DKW6GbZ8KuA/s72-c/collection_repositories.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6220574737771821629",
                "published": "2010-04-06T05:44:00.001-07:00",
                "updated": "2010-06-12T01:37:50.897-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "microsoft"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Office Word  2007 - Fix it for me"
                },
                "content": {
                    "_type": "html",
                    "__text": "When I finally got Word 2007 (Few years ago) I was very annoyed by the big line break. <br /><br /><br />Today, as I was installing office on a new computer and had to fix it again, I was pleased to see <a href=\"http://support.microsoft.com/kb/921174#FixItForMeAlways\">Fix it for me</a> from Microsoft."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6220574737771821629"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6220574737771821629"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8562843544176868785",
                "published": "2010-04-05T00:17:00.000-07:00",
                "updated": "2010-06-12T01:37:21.672-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My Rails Experience - afterthought"
                },
                "content": {
                    "_type": "html",
                    "__text": "OK. So I went cover to cover for the second time over the <a href=\"http://pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition\">agile web development with rails</a><br /><br />I really liked the book. I went over it twice - once to see what they have to offer, and the second time - after I was convinced it was worth it, getting my hands dirty. <br /><br /><br /><br />You can see the result at <a href=\"http://rails.mograbi.co.il/\" rel=\"me\">http://rails.mograbi.co.il</a><br />The sources are currently unavailable - but will be as soon as I get my SVN and GIT configured correctly. (next blog entry?) <br /><br />Quoted from the book <br /><blockquote>Rails takes Ruby to the limit, extending it in novel ways that make a programmer’s<br />life easier. This makes our programs shorter and more readable.<br />It also allows us to perform tasks that would normally be done in external<br />configuration files inside the codebase instead. This makes it far easier to see<br />what’s happening.</blockquote><br /><a name='more'></a><br /><br /><h1>Mind Blown </h1><br />Lately I get very excited about stuff. I already blogged about GIT and the decentralized model. Since I come from the Java world - RoR experience was very magical, and they really use the word \"magic\" throughout the book. <br /><br />I advice to everyone to read about meta-programming in ruby before you approach Rails. That will help dissolve some of the magic since Rails heavily relies on it. <br /><br />What can I say? I liked everything about it.. <br /><br /><br /><br /><h1>The MVC Model</h1><br />RoR really understands the need for a predesigned environment. As a developer I don't want to think where it would be best to place my HTMLs and CSSs and such, I just want to write algorithms. RoR builds the folder hierarchy for you, and it is so extensible that you don't have to think what goes where. <br /><br />CSS has a \"public/stylesheet\" folder. <br />Controllers are in \"app/controllers\", views at \"app/views\" and models at \"app/models\". <br />Tests are sorted to unit/functional/performance/integration. <br /><br /><br /><h1>Fulfills almost everything you can request a framework to do</h1><br />It seems like it have an answer to everything. And if it doesn't, well at least it is one step closer. <br /><br />The most impressive things would be : <br /><br /><h3><a href=\"http://dizzy.co.uk/ruby_on_rails/cheatsheets/rails-migrations\">Migrations </a></h3><br />Migrations are RoR way of versioning your schema, enabling you to develop the schema in a very agile way. <br /><br />Combine that with SQL replaced by code and you got a killer design. <br /><br />This means that for every schema modification you create a new file - called a migration file. <br />If the name of the file is up to the naming convention - rails will fill in the script by itself. <br />Each migration has an \"up\" and \"down\" function. So that if you wrote it all correctly, you should be able to go back and forth with the current version of the schema. <br />The version of the schema is stamped with a time-stamp. <br /><br />In earlier versions they had an incremented number for a stamp but I guess they figured out that when multiple developers work together, these numbers will overlap - so they switched to timestamps. <br /><br />Instead of writing SQLs and worrying about DB compatibility, you write ruby code. <br />** This is in fact the only place they can take it farther. They don't support Foreign Keys for example.. which is a shame. I found myself writing some SQL code by hand, so that makes me bound to specific DB. <br />But I guess they will get that one going in no time. <br /><br />If I made 4 modifications to the DB, I can always tell rails to rollback to version 2. <br />The migrations are also a great way to document your changes. <br />If you rename a column - you ADD a migration. You don't modify the old one in which you create the column. This is great! Why? <br /><br />Well - assume for a minute I have another migration to insert test data (! - yet another thing they got right) - If I modify the \"create\" migration I'd have to go over the \"insert data\" migration as well. (even if they were in the same file, it causes more places to modify and make environment more error prone).  <br /><br />Comparing this to Java's Hibernate - although it has a great way to create the schema, it does not support versions and data insertion. <br /><br /><h3><a href=\"http://addictedtonew.com/archives/149/a-bit-on-rails-partials/\">Partials</a> </h3><br />Partials are to views what methods are to code - you can call a partial and pass it arguments just like a method.<br /><br />It is similar to jsp:include but requires less code. Even less code when you use naming conventions. <br /><br /><h3><a href=\"http://rubypond.com/blog/useful-flash-messages-in-rails\">Flash</a> </h3><br />The flash is a very good way to pass messages. Most common use for example is errors while filling a form - and you want to simply go back to the form and display the errors.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S7mA62ZCkHI/AAAAAAAAAbY/TFOnWXhtrr0/s1600-h/rails-flash.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"251\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S7mA62ZCkHI/AAAAAAAAAbY/TFOnWXhtrr0/s320/rails-flash.jpg\" width=\"320\" /></a></div><br /><h1>Code Generation</h1><br />Rails create a lot of code for you. <br />On the one hand it saves you a lot of trouble, however some might say it requires more modifications when you're not pleased with the defaults. <br /><br />You can't eat the cake and keep it whole at the same time. <br /><br />The code generated could be reduced with meta-programming (and they actually did that once) - but that would probably be too magical for beginners. So they cleverly decided not too. I assume there's a way to configure the generated code, and I might explore it a bit in the future. <br /><br />If I want to create a new persistent object \"book\" for example. <br />This book will have a \"title\",\"content\" and \"about\" fields. <br />I want it with all CRUD operations, and REST support.<br />This is called a scaffold in rails and in some places in rails it is referred to as resource.<br />All I have to do is write <br /><br /><pre>ruby script/generate scaffold book title:string content:text about:string<br /></pre><br />It will generate the controller,view and model along with tests, db migration and REST mapping. They will all support \"index\",\"delete\",\"create\",\"edit\",\"show\" operations. <br />Modifying the result from HTML to XML/JSON/ATOM is a piece of cake. XML and JSON can be achieved with almost no code at all (when using default) - ATOM might require some writing. <br /><br />Can you ask for more? <br /><br /><h1>Javascirpt/Noscript support </h1><br />I think the thing I liked most of all in rails is that they have a really good way to support Ajax. Almost effortlessly you can use Ajax and still maintain support for noscript browsing. (Which is needed especially for robots such as search engines). <br /><br /><h1>I18N </h1><br />I never liked JSTL's FMT.. don't know why. I always wrote the implementation myself. <br />Rails however have a better solution. (Still needs improvement but I liked it so far). <br /><br />The <a href=\"http://www.yaml.org/start.html\">YAML file format</a> is a better use than property file. It helps me maintain name-spacing for my properties a lot better. <br /><br />And finally - there's a great support for date/currency/number format built in. <br /><br />There is still things missing in that area - if you ask me. <br /><ul><li>RTL/LTR support - some languages are RTL. I never saw I18N support for this</li><li>Male/Female - some languages need a different string when written for a male or a female</li></ul><br />In English you can get along without it. So I guess this is why support in I18N is lacking. Adding male/female support to RoR would probably be very easy (I already know how my YAMLs would look like), but the RTL LTR is tricky. <br /><br />Which raises up a nice question. So far RoR wrote a builder to almost every format : html/atom/xml/sql.. and the list goes on. CSS however was neglected as far as I can see, in almost every platform. <br /><br />How I would love to write something like <br /><pre>blog-entry-content {<br />   direction : <%=I18n.dir%><br />}<br /></pre><br />I guess this is the next thing to check out. <br /><br /><br /><h1>A unified structure</h1><br />The last thing I will mention here - certainly NOT the last thing to say - is that rails gives me a \"one ring to rule them all\". In Java, I was concerned with integrations all the time. <br /><br />In order to get an environment in Java going you need to download a lot of things. (JDK, Maven/Ant, Tomcat, Hibernate, JAXB, JDBC Drivers, DWR, Struts, Spring... etc..)<br /><br />I guess the most important word above is \"Spring\" - simply because \"Spring\" is a solution to a problem that shouldn't really exist to begin with. In Rails - those problems are simply not there. <br /><br />Imagine to yourself Spring/JDK/Maven all bundled in a single package. All you will need to do is download JDK, define somehow you want hibernate in a single word and it will download and configure everything. <br />In rails it looks like this <br /><pre>gem install mysql <br />rails my_app --database=mysql<br /></pre><br />The operation is easy to remember and painless. The \"gem install\" is required only for the first time. <br /><br />RoR is strong, agile and (code/configuration)-minimized framework. And you know what - it hasn't reached version 2 yet! imagine how version 3 will look like? <br /><br /><h1>Conclusion </h1><br />RoR is magical. You would have to learn a lot no matter where you come from, but mainly you would have to learn to \"let go and let rails take care of things\". <br /><br />I finally feel like I can write applications at home at my own free time for my own use, and still have the time to spend in the sun, and the money in my pocket to have some fun. <br /><br /><h1>What's next</h1><br />Well.. Tomorrow I am starting a new Job. I will be a Flex developer for some time to come. So I have to wrap up things I started with Flex. This will include <br /><ul><li> Using web services to get/send XMLs </li><li> Using the XML data sources to build charts </li>  <li> Using the Flex builder </li><li> Transitions </li></ul><br />This part is integrated with Rails - so you will have 2 GUIs for the depot application. It is really easy with Rails since Rails has a built in support for REST. So I'm kind of lucky to learn these two at the same time. <br /><br />And to finish it all up - I want to finish the GIT/SVN blog I started. The new place uses SVN, and I will probably want to use GIT on my computer. <br /><br />Then, I will probably blog a lot for a while - there's a lot to be said about Rails/Flex and GIT. <br /><br />For example - I want to learn how to add RJS libraries in Rails. (Rails/Ruby Javascript) - in order to encapsulate my text editor. <br />I want to write an audio/video player in flex. <br />I want to make all my sources available in GIT/SVN to all of you to see. (I currently have a maven repository but I get the feeling it won't work so well with rails). <br />I will probably write a new project while doing these. (Thought about project-management application). <br /><br />The next things I want to go over some basic things I never took the time for. - See the <a href=\"http://mograblog.blogspot.com/2010/03/upcoming-articles-teaser.html\"> blog post</a> about it - and add to that JQuery and Spring. <br /><br />Then I would have to decide between .NET/PHP... tough call.. what do you think?"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8562843544176868785/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/my-rails-experience-afterthought.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8562843544176868785"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8562843544176868785"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/my-rails-experience-afterthought.html",
                        "_title": "My Rails Experience - afterthought"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S7mA62ZCkHI/AAAAAAAAAbY/TFOnWXhtrr0/s72-c/rails-flash.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-695041927338767655",
                "published": "2010-04-03T01:52:00.000-07:00",
                "updated": "2010-06-12T01:37:15.356-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Rails Quicky - path , xxx_path function is undefined"
                },
                "content": {
                    "_type": "html",
                    "__text": "As I am going over the rails book - I reached the I18N section. <br />This section required me to upgrade from 2.0.2 to 2.2 or above.<br />I upgraded to 2.3.4 - while the book uses version 2.3.4.  <br /><br />(It seems I18N is supported better starting 2.2). <br /><br />As I did that - I started getting weird errors about 'cache_template_extensions' undefined. And I read other blogs, but couldn't overcome it.. <br /><br />So I decided to start afresh and copy the files to the new project. <br />It seems that copying the entire files cause the same error. So I decided to copy only the \"app\" folder and see how hard that can be.. It is not a nice experience but exhilarating in a way - since I get to get behind the curtains of the wizard which is rails. <br /><br />Rails keep on saying 'magic' all along the book. The problem is that when things get wrong, there are no fairies around to fix it. <br /><a name='more'></a><br /><h1>Migration Guide </h1><br />There's a  <a href=\"http://cakebaker.42dh.com/2009/05/07/migration-from-rails-22-to-23/\"> good migration guide </a> that I found very useful. <br /><br /><h1>Other problems not caused by migrations </h1><br /><br /><h2>Nil Sessions </h2>First of all - I got a nil exception on each line I had something like <br /><pre>session[:param] ... </pre><br />By default - this should be working. However - I modified the sessions to be in the database - but I didn't copy that modification which is in environment.rb in 2.0.2 and under initializers in 2.3.4 (see migration guide). <br />So it seems the session was nil.. weird. <br /><br /><br /><h2>xxx_path undefined </h2><br />The weirdest thing I came across was the error 'undefined method xxx_path'. <br /><br />The auto-generated files given to me by rails have function calls like <br />edit_user_path - in order to generate a call to action 'edit' on the 'user controller'. That method doesn't really exist - and if you're wondering about how that works you should check out <a href=\"http://rubylearning.com/satishtalim/ruby_method_missing.html\">this tutorial</a> and read more about meta-programming for ruby.<br /><br />I finally discovered the solution was in routes.rb. In order to use those helper methods, I had to map their route. So I simply added them as resource which is a way to add all REST options at once. <br /><pre>map.resources :users</pre><br /><br />Luckily - that solved me another problem regarding the ATOM builder that compailed xxx_url is undefined.<br /><br /><h1>Problem with testing </h1><br />Another thing you might find wrong in the new environment is the tests. <br />You might get an error <br /><pre>undefined method `use_transactional_fixtures='<br /></pre><br />A quick search in Google will bring you to <a href=\"http://www.themomorohoax.com/2008/12/17/rails-2-3-tests\">this site</a> that tells you to modify the \"test_helper.rb\" classname to \"ActiveSupport::TestCase\"<br /><br />That solved it to me.<br /><br /><br /><h1>Conclusion </h1><br /><br />The upgrade wasn't that hard at all and the experience was very informative."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/695041927338767655/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/rails-quicky-path-xxxpath-function-is.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/695041927338767655"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/695041927338767655"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/04/rails-quicky-path-xxxpath-function-is.html",
                        "_title": "Rails Quicky - path , xxx_path function is undefined"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8078336204378240235",
                "published": "2010-03-30T04:24:00.000-07:00",
                "updated": "2010-06-12T01:37:07.946-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "blogger"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Layout Handling"
                },
                "content": {
                    "_type": "html",
                    "__text": "I just got an Email from Blogger/Draft about <a href=\"http://bloggerindraft.blogspot.com/2010/03/blogger-template-designer.html\">the new Blogger/Draft layout manager</a>. <br />The new manager has a cool layout, and a better look and feel. However, as you can see I preferred keeping my own crummy layout. The reason is simple - I like a very wide body. This is the widest I could achieve. <br /><br /><a name='more'></a><br /><br /><h1>The new layout manager</h1><br /><object width=\"640\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/r6haqZoivBQ&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/r6haqZoivBQ&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"640\" height=\"385\"></embed></object><br /><br />So I got interested about how to do a layout manager ? <br />I know it is possible to modify the style from JavaScript - but it seemed too tedious to me - so I guessed you can modify the style-sheet instead. And indeed I found it (Thanks to quirks mode again.. Great site). <br /><br />Lets assume I have the following style<br /><pre>.guy{<br />color:red;<br />}<br /></pre><br />I can modify it from JavaScript with this line : <br /><pre>document.styleSheets[0].cssRules[0].style.color=\"blue\";<br /></pre><br />NOTE : I tested only on FF. <br /><br /><br />It is a bit ugly that you have to use index numbers instead of selector.<br />However - you can check the selector and manually filter the correct ones. <br /><br />Moreover - you can identify the styleSheet using the URL used to import it. <br /><br />There are a lot of other things you can do - you should check it out, it's quite cool - for example - change the selector! <br /><br />So now - it seems quite easy to create a new layout manager. For example - import many different layout, and enable/disable them according to user selection - and you get a generic modular dynamic designer to your site. <br /><br />Soon at mogi's code :) <br /><br /><h1>References</h1><ul><li><a href=\"http://www.quirksmode.org/dom/changess.html\">Quirks Mode Tutorial</a></li><li><a href=\"http://bloggerindraft.blogspot.com/2010/03/blogger-template-designer.html\"> New layout manager article</a></li></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8078336204378240235/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/layout-handling.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8078336204378240235"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8078336204378240235"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/layout-handling.html",
                        "_title": "Layout Handling"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5702566549327038207",
                "published": "2010-03-28T10:37:00.000-07:00",
                "updated": "2010-06-12T01:36:45.088-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My First Flex-Debug experience"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S69fN8i_IfI/AAAAAAAAAa8/CnO-JtoKHsE/s1600-h/flex_debug.bmp\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S69fN8i_IfI/AAAAAAAAAa8/CnO-JtoKHsE/s1600/flex_debug.bmp\" /></a></div><br />I am learning Flex among other things today, and I came across an interesting difficulty. <br /><br /><a name='more'></a><br /><br /><h1>Reading XML</h1><br />The book I am reading suggests the following example. <br />Given an XML file of the form : <br /><pre><books><br /><stock><br />....<br /></stock><br /><stock><br />....<br /></stock><br />...<br /></books><br /></pre><br />I should write the following main <br /><pre><mx:Application xmlns:mx=\"http://www.adobe.com/2006/mxml\"<br />    layout=\"absolute\" creationComplete=\"bookData.send()\"><br /> <mx:HTTPService id=\"bookData\" url=\"book.xml\"/><br /> <mx:DataGrid x=\"56\" y=\"250\" width=\"950\" dataProvider=<br />     \"{bookData.lastResult.books.stock}\"/><br /></mx:Application><br /></pre><br />While placing the SWF file and the XML file in the same directory. <br /><br />So I gave it a go, and I got an empty TABLE. (Not even column names). <br />The book said - if something goes wrong you should see an error popup. But I didn't see one, so I assumed everything is ok. <br /><br />Since I had no idea what is wrong, I installed the flex builder - hoping to debug it easily. Once I hit the \"debug\" I got \"debugger not found, click here to install\" message. So I installed it - and voila(!) once the debugger was installed - I got an error popup saying <br /><pre> Only local-with-filesystem and trusted local SWF files may access local resources<br /></pre><br /> Aha! A quick search in Google will tell you to switch \"use-network\" to \"false\", and indeed my POM had \"true\" for that value, and I changed it to false - but that didn't help.. So I investigate a bit farther and <a href=\"http://livedocs.adobe.com/flex/3/html/help.html?content=security2_03.html\">this</a> is what I found. <br /><br />A great page that shows you the security levels available in Flex. I immediately copy pasted the source required in order to see the security level I am running in, and found out it was \"local-with-network\" even though I specifically told the plugin \"false\" on \"use-network\" property. <br /><br />It seems that the plugin <pre>net.israfil.mojo:maven-flex2-plugin</pre>doesn't use this property as expected. (maybe in newer versions this bug was fixed). <br />Fortunately, this plugin allows extra properties definition. So I did the following : <br /><pre><extraParameters><br /> <parameter><name>use-network=false</name></parameter><br /></extraParameters><br /></pre><br />and that did the trick. Now my flex tutorial was working properly. <br /><br /><br /><h1>Conclusion</h1><br /><ul><li>In flex - the error pops-up only when the debugger is installed</li><li>Setting false to plugin  <pre>net.israfil.mojo:maven-flex2-plugin</pre>\"use-network\" property does not operate as expected - but it is fixable</li></ul><br /><h1>References</h1><br /><ul><li><a href=\"http://sites.google.com/site/guymograbi/flex\"></a>My Wiki for flex</li><li><a href=\"http://livedocs.adobe.com/flex/3/html/help.html?content=security2_03.html\">A great page for security in Flex explanation</a></li></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5702566549327038207/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/my-first-flex-debug-experience.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5702566549327038207"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5702566549327038207"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/my-first-flex-debug-experience.html",
                        "_title": "My First Flex-Debug experience"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S69fN8i_IfI/AAAAAAAAAa8/CnO-JtoKHsE/s72-c/flex_debug.bmp",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-63948519843496207",
                "published": "2010-03-25T08:46:00.001-07:00",
                "updated": "2010-06-12T01:36:32.531-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "git"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Getting Gitty wit' it - Hands on"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S6uU9nam2jI/AAAAAAAAAaw/8EhGmydcqb4/s1600-h/git_hands_on.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"242\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S6uU9nam2jI/AAAAAAAAAaw/8EhGmydcqb4/s320/git_hands_on.png\" width=\"320\" /></a></div>So in the <a href=\"http://mograblog.blogspot.com/2010/03/getting-gitty-wit-it.html\">previous piece</a> I marveled the decentralized SCM model. <br /><br />Today, it is time to get our hands dirty. <br />First, we will install an SVN, and check in the project to it.. see that we understand the commands and so on. <br />Then we will do the same for GIT. <br /><br />And for a finally - we will see how you can use GIT and SVN combined!<br /><br /><a name='more'></a><br /><br /><h1>My SVN Experience</h1>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/63948519843496207"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/63948519843496207"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/S6uU9nam2jI/AAAAAAAAAaw/8EhGmydcqb4/s72-c/git_hands_on.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2052379851390251458",
                "published": "2010-03-25T08:41:00.000-07:00",
                "updated": "2010-06-12T01:36:32.531-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "git"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Getting Gitty wit' it"
                },
                "content": {
                    "_type": "html",
                    "__text": "<table cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"float: left; margin-right: 1em; text-align: left;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S6tr9rASb_I/AAAAAAAAAak/8zB73itGPSY/s1600-h/git.png\" imageanchor=\"1\" style=\"clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;\"><img border=\"0\" height=\"191\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S6tr9rASb_I/AAAAAAAAAak/8zB73itGPSY/s320/git.png\" width=\"320\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Git is the superman of SCMs<br /><br /> </td></tr></tbody></table>Are you ready for a mind-blower today? <br /><br />Today's entry will be about <a href=\"http://git-scm.com/\">GIT - A Fast Version Control System</a><br /><br />I don't like all those basic explanations on concepts and such, but you can't git without understanding the mind-blowing affect of decentralization. <br /><br />So I will dedicate this article to the concepts behind the decentralized model, and in the next article I will go down to technical details about SVN and GIT. <br /><br /><a name='more'></a><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><h1>Centralized VS. Decentralized Model</h1><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S6tuFc3v9cI/AAAAAAAAAas/traY-Y3p2No/s1600-h/compare_models.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"127\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S6tuFc3v9cI/AAAAAAAAAas/traY-Y3p2No/s320/compare_models.png\" width=\"320\" /></a></div><br />The centralized model is pretty easy to grasp - you have a single location where everyone are committing their code to and pulling it out from. This single location is a called the repository. In order to communicate with it, you use a client (the little squares in the image). This model is great, easy to use and \"organized\" in many ways. However it has some obvious defects.<br /><br />A simple one would be - if the repository's computer crashes or simply the load that computer has will damage the entire development.  <br /><br />A more complex example would be -  lets say that John and Jane are working on the same feature together. They will eventually need to perform some kind of integration. In a centralized model - in order to perform any kind of collaboration - you need to go through the repository. This, unavoidably, affects the entire team. Affecting the entire team before the feature was fully tested is dangerous. <br /><br />In a decentralized model, every client is also a repository. <br />This is where you should pause and say \"WHAT!?\". (boom.. the mind just popped). <br /><br /><h1>Every client is a repository</h1><br />Once you're over the shock, it's time to start asking my favorite question - how does it work?<br />I mean, there are so many questions to answer - such as : <br /><ul><li> Where should I check out from?</li><li> Where should I commit my changes to?</li><li> So - when I set up the auto-build, to which repository do I point it to?</li></ul><br />In order to answer these fine questions, lets see how a single man should work in using the decentralized model. <br /><br /><h1>Single Person Flow</h1><br />So I have a project I wrote and committed to my repository. Now I have a new feature I would like to write. <br /><br />Currently I have a single branch to my project - the master branch. I don't want to write my feature on this branch for the same reason I have 2 different tomcat instances for development and deployment of my site. So I create a new branch \"new_feature\". Note that I don't need to give it a good name (I give lousy names to my branches). And the reason is that this is MY repository and I can do whatever I want with it. <br /><br />So I write my code on the \"new_feature\" branch and I am checking in all the changes. <br />Suddenly, I discover a critical bug on the master branch. So I quickly modify the code on the master branch and commit it.. <br />Being the lazy programmer that I am - I don't synchronize \"new_feature\" with the commit I did to the \"master\" branch. (imagine you have 10 new features, each in a different branch). So I finish writing my new feature, and it is committed to the \"new_feature\" branch. Now it is time to merge the master branch with the \"new_feature\" branch, thus actually \"deploying\" my new feature. <br /><br />In order to do this carefully, I first merge them locally, and after I check everything is ok - I commit the merge to the master branch. the \"new_feature\" branch can now be removed. <br /><br />If it helps you, think about developing a site. When I develop my site, I first test on a \"tests tomcat\" and only when it is done I deploy to the tomcat I use for my site. In rails, for example, it comes built-in.. <br /><br /><h1>Two People Flow</h1><br />Working on my project alone can be great, but collaboration is even better. <br />So now Jane has a great feature to add to my project. <br /><br />Since Jane is also a repository, she won't checkout my project. She should \"clone\" my entire repository. So now we have 2 repositories with the same master branch. <br /><br />Jane can detach from the network, and work on her feature. Committing the changes to her repository just like we saw before. <br /><br />While she is working, I am committing changes of my own. When Jane wants to get updates from my repository - she executes a checkout. <br />This might be confusing, since \"checkout\" in centralized model is somehow similar to \"clone\" in the decentralized model. However this is just a bad name for the operation. Think of is as \"sync\" instead of \"checkout\". <br /><br />The \"sync\" operation updates Jane's repository with changes from my repository, and merges it with her code. Once Jane is ready she has 2 options. <br /><ol><li>She can ask me to pull her changes</li><li>She can push her changes</li></ol><br />It depends on the complexity of the merge and the permissions she has. <br />Either way - the outcome is a unified version. Note that we have 2 repositories with the same master AGAIN! <br /><br /><h1>N People Flow</h1><br />So for a single person, and 2 people it was quite easy. But now we have a lot of people working on the same module. (yes, we are working on a small module. Since my project got really big it had to be done). <br /><br />Each module is kept in a different repository. <br /><br />Jane and John can now collaborate without interfering the entire team. (just like we've seen in the 2 people flow). <br /><br />And when they want to commit, they update with my repository, and push their changes when their done. <br /><br />The automated build points to my master branch since everyone are synchronizing with it. And I don't mind - since I always work on some clone and never on the master branch. <br /><br />If I do mind.. I can simply clone my repository locally - have 2 different repositories with the same project. <br /><br />If my computer crashes - since there are a lot of people that synchronize with me daily, we can simply changes all pointers to that computer and make it the origin. Hack, we can even have a \"dummy computer\" that all it does is serve as the origin for the project. (kind of like the centralized model). <br /><br />If John travels abroad and wants to share the sources with other people - they can simply clone his repository - even if the connection to my computer is bad. And so on.. <br /><br /><h1>Team Leader Flow</h1><br />The image becomes cooler when you think as a team leader. Lets say I want to monitor my team's progress. In the centralized model I would have to bother them and waste their time - and they will keep telling me \"it's not finished yet\". <br /><br />I've been on both ends - and it's never a happy situation to either side. <br /><br />In the decentralized model I can simply pull my Team's master branches and review their progress on my free time on my computer. (For example - I can simply diff their master branch with mine and see their changes immediately). <br /><br /><h1>Conclusion</h1><br />It is beautiful and scary at the same time. Even though you have a \"single point of reference\" in the decentralized model (the origin) - it is too virtual to comprehend.<br /><br />It is hard to understand what this model can offer. In the example above you might accidentally  think it is exactly like the centralized model (simply place me at the center) and you might even say it is quite \"nasty\" not to have a remote repository on a dedicated computer. <br /><br />Be that is it may, the decentralized model is revolutionary and it makes the entire Source Control Management experience better."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2052379851390251458/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/getting-gitty-wit-it.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2052379851390251458"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2052379851390251458"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/getting-gitty-wit-it.html",
                        "_title": "Getting Gitty wit' it"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/S6tr9rASb_I/AAAAAAAAAak/8zB73itGPSY/s72-c/git.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7456429174829396681",
                "published": "2010-03-22T11:14:00.000-07:00",
                "updated": "2010-03-22T11:14:43.675-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Upcoming Articles - Teaser"
                },
                "content": {
                    "_type": "html",
                    "__text": "Well, I am still looking for a new job, and from time to time I get an interesting question. So this one place focuses on definitions like DTD and ACID. I read about ACID once but couldn't remember. I know DTD from the XMLs world, but I never took the time to learn it since I use XSDs whenever I can. Consequentially, I decided to dedicate a few blog posts on some basic definitions. (similar to the <a href=\"http://mograblog.blogspot.com/2010/03/anonymous-classes-final-java-and.html\">final</a> article I wrote a while ago.)<br /><br />Other than DTD and ACID I also got to know some cool things like : YSlow, openId, Play-Framework, so I will try to dedicate an entry for these as well. I will also dedicate a piece for the JVM memory and garbage collection and if it is important to know it at all... <br />Since I am currently busy with finding a job and learning Flex/Rails it will take a while, but lets hope it won't take too long. Rails is very easy to learn (if you are a newbie to the web programming world I would love you to comment if you found it relatively easy as well.) Flex's book is currently pretty basic, and I hope I'm getting to the interesting part. (I heard there's a twist towards the end). <br /><br />Moreover, I am finally taking the time to develop <a href=\"http://sites.google.com/site/guymograbi/\">my Google Site</a>. I decided the best use for it would be a wiki of some sort. The blog is a great place to explain stuff - but it's no wiki. That's for sure. <br /><br />When I will finish my job search, I will also dedicate an article to summarize the experience."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7456429174829396681/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/upcoming-articles-teaser.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7456429174829396681"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7456429174829396681"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/upcoming-articles-teaser.html",
                        "_title": "Upcoming Articles - Teaser"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6848696100847697695",
                "published": "2010-03-17T10:28:00.000-07:00",
                "updated": "2010-06-12T01:36:08.642-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "javascript"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Anonymous classes, Final - Java and Javascript"
                },
                "content": {
                    "_type": "html",
                    "__text": "final is a very intuitive keyword, and even though I use it a lot, I never really took the time to ponder about it. Today is a good day for pondering.. . <br /><br /><h1>Why do we need it </h1><br />What would you expect to see on screen when running the following <b>JavaScript</b>? <br /><pre>var value = \"hello\";<br />var myFunc = function(){alert(value);}<br />value = \"world\";<br />myFunc();<br /></pre><br />Even though the function was declared before I assigned the \"world\" value, the function was evaluated only after the assignment. <br /><br />In Java, they decided to handle this by forcing us to declare the variable as final. <br />For example : <br /><br /><pre>public void demo(){<br />        <br />        final String filterValue = \"guy\";<br />        File folder = new File(\".\");<br />        <br />        folder.listFiles(new FilenameFilter() {<br />            @Override<br />            public boolean accept(File dir, String name) {<br />                return name.indexOf(filterValue) >= 0;<br />            }<br />        });<br />        <br />        <br />    }<br /><br /></pre><br />Note that the variable \"filterValue\" had to be declared final. <br />So, the idea is simply to avoid ambiguity. <br /><br /><h1>Final and Const </h1><br />It is unavoidable to be a bit confused. It seems that final on an Object is meant only for the reference. Thus, I am allowed to do the following: <br /><pre>public void demo2(){<br />        final MyObj obj = new MyObj();<br />        obj.field = \"hello world\";<br />    }<br /></pre><br />While the object changes, the reference does not. <br />This also covers the case - which I found most confusing at the time - of sending \"obj\" to another function. <br /><br />You are able to write code like this <br /><pre><br />    public void demo2(){<br />        final MyObj obj = new MyObj();<br />        obj.field = \"hello world\";<br />        demo3(obj);<br />        System.out.println(\"obj.field = \" + obj.field);<br /><br />    }<br /><br />    public void demo3(MyObj obj){<br />        obj = new MyObj();<br />        obj.field = \"hello again\";<br /><br />    }<br /></pre><br /> <br />Some might think that demo3 should declare MyObj final, just like const in c++. <br />However - this is not the case. The reason is - of course - that when demo3 returns, the assignment we did cancels either way and we get \"hello world\" back in demo2. <br /><br />So you will be surprised to discover you can write <br /><pre>public void bookMe(final Book book){<br />        // ... do something here<br />    }<br /></pre><br />Well... this is surprising - because as I said before - there's no real need to forbid book assigment since it cancels anyway.. so why do we need it ??? Well, we don't. We can add this in order to discover bugs in runtime (assigning book now will cause compiler to fail) and we can use it if we want to pass the argument to an anonymous class (without assigning it to another variable first). <br /><br /><br /><h1>Conclusion </h1><br /><ul><li>For inner classes - the final is an ambiguity solver</li><li>You can pass final variables to methods that don't declare final</li><li>There's no real need to add \"final\" to method signatures </li></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6848696100847697695/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/anonymous-classes-final-java-and.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6848696100847697695"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6848696100847697695"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/anonymous-classes-final-java-and.html",
                        "_title": "Anonymous classes, Final - Java and Javascript"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-333113416988847882",
                "published": "2010-03-14T20:30:00.001-07:00",
                "updated": "2010-06-12T01:35:39.764-07:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "flex"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Flex on Tracks"
                },
                "content": {
                    "_type": "html",
                    "__text": "<h1>Installing </h1><a href=\"http://www.adobe.com/cfusion/entitlement/index.cfm?e=flex3sdk\">Download the flex SDK</a>. <br />Run Maven command -- add your artifact details (id,group,version) as needed : <br /><pre>mvn archetype:create -DarchetypeArtifactId=maven-archetype-flex -DarchetypeVersion=1.0 -DarchetypeGroupId=dk.jacobve.maven.archetypes  -DgroupId=multiModuleProjectId</pre><br /><br />Basically you're \"good to go\" but ... keep reading<br /><br /><h1>To Do </h1><br /><h2>Configure Plugin </h2>The flex pom.xml is configured with Main.mxml. <br /><br />For some reason, I got a wrong value there after project generation. This is a file path (not class name) so simply add path/Main.mxml.<br /><br /><h2>Configure XSD </h2><br />I use Intellij's community edition to learn flex. So in order to write MXML quickly, I find it useful to configure the XSD's location. I am sure the xsd is somewhere in the SDK but I couldn't find it. You can find the XSD in <a href=\"http://xsd4mxml.googlecode.com/files/flex3.xsd\">google code.  </a> So simply add the following to the Application element. <br /><pre>xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"<br />  xsi:schemaLocation=\"http://www.adobe.com/2006/mxml<br />  http://xsd4mxml.googlecode.com/files/flex3.xsd\"<br /></pre><br />And then you will be able to tell intellij to fetch it automatically. <br /><br /><br /><h1>Integrating with your application </h1><br />The packaging of the project is swf. So in order to display it on the web, you will need an HTML and an object tag in order to show it."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/333113416988847882"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/333113416988847882"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7923305833283329244",
                "published": "2010-03-11T23:06:00.000-08:00",
                "updated": "2010-06-12T00:10:04.054-07:00",
                "category": [
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "mysql"
                    },
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "sql"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "SQL for interviews - Continued"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S5E9c8C6DnI/AAAAAAAAALU/mo5GukvGYWw/s1600-h/JOIN-Entry.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"160\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S5E9c8C6DnI/AAAAAAAAALU/mo5GukvGYWw/s200/JOIN-Entry.png\" width=\"200\" /></a></div>In a<a href=\"http://mograblog.blogspot.com/2010/03/basic-things-you-should-know-about-sqls.html\"> previous entry </a> I explained how I always get asked the same SQL questions in interviews. Lo and behold, I am asked the very same questions in an interview I had just the other day. <br /><br />This time I had no problem answering \"which join joins which joins..\"<br /><br />So I decided to expand the previous entry with some more things I see a lot in interviews. <br /><br /><a name='more'></a><br /><br /><h1>Aggregations and Dates </h1>Based on: <br /><ul><li> <a href=\"http://www.w3schools.com/sql/sql_groupby.asp\">GROUP BY</a>from w3c</li><li> <a href=\"http://www.tizag.com/sqlTutorial/sqldate.php\"> DATEs in SQL</a> from some cool site</li></ul><br />I am using mysql for the following queries. <br />Lets look at the following table definition : <br /><pre>+---------------+--------------+------+-----+---------+-------+<br />| Field         | Type         | Null | Key | Default | Extra |<br />+---------------+--------------+------+-----+---------+-------+<br />| customer_name | varchar(255) | YES  |     | NULL    |       |<br />| order_id      | int(11)      | NO   | PRI | 0       |       |<br />| price         | int(11)      | YES  |     | NULL    |       |<br />| date          | date         | YES  |     | NULL    |       |<br />+---------------+--------------+------+-----+---------+-------+<br /></pre><br />created with this SQL <br /><pre>create table ORDERS (customer_name varchar(255), order_id int, price int, date DATE, PRIMARY KEY(order_id));<br /></pre><br />In real life - you will have a FK and customer_id instead of customer_name, but since we are not dealing with any FK feature today, I replaced it with a name to be visually nicer.<br /><br />and with queries that look like this <br /><pre>insert into orders values ('boris',7,1067,'2001-11-15');<br /></pre><br />I created the following table<br /><pre>+---------------+----------+-------+------------+<br />| customer_name | order_id | price | date       |<br />+---------------+----------+-------+------------+<br />| liron         |        1 |    45 | 2001-05-23 |<br />| liron         |        2 |   150 | 2004-03-15 |<br />| liron         |        3 |   150 | 2008-08-12 |<br />| liron         |        4 |   350 | 2008-08-17 |<br />| sharon        |        5 |    15 | 2008-02-02 |<br />| sharon        |        6 |    25 | 2008-04-10 |<br />| boris         |        7 |  1067 | 2001-11-15 |<br />+---------------+----------+-------+------------+<br /></pre><br /><h1>The challenge </h1><br /><ul><li>select all customers since 2002.<br /><pre>select distinct customer_name from orders where YEAR(orders.date) > '2002'</pre></li><li>select customers and the sum of their orders<br /><pre>select customer_name,SUM(price) from orders GROUP BY customer_name;</pre></li><li>select number of orders each customer had since 2005<br /><pre>select count(*) from orders where YEAR(orders.date) > '2005' GROUP BY customer_name;</pre></li><li>select the customer name and number of orders for customers that ordered over 100$ total<br /><pre>select customer_name,count(*) from orders  GROUP BY customer_name HAVING SUM(orders.price) > 100;</pre></li><li>now to combines everything : show the name of the customer and the number of order, but only for customers that ordered more than 100$ since 2005<br /><pre>select customer_name,count(*) from orders WHERE YEAR(orders.date) > 2005 GROUP BY customer_name HAVING SUM(orders.price) > 100;</pre></li></ul><br />The important things you should remember for the interview are : <br /><ul><li>The HAVING keyword that is used for conditions on aggregation functions</li><li>The YEAR function operated on the date. </li><li> GROUP BY keyword. I also used DISTINCT in the first option</li><li> The order in which they should appear : GROUP BY and then HAVING </li></ul><br /><br /><h1>Stored Procedures </h1><br />In one interview I was asked to list pros and cons for Stored Procedure. <br />You should know - I am not a DBA and so far, I worked in companies that had DBAs so when I defined a Stored Procedure it was solely for tests.<br /><br />However, the question interested me. Lets focus on data validation for example. Should we validate in a Stored Procedure on DB's side or in code on Server side? <br /><br />This reminded me the same issue concerning Client side and Server side.. Where do you validate the integrity of the data? If I write it in the client side, I save unnecessary load on the server, but we also have to validate in the server side if we want to enable web-services. (for example). <br /><br />We also define constraints on the schema. Should we validate them and if so should we do that on server side or maybe client side? The usual solution would be to validate on all levels but that would require a lot of maintenance in days to come. That, in itself, might even be a good thing. If I accidentally delete a line of code that validated a field, I always have other layers to fall on. <br /><br />Stored Procedures play the same problematic part in this entire story. Some would claim that modifying a Stored Procedure will affect the application more than if the logic was determined in Server side by Dynamic Queries. I don't really see the difference. <br /><br />Thank god for Ajax and ORM layers to minimize the problem a bit. Ajax allows us to minimize the client/server problem by minimizing the data transferred between them. This, in turn, increases the speed and we get a good user experience. The ORM layer allows us to define the constraints in the code and that will take care of defining them in the schema as well, and (sometimes) validate them at runtime. <br /><br />In Rails, for example, this entire mechanism is implemented so well, you are almost unaware of it. For more reading you should focus on <a href=\"http://api.rubyonrails.org/classes/ActiveRecord/Base.html\">ActiveRecord</a> documentation.<br /><br />So to conclude - Stored Procedures are yet another method for encapsulating logic, but as a developer I will prefer to keep their usage to a <b>minimum</b> (minimum and not disregard them as I am assuming there are situations using them is crucial). As for other topics such as security and performance that I stumble upon in articles on the matter, I can only say that the above applies to them as well - Stored Procedures are just another layer that complicates our decision making."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7923305833283329244/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/sql-for-interviews-continued.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7923305833283329244"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7923305833283329244"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/sql-for-interviews-continued.html",
                        "_title": "SQL for interviews - Continued"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/S5E9c8C6DnI/AAAAAAAAALU/mo5GukvGYWw/s72-c/JOIN-Entry.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-655925006511972419",
                "published": "2010-03-09T09:09:00.000-08:00",
                "updated": "2010-06-12T00:04:56.558-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Rails Quicky - Mistakes with Blocks"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://mograbi.co.il/guy_mograbi/rails_api/rails.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://mograbi.co.il/guy_mograbi/rails_api/rails.png\" /></a></div><br /><br /><h1>Looking for Tutorials?</h1><br />What I wrote here - you won't find in the links below, but if you are looking for tutorials try these cool articles I found <br /><ul><li><a href=\"http://blog.codahale.com/2005/11/24/a-ruby-howto-writing-a-method-that-uses-code-blocks/\">Basic tutorial</a><br /></li><li><a href=\"http://talklikeaduck.denhaven2.com/2007/10/02/ruby-blocks-do-or-brace\">Brackets or do/end?</a></li></ul><br /><h1>Function with a variable and a block as parameters </h1><br />As I am implementing the \"depot\" tutorial from the <a href=\"http://www.pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition\">Rails book</a> I tried to write a function with a block. <br /><br />It should look like this : <br /><pre>def update_cart(action_as_str, &block)<br />  ... # do something<br />  yield product if block_given? #product was assigned before and now passed to the block<br />  ... # do something else<br />end<br /></pre><br /><br />As you can see - I have a parameter and a block given to the function. <br />The function calculates a variable named \"product\" and passes it to the block. <br /><br />I stumbled upon some error trying to call this function. <br /><br /><h1>Calling the function</h1><br />The correct way to call this function is <br /><pre>update_cart(\"add\"){|product| ... }<br /></pre><br />However, since it looks as if the parameter and the block are parameters of the function (they are both in the brackets) I initially wrote <br /><pre>update_cart(\"add\",{|product|...})<br /></pre><br />which didn't work. I also knew that ruby doesn't require me to write the brackets, so I tried <br /><pre>update_cart \"add\",{|product|...}<br /></pre><br />which also didn't work. Last but not least, the following didn't work as well <br /><pre>update_cart \"add\" {|product|...}<br /></pre><br />Which is weird because it looks syntactically correct to me. <br />As you know - you can replace the brackets with do/end , so for the record it behaves just the same as the brackets in all the above scenarios"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/655925006511972419/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/rails-quicky-mistakes-with-blocks.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/655925006511972419"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/655925006511972419"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/rails-quicky-mistakes-with-blocks.html",
                        "_title": "Rails Quicky - Mistakes with Blocks"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4196439408199487159",
                "published": "2010-03-08T22:51:00.000-08:00",
                "updated": "2010-07-24T04:08:04.602-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "pubsubhubbub"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "pubsubhubbub"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S5XweDzcoLI/AAAAAAAAAMI/A759-DuO6T0/s1600-h/bigfeed.gif\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5446523723582316722\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S5XweDzcoLI/AAAAAAAAAMI/A759-DuO6T0/s320/bigfeed.gif\" style=\"cursor: hand; cursor: pointer; float: left; height: 48px; margin: 0 10px 10px 0; width: 48px;\" /></a><br />While reading about Google Buzz I stumbled upon this nice thing called pubsubhubbub which basically stands for \"publish and subscribe hub\".<br /><br />It's basically the same concept of streaming but implemented for publish/subscribe mechanisms like ATOM feeds. <br /><br /><object height=\"295\" width=\"480\"><param name=\"movie\" value=\"http://www.youtube.com/v/B5kHx0rGkec&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/B5kHx0rGkec&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"295\"></embed></object><br /><br />There's also a presentation available : <br /><iframe frameborder=\"0\" height=\"451\" src=\"http://docs.google.com/present/embed?id=ajd8t6gk4mh2_34dvbpchfs&size=m\" width=\"555\"></iframe><br /><br />For a more technical video that shows you how to set a hub locally check out this video <br /><object height=\"344\" width=\"425\"><param name=\"movie\" value=\"http://www.youtube.com/v/5obK-l8JwSY&hl=en_US&fs=1&color1=0x402061&color2=0x9461ca&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/5obK-l8JwSY&hl=en_US&fs=1&color1=0x402061&color2=0x9461ca&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"344\"></embed></object><br /><br /><h1>How to get Started </h1><br />It pretty easy. Simply go to <a href=\"http://pubsubhubbub.appspot.com/\">http://pubsubhubbub.appspot.com/</a> and subscribe manually. <br /><br />You can also try the following implementations <br /><a href=\"http://code.google.com/p/pubsubhubbub/wiki/Hubs\">http://code.google.com/p/pubsubhubbub/wiki/Hubs</a><br /><br /><h1>Hub and XFN </h1><br />You can specify your hub like this : <br /><pre><link rel='hub' href='http://pubsubhubbub.appspot.com/'/></pre><br />You should note the \"rel\" attribute which specifies hub.<br /><br />This will allow you to automatically register a hub if you want to.<br /><br /><h1>Future Me</h1><br />In the future I will set up my own hub and implement a demo page to show how it works."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4196439408199487159/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/pubsubhubbub.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4196439408199487159"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4196439408199487159"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/pubsubhubbub.html",
                        "_title": "pubsubhubbub"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/S5XweDzcoLI/AAAAAAAAAMI/A759-DuO6T0/s72-c/bigfeed.gif",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8614987161893733783",
                "published": "2010-03-08T22:43:00.000-08:00",
                "updated": "2010-06-12T00:03:38.164-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Setting welcome page in Rails"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a href=\"http://www.mograbi.co.il/guy_mograbi/rails_api/rails.png\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" src=\"http://www.mograbi.co.il/guy_mograbi/rails_api/rails.png\" style=\"cursor: hand; cursor: pointer; float: left; height: 64px; margin: 0 10px 10px 0; width: 50px;\" /></a><br /><a href=\"http://rails.mograbi.co.il/\">Check how I advance in Rails </a><br /><br /><br /><h1>Setting a welcome-page</h1><br />In Java/Tomcat I have a web.xml to define a \"welcome-page\" which usually points to some index.jsp. This means that if my root URL is http://www.mograbi.co.il/guy_mograbi<br />it will show the page http://www.mograbi.co.il/guy_mograbi/index.jsp .<br /><br />In Rails it works like this :<br /><ul><li> Under your application root folder you will find the folder \"public\". In which you will see an \"index.html\" file - that default to \"Rails Welcome\" that looks like the IFrame I show below</li><li> In folder \"config\" you will see the file \"routes.rb\" that is very important - I will dedicate a whole entry only on this file. You can define the welcome page like as such : <br /><pre>map.root :controller => \"categories\"</pre>(for example). Read more about it <a href=\"http://api.rubyonrails.org/classes/ActionController/Routing.html\">here</a><br /></li></ul>This is how the default welcome page from rails looks like :<br /><iframe src=\"http://www.mograbi.co.il/guy_mograbi/rails_api/default_index.html\" style=\"height: 400px; width: 600px;\"></iframe>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8614987161893733783/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/setting-welcome-page-in-rails.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8614987161893733783"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8614987161893733783"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/setting-welcome-page-in-rails.html",
                        "_title": "Setting welcome page in Rails"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-472807674396534003",
                "published": "2010-03-08T13:45:00.000-08:00",
                "updated": "2010-07-24T04:06:25.159-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "rails"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Rails API Documentation"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://rubyonrails.org/images/rails.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://rubyonrails.org/images/rails.png\" /></a></div><br />While fussing around with Rails, I tried to find the documentation but couldn't find it. The reason is that you have to generate it. <br /><br /><h1>Generating the documentation </h1><br /><br />In order to generate the documentation you will need to create a dummy application and then \"freeze\" the Rails version. <br /><br />Freezing causes a copy of Rails source to the application. This means that when we generate the documentation - it will also go over Rails files as well.. <br /><br />The commands are these : <br /><pre>rail temp<br />cd temp<br />rake rails:freeze:gems<br />rake doc:rails<br /></pre><br /><br /><br />It took my computer about 80 seconds. <br /><br />Since the process is that simple - I have to wonder why don't they do this automatically in the release and publish this online? Is it the size? It's just 6 MB.. Well, never mind. <br /><br /><h1>My copy of the documentation </h1><br /><br />I decided to copy-paste the output of the commands to my site. You can visit it at <a href=\"http://mograbi.co.il/guy_mograbi/rails_api/2.0.2/index.html\" rel=\"me\">http://mograbi.co.il/guy_mograbi/rails_api/2.0.2/index.html</a><br /><br />The version I am using is : 2.0.2. Since the version appears in the URL you can rest assure I will maintain old/new versions."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/472807674396534003/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/rails-api-documentation.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/472807674396534003"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/472807674396534003"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/rails-api-documentation.html",
                        "_title": "Rails API Documentation"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6702698865435610773",
                "published": "2010-03-06T13:15:00.000-08:00",
                "updated": "2010-07-24T04:06:59.322-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "google"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "My Thought About  PubSubHubbub and Google GData API"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S5K1YQlhsZI/AAAAAAAAALs/GWv9UFP-5Tc/s1600-h/thoguhts.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S5K1YQlhsZI/AAAAAAAAALs/GWv9UFP-5Tc/s1600/thoguhts.png\" /></a></div><br />So many things to learn, so many things to do.. From time to time, the right thing to do is to sit back and ponder. Today I would like to ponder about <a href=\"http://code.google.com/p/pubsubhubbub/\">pubhubsubbub</a> and <a href=\"http://code.google.com/apis/gdata/docs/client-libraries.html\">GData API Client Libraries</a><br /><br />If you don't know what these things are, you should read about them first. (I also have blogposts about them). <br /><br /><a name='more'></a><br /><br /><h1>PubHubSubbub </h1><br />PubSubHubbub?? Couldn't find a normal name? <br /><br />It's a great idea, and I loved it. The web is becoming more about streams as the day goes on. it's all about the user experience. Since I am going to talk about GData-API in just a second, I would like to note I didn't find it there. There is a \"hubbub\" client library for java but you'd have to search and update it separately. <br /><br />I loved the thought of downloading a hub so I can run it locally, and I loved the screens that come along with it for development. Actually - the entire dev environment is simply great. Google did a great job about that.<br /><br />So.. the idea is that each feed has a hub. I assume that you can publish to multiple hubs - although this was not specified anywhere yet. Why would I want to do that? Well, simply to reach as many people as I want, plus, I am being cautious since I am unsure about what happens if the hub server crashes. <br /><br />What really happens if the hub crashes ? Will I be missing events? Or is there a recovery mechanism? I don'y know yet.. <br /><br />Can a hub subscribe to another hub? Logically I see no reason why not. But what will happen if subA publishes to subB and I am subscribed to both? Will I get events twice? darn.. So every application I maintain needs to handle this right?? How can I identify events uniquely?? is it even possible?? I don't know yet.. <br /><br />Can I add attachments? what does it even mean \"adding attachments to a feed\"? It seems possible.. Even though I don't quite understand what it means yet, it doesn't surprise me that it exists.<br /><br />So a streaming feed with attachments.. sounds familiar? Isn't this the same as a \"wave\" (maybe even better?)? hmm... <br />It seems we are going back and forth with the same idea over and over again, but each time modifying a little variable. It is amazing how these \"little\" variables can affect so much. <br />The wave has user control, while the pubsub protocol does not - I cann't control who sees my feed. <br /><br />What about security?? Who is even responsible for it? Unlike any other streaming mechanism (wave, buzz etc.. - what about tweeter?) the hub is not centralized.. in terms of security, it means we are all responsible! You should trust no one.  <br /><br />So I'm thinking about all the cool things I am going to do with this. I am definitely going to have a sub locally.. just for the fun of it. And then, it came to me that implementing a chat is not that hard! Not only is it easy, but even better than implementation you have today. Why better? <br /><br />The hub is a not centralized (yeah, seems to be the main feature). up until today you had to be part of some network to chat with others. With this nifty thing, the feeds are the users you can chat with, so if you are publishing, you are chatting and you don't need to \"register\" but instead you simply subscribe. Unlike normal chatting - you cannot chat 1 on 1 since you publish to the web and not specific users. Nevertheless, I am certain some servers will try to add this layer in order to make it possible. <br /><br />If you ask me - forcing chats to be open are the better approach. Talking by default as if anyone can \"hear\" you is nicer. <br /><br />So there are a lot of questions to answer, and I am sure more will come as I go along this path. <br /><br /><h1>GData API</h1><br />The other day I said to myself - today is the day. So I go to downloads only to find that it doesn't work. :( I was forced to wait until some bug was fixed and I can download again. It seems <a href=\"http://groups.google.com/group/google-help-dataapi/browse_thread/thread/0fff27ad19849210\">other people had the same problem. </a><br /><br />Why don't they place this in a maven repository? This is exactly why this thing was invented. <br />Since there's no limitation to publish it, I placed it in my repository. You are welcomed to visit my <a href=\"http://www.mograbi.co.il/nexus\" rel=me>thirdparty repository</a>. <br />However, I didn't fix the dependencies. Once I included blogger's jar in my project, I discovered I had to include Google's collection jar and some other jar. Those jars are in a Maven Repository by now - so no problem there. But it is a bit scary to think that I don't have all dependencies - you can never know when Google's code will a new Class that requires some dependencies you don't have. This is yet another thing Maven is supposed to solve. <br /><br />I will not be surprised to find out Google are about to release their own implementation of a repository. I hope that their repository will support ALL technologies - it seems odd to me that ruby's gems and Maven's artifacts have different infrastructures to move around. <br /><br />I love a lot of thing Google does. They are the standard as far as I am concerned. I read snippets of code from Google whenever I get the chance. Luckily enough, GData comes with code samples. <br /><br />Their API is generic and modular. I liked it. There were things, however, that I thought it was a bit too much. For example - the blogger api sample - specifies the URLs in the sample class.. what up with that? This is a copy-paste from their code <br /><pre> private static final String FEED_URI_BASE = \"http://www.blogger.com/feeds\";  private static final String POSTS_FEED_URI_SUFFIX = \"/posts/default\";  private static final String COMMENTS_FEED_URI_SUFFIX = \"/comments/default\";  private static final String METAFEED_URL = \"http://www.blogger.com/feeds/default/blogs\";</pre><br />I assume everyone will define these constants.. why not place them in the api class instead? <br />Better yet - use a template. This is from the code again. <br /><pre> new URL(feedUri + POSTS_FEED_URI_SUFFIX);and  feedUri + \"/\" + postId + COMMENTS_FEED_URI_SUFFIX;</pre><br />As a dedicated developer, it disturbs me to see such code. Wouldn't it be better if I wrote it like this <br /><pre>// 0 - feedURI// 1 - postId\"{0}/{1}/comments/default\"; </pre><br />it would be even better if there was some injection language (and I am sure there is one) that will make it look like this <br /><pre>public String getCommentsURL(String feedUri,long postId){   return format(\"#{feedUri}/#{postId}/comments/default\");}</pre><br />looks a bit like ruby doesn't it? <br /><br />So I think there's a place to improve here (however insignificant it may be.). <br /><br />By the way, if we are talking about blogger - check out the <a href=\"http://draft.blogger.com/home\">\"blogger in draft\"</a>. It's amazing what they are doing there. <br /><br /><h1>Conclusion</h1><br />It's exciting times to be a developer. This post, like many others I suppose, referenced Google even though it talked about concepts rather than implementations. <br /><br />Google seems to be rushing ahead, leaving the entire world a few steps backwards. I hope they keep doing that because the faster they go, the better for everyone. <br /><br />Is there anyone out there successfully keeping up with them? I can tell you, it's fun just trying. Every thing I read about gives me several more things to read about and a lot of questions. I am surprised I even find the time to blog about it :)."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6702698865435610773/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/my-thought-about-pubsubhubbub-and.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6702698865435610773"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6702698865435610773"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/my-thought-about-pubsubhubbub-and.html",
                        "_title": "My Thought About  PubSubHubbub and Google GData API"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S5K1YQlhsZI/AAAAAAAAALs/GWv9UFP-5Tc/s72-c/thoguhts.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2110341910785778112",
                "published": "2010-03-06T03:11:00.000-08:00",
                "updated": "2010-03-06T03:39:11.418-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Batching Maven Deploy File"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S5I-jgv9jAI/AAAAAAAAALk/MIhvrBkV8c0/s1600-h/automation.png\" imageanchor=\"1\" style=\"clear: left; float: left; margin-bottom: 1em; margin-right: 1em;\"><img border=\"0\" height=\"190\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S5I-jgv9jAI/AAAAAAAAALk/MIhvrBkV8c0/s320/automation.png\" width=\"320\" /></a></div><br />Every now and then you might come across a project that does not publish itself in a Maven Repository. <br /><br />Every now and then you will come across such a project that releases A LOT of artifacts... <br /><br />For example - <a href=\"http://code.google.com/p/gdata-java-client/downloads/list\">google's GData API.. </a>. <br /><br />Sometimes those jars are named \"artifactId-version.jar\" and all you are missing is a nice batch to deploy them automatically. It's easier to manually copy-paste many lines and quickly modify parameters and have a long script with many jar names to deploy. <br /><br />How about an automated script? <br /><a name='more'></a><br /><br /><h1>Automatically Deploying Google's GData API to Maven</h1><br />The script I wrote is for windows DOS (but I assume it can be easily translated for other platforms): <br /><pre>@echo off<br />for %%X in (lib/*.jar); do (<br />rem echo %%X<br />for /f \"tokens=1-4 delims=-\" %%a in (\"%%X\") do (<br />call :parse_version %%a %%b %%c %%d<br />)<br />)<br /><br />GOTO :eof<br /><br />:parse_version <br /> rem echo %1 %2 %3 %4 <br /> if \"%4\" == \"\" (<br />  for /f \"tokens=1,2 delims=.\" %%a in (\"%3\") do  call :deploy_file %1-%2 %%a.%%b<br /> ) else (<br />  for /f \"tokens=1,2 delims=.\" %%a in (\"%4\") do  call :deploy_file %1-%2-%3 %%a.%%b<br /> )<br /> <br /> GOTO :eof<br /><br />:deploy_file<br /> rem echo deploying artifact=%1 version=%2<br /> call mvn deploy:deploy-file -Dfile=lib/%1-%2.jar -DgroupId=com.google.gdata -Dpackaging=jar -Durl=%rep_url% -DrepositoryId=%rep_id% -DartifactId=%1 -Dversion=%2<br /> GOTO :eof<br /><br /><br /></pre><br />NOTE : you need to modify the -Durl and -DrepositoryId in order to get it working. <br />Place the bat file in the parent directory of \"lib\" or modify the for %%X parameter according to your location. <br /><h1>Explanation</h1><br />I begin with iterating all file with a for loop. <br />For each file I parse its name with delimiter \"-\" and then I call \"parse_version\". <br /><br />The reason I call \"parse_version\" is that the \"%%\" variables won't be evaluated otherwise. <br />Read about it more <a href=\"http://ss64.com/nt/for.html\">here</a><br /><br />I use google's conventions - there are 2 templates for naming which are : <br />a-b-c.d.jar<br />or <br />a-b-meta-c.d.jar<br /><br />where a and b are strings and c,d are numbers that determine the version. <br />This means I have 3 OR 4 elements after splitting with delimiter \"-\" - so I hard coded the IF. (I don't know how to this more generic than that.. sorry). <br /><br />In order to parse the version, I repeat the same procedure but with delimiter \".\". (This time it's easier because there are always just 2 numbers for the version). <br /><br />Then I have all the data I need to construct the artifactId and version - and I send them to \"deploy_file\". <br /><br />In deploy_file I use the <a href=\"http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html\">deploy:deploy-file</a> goal with some other hard-coded elements such as repository URL, repository ID, packaging and groupId. <br /><br />Usually I will only need to change the groupId since I am always deploying to the same repository."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/2110341910785778112/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/batching-maven-deploy-file.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2110341910785778112"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2110341910785778112"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/batching-maven-deploy-file.html",
                        "_title": "Batching Maven Deploy File"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/S5I-jgv9jAI/AAAAAAAAALk/MIhvrBkV8c0/s72-c/automation.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4240612618570367087",
                "published": "2010-03-05T07:48:00.000-08:00",
                "updated": "2010-03-05T09:21:58.404-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Basic things you should know about SQLs"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S5E9c8C6DnI/AAAAAAAAALU/mo5GukvGYWw/s1600-h/JOIN-Entry.png\"><img style=\"float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 320px; height: 258px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S5E9c8C6DnI/AAAAAAAAALU/mo5GukvGYWw/s320/JOIN-Entry.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5445200991831592562\" /></a><br />SQL questions are used in job interviews almost every time. Since I rarely handle SQL queries (I usually use an ORM layer), I don't give a perfect answer - even though it is not that hard... <br /><br /><h1> JOINS </h1> <br /><br />Get, insert, update are pretty straight forward. But JOIN somehow eludes my mind. I know the concept (even though I don't remember the difference between the different JOINs. I can barely remember which types exist) but I never remember the syntax. <br /><br />While Get, insert and update are great for a single table, a JOIN is used to correlate information from several tables. The most common example looks some like this <br /><a name='more'></a><br /><br />Borrowed Books Tables : <br /><pre><br />+---------+--------------------------------------+---------+<br />| book_id | name                                 | user_id |<br />+---------+--------------------------------------+---------+<br />|       1 | Peter Pan                            |      45 |<br />|       2 | Lord of the Rings - The Two Towers   |      53 |<br />|       3 | The Hitchhiker's Guide to the Galaxy |      45 |<br />+---------+--------------------------------------+---------+<br /></pre><br /><br /><br />Library Subscribers Table:<br /><pre><br />+----+-------+<br />| id | name  |<br />+----+-------+<br />| 45 | Inbal |<br />| 53 | Liron |<br />| 76 | Guy   |<br />+----+-------+<br /></pre><br /><br />We have 3 Subscribers and 3 borrowed books. Here are the questions and associated queries : <br /><ol><br /><br /><li><br />Select all books borrowed by Inbal - <br /><pre><br />select books.name from books JOIN users on books.user_id = users.id AND users.name = 'Inbal';<br /></pre><br />Another option is <br /><pre><br />select books.name from books, users where books.user_id = users.id and users.name = 'Inbal';<br /></pre><br /><br />-- Notice you don't even need a join, just understand the needed correlation. <br />The performance is more or less the same, so selecting one or the other is a matter of style. <br /></li><br /><li><br />List all users without borrowed books. <br /><pre><br />select u.name u_name from users as u LEFT JOIN books as b  ON (u.id = b.user_id) where (b.name is NULL);<br /></pre><br />another option is <br /><pre><br />select name from users where users.id not in (select user_id from books);<br /></pre><br />The performance should be more or less the same, so selecting which query to use is a question of style. <br /></li><br /></ol><br /><br /><br /><h1>SQL queries to reproduce</h1><br /><pre><br />create database temp;<br />use temp;<br />create table users (id int(10) not null primary key, name varchar (255));<br />create table books (book_id int(10) not null primary key, name varchar (30), user_id int(10) not null, foreign key (user_id) references users(id) on delete cascade) engine = innodb;<br />insert into users values (45,'Inbal');<br />insert into users values (53,'Liron');<br />insert into users values (76,'Guy');<br />insert into books values(1,'Peter Pan',45);<br />insert into books values(2,'Lord of the Rings - The Two Towers',53);<br />insert into books values (3, 'The Hitchhiker''s Guide to the Galaxy',45);<br />select * from books;<br />select * from users;<br /></pre><br /><br /><br /><h1>Difference Between Joins</h1> <br />As you can see, in order to know which user does not have books, I used LEFT JOIN. If I had used INNER JOIN or JOIN I would not get the same result. Why? <br /><br />The difference between the JOINs is the decision if to return a row or not. <br />LEFT JOIN goes over the rows, and when it reaches Guy it sees there are no borrowed books but decides to return the row. (= returns if left table matches).<br />A JOIN or INNER JOIN (the same), will reach the same scenario but will decide not to return (= returns if all tables match). <br /><br />RIGHT JOIN is the same but just for the right table. <br />OUTER JOIN is RIGHT and LEFT joins combined."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4240612618570367087/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/basic-things-you-should-know-about-sqls.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4240612618570367087"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4240612618570367087"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/basic-things-you-should-know-about-sqls.html",
                        "_title": "Basic things you should know about SQLs"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S5E9c8C6DnI/AAAAAAAAALU/mo5GukvGYWw/s72-c/JOIN-Entry.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-539880399580486634",
                "published": "2010-03-04T05:14:00.000-08:00",
                "updated": "2010-03-04T05:34:38.452-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Mapping My Site with Apache Server - Lets Make It Work!"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S4-yo1bCZbI/AAAAAAAAALM/ZP2dBoe-z1I/s1600-h/apache_server.png\"><img style=\"float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 320px; height: 272px;\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S4-yo1bCZbI/AAAAAAAAALM/ZP2dBoe-z1I/s320/apache_server.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5444766889119212978\" /></a><br /><br /><br />When I was setting up my Apache Server I had some difficulties. <br />Easy to solve - but hard to find the solution. <br /><br />Here is what I encountered<br /><br /><a name='more'></a><br /><br /><h1>Request Failed</h1> <br /><br />Sometimes I tried to start the service, but couldn't. I got an alert saying \"request failed\". The reasons for this were : <br /><ul><br /><li>I didn't specify VirtualServer attribute<br />I wrote <pre> <VirtualHost></pre> instead of something like <pre><VirtualHost *></pre></li><br /><li><br />The port Apache was trying to listen on was busy. I used <pre>netstat -oa</pre> to find the PID to kill. <br /></li><br /><li><br />I didn't include the modules I needed. I needed: mod_proxy,mod_proxy_balancer,mod_proxy_http,mod_vhost_alias (maybe less but it worked  with these). <br /></li><br /></ul><br /><br /><h2> How did I find out? </h2> <br /><br />I tried reading error.log in \"log\" folder but it didn't always showed me the exception. (I even tried changing the log level to debug - in httpd.conf file). <br /><br />I finally found out the problem to most of the these issues by running the installation again. (After I ran the installation everything worked fine so I thought it would be a good idea to re-install). The installation has a \"repair\" issue. When I did that, it failed and showed me the error in a console - and I immediately knew how to solve it. <br /><br /><h1> Subdomain Mapping Doesn't Work</h1> <br /><br />I wrote something like the following<br /><br /><pre><br /><br /><proxy balancer://domain1><br />  BalancerMember http://127.0.0.1:8080<br /></proxy><br /><br /><VirtualHost *><br />  ServerName domain1.co.il<br />  ServerAlias www.domain1.co.il<br />  ProxyPass / balancer://domain1/<br />  ProxyPassReverse / balancer://domain1/<br />  ProxyPreserveHost on<br /></VirtualHost><br /><br /><br /><proxy balancer://domain2><br />  BalancerMember http://127.0.0.1:3001<br /></proxy><br /><VirtualHost *><br /> ServerName domain2.mograbi.co.il<br /> ServerAlias www.domain2.mograbi.co.il<br /> ProxyPass / balancer://domain2/<br /> ProxyPassReverse / balancer://domain2/<br /> ProxyPreserveHost on<br /></VirtualHost><br /></pre><br /><br />However - all the requests ended up at domain1... I knew the reason why they ended up at domain1 was because it appeared first so it is the default. And when I switched the order they all ended up in domain2.. <br /><br />I kept finding locations that said something about NameVirtualHost but couldn't figure out how to make it work for my environment. Why? <br />Most of the places that explain NameVirtualHost instruct to give an IP - but my computer sits behind a router on a single computer - so I had the same IP to all... <br /><br />Finally I tried the following <pre>NameVirtualHost *</pre><br />And it worked like a charm... <br /><br /><h1>Localhost works but Domain.com doesn't work</h1><br /><br />This happened to me since I am behind a firewall. In windows 7 you need to search \"firewall\" and select \"Allow a program through windows firewall\". You might see \"apache.exe\" there - but that's not what you're supposed to see. You need to see \"httpd.exe\" there. Simply add the correct program. (it resides by default in \"Program Files/Apache../Apache../bin\"<br /><br /><h1>Googling</h1><br />You will find a lot in Google. I didn't find the problem with subdomain. (I found someone describing the same problem, and then saying \"solved it\" but didn't explain how... urghh...). <br /><br />You might be attempted to try \"rewrite\" or other tools - don't. If what you need is a simple redirect to the correct server according to server name, the above text should be sufficient. If that doesn't work - focus on solving the problem and don't wander off to other techniques. <br /><br /><h1>That's all</h1><br /><br />I hope I helped."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/539880399580486634/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/mapping-my-site-with-apache-server-lets.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/539880399580486634"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/539880399580486634"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/mapping-my-site-with-apache-server-lets.html",
                        "_title": "Mapping My Site with Apache Server - Lets Make It Work!"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S4-yo1bCZbI/AAAAAAAAALM/ZP2dBoe-z1I/s72-c/apache_server.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4035969886775653340",
                "published": "2010-03-02T12:21:00.000-08:00",
                "updated": "2010-03-04T05:12:06.895-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "How Do They Do It  -  Deploying Rails"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S4-xOd8I2fI/AAAAAAAAALE/gCvGNwwiafE/s1600-h/apache_server.png\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 272px;\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S4-xOd8I2fI/AAAAAAAAALE/gCvGNwwiafE/s320/apache_server.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5444765336627370482\" /></a><br /><i>This entry is meant for people that are not familiar with HTTP Apache Server. <br /></i><br /><br />As as I said in my previous entry, the hardest thing you will face will be deploying your rails application. <br /><br />The recommended way to run rails applications is by using Mongrel in a cluster, combined with Apache Http Server for load-balancing. WOW! sounds a lot more complicated than \"run tomcat\" that I was used to so far.. So what do I do?<br /><br />I want to use Apache Http Server for a \"sorting hat\" of a kind. To have Tomcat on one path, and Rails on the other, and Apache Http Server will send each request to the correct path. Sounds difficult?<br /><br /><a name='more'></a><br /><br />Actually... Its not that hard if you do it in baby steps. <br /><br /><h1> The problem </h1> <br /><br />The problem I am facing today is that I have Tomcat running on my computer, and now I want to run Mongrel as well and make them both available in my domain <a href=\"http://www.mograbi.co.il\">www.mograbi.co.il</a>. <br /><br /><h1>Steps</h1><br /><br />The first step I will take is setting up the Apache Server with Tomcat and verify it works. Then I will add Mongrel as well. I feel it's enough for a blog entry, however, you might be interested in googling about mongrel-cluster. <br /><br /><h1>Tomcat</h1><br />So I installed my Apache Server  and I checked that it works by going to localhost. I saw \"It Works!\" on screen. (That was my first clue). So far I have Tomcat up and running with port 8080 and Apache Server with port 80. I would like to redirect all requests to Tomcat. So the configuration would look something like this :<br /><br /><pre><br /><br />NameVirtualHost *<br /><br />#define tomcat<br /><proxy balancer://tomcat><br />  BalancerMember http://127.0.0.1:8080<br /></proxy><br /><br />#forward requests to tomcat<br /><br /><VirtualHost *><br />  ServerName mograbi.co.il<br />  ServerAlias www.mograbi.co.il<br />  ProxyPass / balancer://tomcat/<br />  ProxyPassReverse / balancer://tomcat/<br />  ProxyPreserveHost on<br /></VirtualHost><br /></pre><br /><br />NOTE : I am using \"load balancer\" and ServerName with NameVirtualHost. This is not really needed when I have a single virtual host with a small load. However, since I am about to add rails in just a minute, I am giving you the final version already. <br /><br />Now lets see that everything works as expected - So I go to <a href=\"http://www.mograbi.co.il/guy_mograbi\">http://www.mograbi.co.il/guy_mograbi</a> and see that everything is ok. My computer also supports domain <a href=\"http://www.1al1.biz/1al1\">http://www.1al1.biz/1al1</a>so lets check that everything works there as well..<br /><br />So far so good. Lets try to run the Mongrel server. <br /><br /><h1>Mongrel</h1><br />Instant Rails comes with some examples such as \"cookbook\". I simply started that application with <pre>ruby script/server -p 3001</pre><br /><br />I specify port 3001 since the default is 3000 and I would like to keep developing other applications while this one is running. I would like to use subdomains to decide how to redirect the call. <br /><br />rails.mograbi.co.il - will go to rail.<br />*.mograbi.co.il - will go to tomcat.  <br /><br />Obviously the order is important since the second rule applies to the first case as well.. I assumed that the first one will also be \"default\" (This is indeed the behavior). You can also specify _default_:* . Read more <a href=\"http://httpd.apache.org/docs/2.1/vhosts/examples.html#default\">here</a><br /><br />So I simply added something very similar to before<br /><pre><br /><proxy balancer://rails><br />  BalancerMember http://127.0.0.1:3001<br /></proxy><br /><VirtualHost *><br /> ServerName rails.mograbi.co.il<br /> ServerAlias www.rails.mograbi.co.il<br /> ProxyPass / balancer://rails/<br /> ProxyPassReverse / balancer://rails/<br /> ProxyPreserveHost on<br /></VirtualHost><br /><br /></pre><br /><br />And now all I have left is to make sure everything works fine... so I go to <br /><a href=\"http://rails.mograbi.co.il\">http://rails.mograbi.co.il</a> and it works! (I also made sure that redirect to Tomcat still works.)<br />And that's it.. <br /><br />By the time you read this blog I probably replaced the cookbook with some original demo of my own. <br /><br /><h1>Conclusion</h1> <br /><br />The text I ended up with is : <br /><pre><br /><br /> NameVirtualHost *<br /> <br /> #define tomcat<br /><proxy balancer://tomcat><br />  BalancerMember http://127.0.0.1:8080<br /></proxy><br /><br />#forward requests to tomcat<br /><br /><VirtualHost *><br />  ServerName mograbi.co.il<br />  ServerAlias www.mograbi.co.il<br />  ProxyPass / balancer://tomcat/<br />  ProxyPassReverse / balancer://tomcat/<br />  ProxyPreserveHost on<br /></VirtualHost><br /><br /><br /><proxy balancer://rails><br />  BalancerMember http://127.0.0.1:3001<br /></proxy><br /><VirtualHost *><br /> ServerName rails.mograbi.co.il<br /> ServerAlias www.rails.mograbi.co.il<br /> ProxyPass / balancer://rails/<br /> ProxyPassReverse / balancer://rails/<br /> ProxyPreserveHost on<br /></VirtualHost><br /></pre><br /><br />You can move this to a different file to have nicer/cleaner conf files, but since this is very readable I didn't do that. <br />If you want to split them up, simply copy write what you want in some file \"myFile.txt\" and then add the following line to the original htpd.conf<br /><pre><br />Include \"<i>somePath</i>/myFile.txt\"<br /></pre><br /><br /><br /><h1>Troubleshooting</h1><br /><br />Seems too easy? You are right - it was much harder than that.. It took me about 0.5 a day to solve the problems. Read all about it at my <a href=\"\">Mapping My Site with Apache Server - Lets Make It Work!</a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4035969886775653340/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/how-do-they-do-it-deploying-rails.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4035969886775653340"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4035969886775653340"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/how-do-they-do-it-deploying-rails.html",
                        "_title": "How Do They Do It  -  Deploying Rails"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S4-xOd8I2fI/AAAAAAAAALE/gCvGNwwiafE/s72-c/apache_server.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6198226663949613015",
                "published": "2010-03-01T11:03:00.000-08:00",
                "updated": "2010-03-04T05:35:53.128-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Rails Experience - Getting Started"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://rubyonrails.org/images/rails.png\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 87px; height: 111px;\" src=\"http://rubyonrails.org/images/rails.png\" border=\"0\" alt=\"\" /></a><br />In my <a href=\"http://mograblog.blogspot.com/2010/02/my-rails-experience-teaser.html\"> previous entry</a> I started talking about Rails. <br /><br />In this entry I will get more technical (using windows 7). <br /><br /><h1> Instant Rails</h1> <br /><br /><br />The quickest way to start with rails in windows is to download <a href=\"http://instantrails.rubyforge.org/wiki/wiki.pl\">\"instant-rails\"</a>.<br /><br /><a name='more'></a><br />You will have to click the <a href=\"http://rubyforge.org/projects/instantrails/\">Ruby Forge</a>  link to get to downloads. <br />It will take a couple of minutes. <br />Unzip it, and find the 'exe' file to run. <br /><br />Running 'Instant Rails' means you are running the server and a 'mysql' DB. <br /><br />By default the ports used are 80 for Apache Server, you can easily modify this by clicking the \"I\" button >> configure >> Apache. <br />Look for \"80\" - there's more than one and replace. <br /><h1> Console</h1><br />In order to open a console which is \"rails aware\" click the \"I\" button and select \"Rails Application\" >> \"Open Ruby Console Window\". run \"ruby --version\" in order to make sure ruby is active. <br /> <br /><h1>Getting mysql driver</h1><br /><br />By default rails will use sqlite database (even though instant-rails comes with myssql). I like to use \"mysql\". Ruby has a built-in adapter for mysql, but it is recommended you will download a better one like this : <br /><pre>gem install mysql</pre><br /><br />And when I will create a new application I will need to specify to use \"mysql\" like this : <br /><pre>rails --database=mysql <i> appName</i></pre><br /><br /><br /><h1>Rails Version</h1><br />Here are some helpful commands to help you organize your rails version<br /><ul><br /><li><pre>gem list --local rails</pre> - lists the rails versions you have installed</li><br /><li><pre>rails --version</pre> - to find out which rails version you are running</li><br /><li><pre>gem install rails --version X.Y.Z</pre> - to install a specific version of rails</li><br /><li><pre> rails X.Y.Z <i>command</i></pre> - for every rails command you can specify the version to use</li><br /><li><pre>gem update rails</pre> - to update the rails versions you have</li><br /><li><pre>rake rails:freeze:gems</pre> - this will copy the gems you are using into your application - making sure you application will run even if the environment does not have the required versions. <br /><li><pre>rake rails:unfreeze</pre> - undoes the previous command</li><br /><li><pre>rake rails:freeze:edge</pre> - use the latest snapshot of rails</li><br /></ul><br /><br /><br />The version of rails you are using can be found in the file \"environment.rb\". Search for a line that looks like this : <br /><pre>RAILS_GEM_VERSION = \"2.2.2\"</pre><br /><br /><br />You can use the above commands in order to make documentation for rails like this : <br /><pre><br />rails temp<br />cd temp<br />rake rails:freeze:gems<br />rake doc:rails<br /></pre><br /><br />It will take a while. <br /><br /><h1> Programming Command </h1><br />This is probably the most important part since you will use these command often. <br /><br /><ul><br /><li><pre>rake db:create RAILS_ENV='development'</pre> - to create the DB for development. Replace 'development' with : 'production' and 'test' when needed.</li><br /><li><pre>rails --database=mysql <i>appName</i></pre> - to create a new application with mysql</li><br /><li><pre>rake db:migrate</pre> - to perform DB changes</li><br /><li><pre>ruby script/generate scaffold <i>name</i> \\<br /><i>field:type field2:type2</i></pre> - will create MVC files.  - the possible types are : :binary, :boolean, :date, :datetime, :decimal,<br />:float, :integer, :string, :text, :time, and :timestamp</li> <br /><li><pre>ruby script/server</pre> - to run the server - you can specify a different port if needed</li><br /></ul><br /><br /><br /><h1> A small exercise </h1><br /><br />These are the most basic commands I can think of. With these you can create a small application that allows editing, reading and indexing - which is a lot. <br /><br />Once you think you're done setting up the environment try creating a blog post application that allows creating new blog posts, listing them and editing existing. <br /><br />The blog posts should have a title and a body.. that's it.. (Solutions in following posts)."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6198226663949613015/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/my-rails-experience-getting-started.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6198226663949613015"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6198226663949613015"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/03/my-rails-experience-getting-started.html",
                        "_title": "My Rails Experience - Getting Started"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4531791125066038517",
                "published": "2010-02-28T08:39:00.000-08:00",
                "updated": "2010-03-01T10:57:10.661-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Rails Experience - Teaser"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://rubyonrails.org/images/rails.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://rubyonrails.org/images/rails.png\" /></a></div><br /><br /><br /><a href=\"http://www.ruby-lang.org/en/\">Ruby</a> is a programming language that appeared with Java at 1995, but made its big breakthrough thanks to <a href=\"http://rubyonrails.org/\">Rails</a> which is a framework that uses Ruby. <br /><br /><span id=\"goog_1267469691734\"></span><span id=\"goog_1267469691735\"></span><br />For those of you who know <a href=\"http://www.youtube.com/watch?v=cX0eIdWZQhQ\">FUSE</a> for PHP, some concepts will already be familiar. <br /><br />While Ruby is yet another programming language, Rails is yet another framework for creating web applications. However ordinary, it has some tricks up its sleeves.<br /><br />This blog is the first of many, in which I will summarize some key points to Ruby and Rails. In this entry I will talk about what you can expect from experiencing Rails. The following entry will start being more technical. <br /><br /><a name='more'></a><br /><br /><h1>From Java to Ruby </h1><br />So far, the only environment for web development that I've worked with is Java and Tomcat. As I dived into Rails, I was amazed to discover the amount of code I don't need to write.<br /><br />In the book, they often write \"magic\" instead of explaining how it is done. The so called \"magic\" is a method definition called <a href=\"http://ruby-doc.org/core/classes/Kernel.html#M005925\">method_missing</a>. <br />If you call a method on an Object, but that method wasn't defined, the call will reach \"method_missing\". So you can dynamically respond to methods that were not defined. <br /><br /><h1>Database Development</h1>Rails is the first framework I know that tries to handle the DB Schema problem. <br />The problem is there's no direct link between the source version and the Database. <br />If I check-out source from some old date, there's no \"good way\" to make sure the DB Schema matches that sources I have. <br /><br />Rails however, creates a different file (SQL like) with a time-stamp, for each schema modification. These files have 2 operations - create and drop. These operations allow you to traverse back and forward on the DB state during development. <br /><br />I really liked this approach as it seems to have a real insight on how it should be handled. If you maintain these files well - including manual modifications - you should be able to run these scripts on the deploy server for installing, uninstalling, upgrades and even downgrades. (I never heard of teams supporting downgrades). <br /><br /><br /><br /><h1>Buying Rails Book</h1><br />You probably thought that the first step would be - \"learn Ruby\". Well, that step is pretty optional. Once you started with Rails, your Ruby skills will catch on. <br />Plus, Ruby has quite an extensive documentation. So you will be just fine diving into Rails. <br /><br />This is the first time I decided to \"go by the book\". I read the book \"Agile Web Development with Rails\" and I have to say - it's pretty good. I strongly recommend it. <br /><br />Since I don't mind reading books from the screen, I bought just the eBook. You will also be fine with the hard-copy. Even though it has about 600 pages, there is an extensive index that helps you search the book.<br /><br />There are also tutorials available online and I recommend searching for them <b>after</b> you read the book. <br /><br /><h1>Testing</h1><br />As a former Mercury employee, I was enthusiastic to discover the extensive support Rails have for testing. It allows you to handle sessions, and assert for redirects. <br />Tests are auto-generated as well, so the starting point for tackling tests is pretty good. <br /><br /><br /><h1>Quirks </h1>There are some quirks along the way. For example - it surprised me to learn that the book directs me to download a product called \"instant rails\". Which is not found in the rails site. <br /><br />This product comes with a database, an IDE, a server and a nice GUI in a ZIP file. No installation is required. You simply download \"instant rails\", run the exe file, and start writing. Other than defining the database driver (which is a simple command line), no other action is required in order to see actual results. <br /><br /><br /><h1>IDEs</h1><br />The book has a chapter dedicate to IDEs. Basically it tells you - use Unix with Text-Mate. <br /><br />Since I am a windows user, I had to make a research on the matter. <br />Jetbrains (IntelliJ creators) created an entire IDE just for Ruby and Rails called RubyMines. This IDE costs 100$. I evaluated it, and was impressed. This IDE was not mentioned in the book. IntelliJ has plugins to support Ruby and Rails, but for me, it is too heavy, whilte RubyMines seems to be thinner.   <br /><br />NetBeans - mentioned in the book - also has support for Rails. This includes nice Wizards to run Rails commands. <br /><br />Surprisingly enough - instant rails comes with an IDE , which is not mentioned in the book. This IDE is called SCITE. Doesn't do much, but great for use while reading the book. Ruby reduces the amount of code you will write, so using SCITE is pretty sufficient.   <br /><br /><h1>Deploying </h1>Deployment seems to be the hardest part. There's an entire chapter dedicated to it in the book, but it doesn't really help. Since I come from the Java world, using Tomcat, I read about the possibility to use \"JRuby\" which is an easy way to run Ruby from Java, and there's really not much needed in order to do this transition, however the results are pretty disappointing - it consumes a lot of memory, and really slows down the server. Tomcat usually loads fast, but with JRuby it suddenly takes more than a minute to load (on a fast computer).  <br /><br /><br /><h1>Screen Casts</h1><br />Once you feel good with your Rails skills you will want to check out the famous <a href=\"http://rubyonrails.org/screencasts\">\"blog in 15 mins with rails\"</a> screen-cast. They don't specify some initial stuff - such as getting the DB up and running, but since they cover this well in the book, you will be fine. After you did that, it really does take about 15 minutes to write the blog. <br /><br /><h1>Other Documentation</h1><br />Documentation for Ruby and Rails increases with every passing day. <br />It amazes me how many people believe in it. <br /><br />As Java developer there are enough forums and blogs for every subject I need, and I was afraid this was not the case in RoR. There are plenty documentations and tutorials to help you get around. The Ruby library is being extended every day, so you can also expect to have \"copy-paste\" code for common problems.    <br /><br /><h1>Conlcusion</h1><br />It is definitely cool. I strongly believe that Rails is here to stay, if not \"on Ruby\" than at least in spirit. It teaches a lot about organizing your project, writing good code, agility and most important - fun.<br /><br />It is a language you can learn as a hobby AND see cool results. 3 months is more than enough to go over the entire book and say \"I know RoR\"."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4531791125066038517/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/my-rails-experience-teaser.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4531791125066038517"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4531791125066038517"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/my-rails-experience-teaser.html",
                        "_title": "My Rails Experience - Teaser"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7111611543389520059",
                "published": "2010-02-21T22:43:00.000-08:00",
                "updated": "2010-02-23T01:37:13.979-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Quest for Rest"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S4Bo_L8jNiI/AAAAAAAAAJ0/ZA53ng6vvGo/s1600-h/rest.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"178\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S4Bo_L8jNiI/AAAAAAAAAJ0/ZA53ng6vvGo/s320/rest.png\" width=\"320\" /></a></div>When I finally decided to tackle the REST approach, I first read about <a href=\"http://www.restlet.org/\">Restlet</a>,<a href=\"http://fusesource.com/open_source/restful-services/\">Fuse</a>,<a href=\"http://blog.springsource.com/2009/03/08/rest-in-spring-3-mvc/\">Spring</a> and <a href=\"http://wikis.sun.com/display/Jersey/Main\"> Jersey </a>. <br /><br />That was quite a headache :) <br />I finally decided to go on Jersey for several reasons : <br /><ol><li>It is an implementation of a JSR.</li><li>It had the shortest tutorials.</li></ol><br />When I learn something new for the first time, It's important to me to have a good experience. So I search for a Plug & Play, with as little Plug as possible. <br /><br />Spring requires a lot of background and its tutorials were TOO long. I couldn't find instructions to set up FUSE, and Restlet seemed too abstract. <br /><br />While they all support annotations, Jersey seems to have the most straight forward approach. It involves 2 simple and expected steps which are : include a jar, and define a servlet.. and you're good to go. Even though the documentation it quite poor, it shouldn't take you long to get results. (After I decided to try Jersey, it took me 10 minutes - and that includes solving a jar version collision problem).<br /><br />In this blog I will try to write a quick-reference to Jersey. <br /><br /><a name='more'></a><br /><br /><h1>Plug Servlet Mapping - web.xml </h1><br /><pre><servlet>            <br />   <servlet-name>Jersey REST Service</servlet-name>            <br /><br />   <servlet- class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>         <br /> <init-param>        <br />      <param-name>com.sun.jersey.config.property.packages</param-name><br />              <param-value>jersey</param-value>            </init-param><br />            <load-on-startup>1</load-on-startup>    </servlet><br /><br /></pre><br />** Make sure to change the param-value according to your environment<br /><br /><pre><servlet-mapping><br />        <servlet-name>Jersey REST Service</servlet-name>       <br />       <url-pattern>/rest/*</url-pattern>    </servlet-mapping><br /></pre><br />** Make sure to select your own url-pattern<br /><br /><h1>Plug Maven Dependency</h1><br /><pre><dependency><br />          <groupId>com.sun.jersey</groupId><br />          <artifactId>jersey-server</artifactId><br />          <version>1.1.4</version><br />        </dependency>   </pre><br /><br />** If you're using Hibernate, you will get an error with MethodMissing. <br /><pre>java.lang.NoSuchMethodError: org.objectweb.asm.ClassReader.accept(Lorg/objectweb/asm/ ClassVisitor;I)V</pre><br />You should specify another dependency in pom and verify that hibernate still operates fine. Hibernate uses asm 1.5 version and Jersey uses 3.0. <br /><br /><pre><dependency><br />    <!--  clash with hibernate's 1.5 version --><br />   <groupId>asm</groupId><br />   <artifactId>asm</artifactId><br />   <version>3.1</version><br /></dependency></pre><br /><br /><h1>Play - Create a simple resource </h1>create a class that looks like this : <br /><pre>package jersey;<br />import javax.ws.rs.GET;<br />import javax.ws.rs.Path;<br />@Path(\"/users\")<br />public class Users {   <br /> @GET    <br />  public String getUsers(){ return \"users\"; }<br /></pre><br />** The package name should match the one from web.xml. <br /><br />Go to URL : <br />http://<i>yourserver</i>/rest/users and you should see \"users\" printed. <br />Congratulations - you wrote your first web-service.. now lets dig deeper into those annotations. <br /><br />** Complex objects are by default referred to as XML. If you add @XmlRootElement everything will go smoothly and you can write things like : <br /><pre>  @GET<br />    public Users getXml(){<br />        return this;    <br />}</pre><br />Where this is the root element for a list of all users.<br /><br /><pre>  @GET<br />    @Path(\"/{username}\")<br />    public User getUser(@PathParam(\"username\")String username){<br />        if (users.containsKey(username)){<br />            return users.get(username);<br />        }        return null;<br />    }</pre><br />Where user is a root element by itself.<br />See here that we show the use of Path param. in \"get\" queries it is quite easy to have a param. We all know how to do that.. <br /><br />What about post , delete and put ? <br /><pre>  @POST<br />    @Path(\"/{username}\")<br />    public void addUser(@PathParam(\"username\")String username){<br />        users.put(username, new User(username,0));<br />    }<br /><br />    @PUT<br />    @Path(\"/{username}\")<br />    public Response updateUser(@PathParam(\"username\")String username){<br />        if (users.containsKey(username)){<br />            User user = users.get(username);<br />            user.setUpdated(user.getUpdated() +1);<br />        }<br />        else{<br />            users.put(username,new User(username,0));<br />        }<br />        return Response.ok().build();<br />    }<br /><br />    @DELETE<br />    @Path(\"/{username}\")<br />    public void deleteUser(@PathParam(\"username\") String username){<br />        if (users.containsKey(username)){<br />            users.remove(username);<br />        }<br />    }<br /></pre><br />How do you build a query for this ? <br />** See that all the paths are the same, just the method changes. <br /><br />Well, I use the XMLHttpRequest object like this : <br /><pre> var xmlhttp=new XMLHttpRequest();<br />    xmlhttp.open(method,url,false);<br />    var text =  xmlhttp.responseText.replace(/</g,\"<\");<br />    $('output').innerHTML =<br />                       \"status : \" + xmlhttp.status +<br />                      \"<BR/>status Text : \"  + xmlhttp.statusText+<br />                      \"<BR/>response Text : \" +  text;<br /></pre><br />** NOTE : the \"url\" should assume that same host is used. This means my URL for <br />exmple is : \"/guy_mograbi/rest/users\" - to list all users or \"/guy_mograbi/rest/users/user1\" - to get user1. <br /><br />If you use the entire path (\"http://....\") - you will see an error like this : <br /><pre>uncaught exception: [Exception... \"Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [nsIXMLHttpRequest.send]\" nsresult: \"0x80004005 (NS_ERROR_FAILURE)\" location: \"JS frame :: http://mograbi.co.il/guy_mograbi/jsps/examples/jersey_webService.jsp :: execute :: line 39\" data: no]</pre><br />So beware. In a future blog I will explain how to create a cross-domain request. (which is important in order to publish your APIs). <br /><br />The method variable gets the values : POST,DELETE,PUT as string and that creates the desired query. <br /><br />Another method is using a form, but then you need to change the annotation<br /><pre> @DELETE<br /> @Consumes(APPLICATION_FORM_URLENCODED)<br />     public void deleteUser(@FormParam(\"username\") String username){<br />        if (users.containsKey(username)){<br />            users.remove(username);<br />        }<br />    }</pre><br /><br />I haven't tried that yet though :) <br /><br /><br /><h1>Receiving complex types</h1>TBA<br /><br /><h1>References</h1><br />All my code is available as always at <a href=\"http://mograbi.co.il/nexus\" rel=\"me\">My Maven Repository</a>. <br />You can see a small example of this working at <a href=\"http://mograbi.co.il/guy_mograbi/jsps/examples/jersey_webService.jsp\">My Example Page</a>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7111611543389520059/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/my-quest-for-rest.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7111611543389520059"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7111611543389520059"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/my-quest-for-rest.html",
                        "_title": "My Quest for Rest"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S4Bo_L8jNiI/AAAAAAAAAJ0/ZA53ng6vvGo/s72-c/rest.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-967616033070167632",
                "published": "2010-02-16T14:54:00.000-08:00",
                "updated": "2010-07-12T12:34:05.003-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Generics - Did You Know ?"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S3sjcvHAf4I/AAAAAAAAAJs/XAcv_M7s3Y4/s1600-h/generic-blog.png\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5438979951569174402\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S3sjcvHAf4I/AAAAAAAAAJs/XAcv_M7s3Y4/s320/generic-blog.png\" style=\"cursor: pointer; display: block; height: 97px; margin: 0px auto 10px; text-align: center; width: 320px;\" /></a><br />Veteran programmers don't like them. <br />Fresh programmers are afraid of them. <br />But generics should be liked and embraced in this blogger's opinion. <br /><br /><br />Here are some stuff you might not find in every days' tutorial : <br /><br /><a name='more'></a><br /><br /><h1>?</h1><br />The most misunderstood part of generics is the \"unknown\" type marked with \"?\". <br />People don't understand it, and quickly give it up to write \"<Object>\" which basically eliminates the generics. <br /><br />\"?\" - by itself means - \"? extends Object\" - and means 'I don't know which type I am handling with here, but I do know it is an object'. So basically you can operate \"Object\" methods. <br /><br />However, this is not the interesting part. <br />The question mark starts to get interesting when it is in a collection. <br /><br /><pre name=\"code\" class=\"java\">Collection<? extends MyObject> myCollection;<br /></pre><br />What does this mean ? Well, it means I can only read from the collection but not write. <br />If I read from it, I will get type \"MyObject\". <br /><br /><h1>implements is extends in generics</h1>If you have an interface \"MyInterface\" you can say that the collection has objects that implement this interface like this : <br /><pre>Collection<? extends MyInterface></pre><br /><h1>extends,super </h1><br />Before I showed the \"? extends MyObject\" example. I assumed you are aware of \"extends\" option in generics - which allows you to read an object but not write one. <br /><br />What a lot of people don't know is that the opposite is also available. <br />I can write the following : <br /><pre>Collection<? super MyObject> myCollection</pre><br />This will allow me to add objects of type \"MyObject\" to the collection. <br />But when I read objects from the collection I will get \"Object\" since this is the only \"super\" I know exists for sure. <br /><br /><pre>public class A{}    public class B extends A{}    @Test    public void test(){        Collection<? super B> b = new ArrayList<A>();        b.add(new B());        Object o = b.iterator().next();    }</pre><br /><h1>Generics are only for compile time</h1><br />Generics technically exist only in compile time. This means that if I decompile a class, I won't see generics any more. <br />The JVMs do not use this information while running. <br />This means it takes only one person in the team to write non-type-safe operations to corrupt a collection for the rest. <br /><br />With that said, I should note that for all reflection lovers there's a way to know the generic type in runtime. lets say I have the following field : <br /><br /><pre>Collection<String> myStrings = ... ; </pre><br />I can know in runtime that this is a collection of String like this <br /><pre>public Collection<string> myStrings = new ArrayList<string>();    @Test    public void test() throws NoSuchFieldException {        Field field = TestMyXmlSample.class.getField(\"myStrings\");        Object[] res = null;          Type returnType = field.getGenericType();          // I am converting even though I am not sure this is correct          ParameterizedTypeImpl pti = ((ParameterizedTypeImpl) returnType);        Type[] actualTypeArguments = pti.getActualTypeArguments();        String s = Arrays.toString(actualTypeArguments);        System.out.println(\"s = \" + s);      }</string></string></pre><br />However, when you compile you get the following warning : <br />sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl is Sun proprietary API and may be removed in a future release.<br /><br /><br /><h2>On the fly generics</h2><br />You probably know by now that you can define generics in class definition. <br />But did you also know you can defined a generic on a method like this : <br /><pre>public class Obj{public <T> T createNew(Class<T> clzz){   return clzz.newInstance();}}</pre><br />Note that the class Obj does not declare T.<br /><br />I find this method most useful when using 3-parties that have a lot of unnecessary Object types returned, For example - hibernate session \"load\" function that returns Object. <br /><br /><pre>sess.load(MyObj.class,1); </pre><br />If I can help it - I wrap this function like this <br /><pre>public <T> T load(Session sess, Class<T> clzz, long id){          return (T) sess.load(clzz,id);}</pre>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/967616033070167632/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/generics-did-you-know.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/967616033070167632"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/967616033070167632"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/generics-did-you-know.html",
                        "_title": "Generics - Did You Know ?"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/S3sjcvHAf4I/AAAAAAAAAJs/XAcv_M7s3Y4/s72-c/generic-blog.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-49719887257650693",
                "published": "2010-02-16T13:20:00.000-08:00",
                "updated": "2010-02-16T13:29:25.028-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Enums - Did You Know ?"
                },
                "content": {
                    "_type": "html",
                    "__text": "<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"><tbody><tr><td style=\"text-align: center;\"><img border=\"0\" height=\"320\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S3sODtSleCI/AAAAAAAAAJg/Zo2EDnH961k/s320/free-counting-numbers.jpg.jpeg\" style=\"margin-left: auto; margin-right: auto;\" width=\"310\" /></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\">Enumration</td></tr></tbody></table><div class=\"separator\" style=\"clear: both; text-align: left;\"><a href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S3sODtSleCI/AAAAAAAAAJg/Zo2EDnH961k/s1600-h/free-counting-numbers.jpg.jpeg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"></a></div><h1>Enums</h1><br />Here are some stuff you won't find so easily in your <a href=\"http://java.sun.com/j2se/1.5.0/docs/guide/language/enums.html\">usual Enums tutorials</a><br /><br /><a name='more'></a><br /><h2>Inheritance </h2><br />Enums cannot extend other classes since they already extend the Enum class. <br /><br />However - they can implement an interface<br /><br /><h2>Abstract methods </h2><br />Enums can have abstract methods, and you will have to provide the implementation in enum decleration. <br /><br />In this example I show an Enum for date formats with a \"isSuitable\" method that receives a string and returns true iff the string applies to the template. <br />(Normally you would probably use SimpleDateFormat). <br /><br /><pre>public enum DateFormats {<br /><br />    SHORT{<br /><br />        boolean isSuitable(String dateString) {<br />            return dateString.length() < 10;<br />        }},<br />    MEDIUM{<br /><br />        boolean isSuitable(String dateString) {<br />            return dateString.length() > 10 && dateString.split(\" \").length < 15;<br />        }},<br />    FULL{<br /><br />        boolean isSuitable(String dateString) {<br />            if (dateString.contains(\"AM\") || dateString.contains(\"PM\")) return true;<br />            return dateString.length() > 10 && dateString.split(\" \").length > 15;<br />        }};<br /><br />    abstract boolean isSuitable(String dateString);<br />}<br /></pre><br />As you can see each format has a different logic to determine if the string suits it. <br />It won't be logical to use a single method with parameters. <br /><br />However this method might be cumbersome with big enums since it requires the definition of the method for enum definition. In the code above I would like to add a null and empty check to all enums, and I am required to duplicate code. The solution would be to override the methods.<br /><br /><h2>Overriding super methods </h2><br />You can extends an Enum method. I enhanced the example above as such : <br /><pre>public enum DateFormats {<br /><br />    SHORT{<br />        @Override<br />        boolean isSuitable(String dateString) {<br />            return super.isSuitable(dateString) && dateString.length() < 10;<br />        }},<br />    MEDIUM{<br />        @Override<br />        boolean isSuitable(String dateString) {<br />            return super.isSuitable(dateString) && dateString.length() > 10 && dateString.split(\" \").length < 15;<br />        }},<br />    FULL{<br />        @Override<br />        boolean isSuitable(String dateString) {<br />            if (dateString.contains(\"AM\") || dateString.contains(\"PM\")) return true;<br />            return super.isSuitable(dateString) && dateString.length() > 10 && dateString.split(\" \").length > 15;<br />        }},<br />    CUSTOMIZED;<br /><br />     boolean isSuitable(String dateString){<br />        return (!((dateString == null ) || (dateString.trim().length()==0)));<br />     }<br />}<br /></pre><br />As you can see the \"isSuitable\" function is not abstract anymore, and the enums SHORT/MEDIUM/FULL override it and call it with \"super.isSuitable\". <br /><br />I also added a new enum named \"CUSTOMIZED\" which does not define the \"isSuitable\" method. <br /><br />This method is much nicer. <br /><br /><br /><h2>Enums and JAXB</h2><br />I wrote a small JAXB example with a store and products. The target audience of the product is an enum. In order to export the enum with namespaced JAXB I wrote the following annotation : <br /><pre>@XmlEnum<br />    @XmlType(namespace = \"http://mograbi.co.il/xsds/mogi-code-samples/jaxb-code-sample/1.0/store\")<br />    public enum TARGET_AUDIENCE{<br />        CHILDREN, STUDENTS, ADULTS<br />    }<br /></pre><br />JAXB can survive without the @XmlEnum annotation. <br />Note that the definition is on the enum type and not the usage (field). <br />This means that using 3rd-parties enums is not suitable for this example.<br /><br /><br /><h2>Enum and Hibernate</h2><br />In order to save the same object into a Database with Hibernate I would annotate it with : <br /><pre>@Enumerated(EnumType.STRING)<br /></pre><br />I specify EnumType.STRING because by default hibernate uses Integer in order to save the enum ordinal. This means - if I change the order of the enum, my database is corrupted, so by default I assign the STRING value of the enum. <br /><br />I think that the STRING value is extracted with the \"name\" field of the enum, so it is quite flexible if changing is required.<br /><br /><h1>String Enum Conversions</h1><br />You can easily convert between Enum and String. <br />In order to get the String value of an enum, use \"name()\", and in order to get the Enum equivalent of the String use \"valueOf()\". <br />Using the \"name()\" instead of \"toString()\" is preferred since it is the reverse operation done by \"valueOf\".<br /><br /><pre>Book.TARGET_AUDIENCE aud = Book.TARGET_AUDIENCE.CHILDREN;<br />        System.out.println(\"aud.name() = \" + aud.name());<br /><br />        aud = Book.TARGET_AUDIENCE.valueOf(\"STUDENTS\");<br />        System.out.println(\"aud = \" + aud);<br /></pre><br />It is important to note that valueOf is case sensitive and throws \"IllegalArgumentException\" if an enum is not found. <br /><br /><h2>Enum and Reflection</h2><br />Manipulating Enum with reflection is very easy. <br /><br /><pre>Class<book.target_audience> aClass = Book.TARGET_AUDIENCE.class;<br />        if (aClass.isEnum()){<br />            Book.TARGET_AUDIENCE[] constants = aClass.getEnumConstants();<br />            for (Book.TARGET_AUDIENCE constant : constants) {<br />                System.out.println(\"constant = \" + constant);<br />            }<br />        }<br /><br />        Book.TARGET_AUDIENCE audience = Enum.valueOf(aClass, \"STUDENTS\");<br />        System.out.println(\"audience = \" + audience);<br /></book.target_audience></pre>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/49719887257650693/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/enums-did-you-know.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/49719887257650693"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/49719887257650693"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/enums-did-you-know.html",
                        "_title": "Enums - Did You Know ?"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/S3sODtSleCI/AAAAAAAAAJg/Zo2EDnH961k/s72-c/free-counting-numbers.jpg.jpeg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8601824644815302947",
                "published": "2010-02-16T10:56:00.000-08:00",
                "updated": "2010-02-16T10:56:38.541-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My First API"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S3GDl3zQCXI/AAAAAAAAAIE/pjojAeCWzZQ/s1600-h/rich_text_img.png\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5436270911870208370\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S3GDl3zQCXI/AAAAAAAAAIE/pjojAeCWzZQ/s320/rich_text_img.png\" style=\"display: block; height: 64px; margin-bottom: 10px; margin-left: auto; margin-right: auto; margin-top: 0px; text-align: center; width: 320px;\" /></a><br /><br /><br />As I promised, I wrote a small API that can be shared with other sites. <br /><br />In a <a href=\"http://mograblog.blogspot.com/2010/01/understanding-javascript-api-with.html\"> previous blog</a> I explored a Javascript API with tweeter. After that I decided to write an API of my own. My API is a <a href=\"http://en.wikipedia.org/wiki/WYSIWYG\">WYSIWYG</a> text editor.<br /><br /><a name='more'></a><br /><br />The reason I chose a text editor is because it is an interesting challenge, and since I couldn't find one I really liked. You can see my text editor at  <a href=\"http://www.mograbi.co.il/guy_mograbi/jsps/examples/textEditor.jsp\">my site</a>. <br /><br />Currently (16-FEB-2009) it doesn't include all the features I would like it to have. <br />For example <br /><ul><li>It does not have a file upload (Especially useful with image insertions)</li><li>It does not have a table insert (Although it is very easy)</li><li>It does not automatically detect URLs. </li><li>It does not support mathematical symbols</li><li>It does not have drawing capabilities</li><li>Auto save which is automatically scheduled by editor and fired as event to listeners</li></ul><br />There are probably more features, however the above are the ones I am going to implement soon. <br />Except for the drawing capabilities, I already know how to implement them. <br /><br /><h1>My API</h1><br />As we've seen in my prior blog, the goal is to have a pure Javascript implementation, which is configurable enough (especially CSS-wise). <br />In order to check that my API is good, and configurable, I am already using it at <a href=\"http://www.mograbi.co.il:80/1al1/jsps/admin/general_messages.jsp?username=admin&password=admin&context=demo&language_key=en\">another site I wrote</a> linked here to a demo version. <br /><br />The code needed to use in another site looks something like this : <br /><pre><script type=\"text/javascript\" src=\"http://mograbi.co.il/guy_mograbi/js/guy_mograbi_all.js\"></script><br /><link type=\"text/css\"  rel=\"stylesheet\" href=\"http://mograbi.co.il/guy_mograbi/css/guy_mograbi/textEditor.css\"><br /><br /><script><br /> var textEditor = new Guy.TextEditor({<br />                           parentNode : $('msg_body_div'), <br />                           buttonsConf : { <br />                                        imagesHomeDir : 'http://www.mograbi.co.il/guy_mograbi/css/guy_mograbi/images/text-editor/normal' ,                    <br />                              useInnerHTMLImages : true}} );<br />   <br /></script><br /></pre><br />And that's it! <br />Actually, the example above has some configuration code included. You can remove it.. <br /><br />So lets see what I did. <br /><br /><ul><li>First of all, note that it is pure Javascript. There are no specific HTML elements needed. The \"parentNode\" shown in the example is an optional configuration</li><li>The styles are separated to a CSS file linked above. At my site, you can select a different skin I wrote and see the editor with a different skin</li><li>The Javascript itself is modular, and available in a single file (no multiple inclusion required). You can read the specific text editor code <a href=\"http://www.mograbi.co.il/guy_mograbi/js/widgets/textEditor/textEditor.js\">here</a> and see the entire file available <a href=\"http://www.mograbi.co.il/guy_mograbi/js/guy_mograbi_all.js\">here</a></li><li>buttonsConf - is a configuration for the buttons. By default I decided to have nothing in the buttons. The CSS defines background images for it. However - some of you might want to insert the images as inner HTML for some reason so I enabled it. The names of the images is predefined so all you need to do is point the editor to the base folder of the images and it will append the image name.</li></ul><br />Tweeter also had a special page with a form that constructs the code for you. It will probably be nice to have it included somewhere - and I am planning on having such a thing in the future. However I assume you know how to write it so I won't waste a blog post for this issue. <br /><br />Another thing Tweeter has but this example does not is Ajax usage - which is needed in order to fetch data from Tweeter (the account's tweets) but not required for every Javascript API."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8601824644815302947/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/textrange-selection-wysiwyg.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8601824644815302947"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8601824644815302947"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/textrange-selection-wysiwyg.html",
                        "_title": "My First API"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S3GDl3zQCXI/AAAAAAAAAIE/pjojAeCWzZQ/s72-c/rich_text_img.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1609655125156731298",
                "published": "2010-02-02T08:18:00.000-08:00",
                "updated": "2010-02-09T10:21:32.641-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Solving the Javascript - Resources Bridge Problem"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S2hYwMymUvI/AAAAAAAAAH8/hSAGPdrkMgs/s1600-h/resource_js_bridge.png\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 117px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S2hYwMymUvI/AAAAAAAAAH8/hSAGPdrkMgs/s320/resource_js_bridge.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5433690535512920818\" /></a><br /><h1>The Problem</h1>When you use Javascript in a site that supports internalization (I18N), you will come across problems combining the two.<br /><br />Ajax makes this problem even more real.<br />However, while writing my site, I came across a cool solution I thought I should share.<br /><br />Most people I know find themselves duplicating massive code lines just to pass the information along the way. They create the Javascript while using undeclared variables, and then declare them in JSPs.<br /><br /><h2>My Final Solution</h2><br /><br />After trying several methods, I decided to use the following.<br />I wrote a servlet that reads the resources.properties bundle according to locale set in session.<br /><br /><a name='more'></a><br />Then it reads the resource file, and translates it to Javascript.<br />The request to this servlet is declared as Javascript.<br />For example - it might look like this :<br /><pre><br /><script src=\"/1al1/resources/?baseName=i18n/resources/resources\" type=\"text/javascript\"></script><br /></pre><br /><br />The servlet must do several things in order for this to work.<br /><ol><li>It must set encoding to UTF-8</li><li>It must make sure it writes a valid Javascript content. - this means we must escape characters which are invalid.<br /></li></ol><br />My current result is shown below. It contains some code related to my framework, but I believe it is still readable so I did not edit it for this blog.<br /><pre><br />public class ResourcesServlet extends HttpServlet{<br />public static IMogiLogger logger = MogiLogUtils.getLogger(ResourcesServlet.class);<br /><br />@Override<br />protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {<br />   String baseName = req.getParameter(\"baseName\");<br />   String locale = Resources.getLocale();<br />   logger.debug(\"returning : \" + baseName + \" for locale : \" + locale);<br />   try{<br />       ResourceBundle resourceBundle;<br />       resp.setCharacterEncoding(\"UTF-8\");<br />       resp.setContentType(\"text/javascript;charset=UTF-8\");<br />       Writer writer = resp.getWriter();<br />       ResourceBundleIdentifier bundleIdentifier = new ResourceBundleIdentifier(baseName, locale);<br />       if (Resources.bundleMap.containsKey(bundleIdentifier)){<br />           resourceBundle = Resources.bundleMap.get(bundleIdentifier);<br />       }else{<br />           resourceBundle = ResourceBundle.getBundle(baseName,new Locale(Resources.getLocale()));<br />       }<br />       for (String s : resourceBundle.keySet()) {<br />           // need to modify it to Javascript<br />           String jsKey = s.replaceAll(\"\\\\-\",\"_\").replaceAll(\"\\\\.\",\"_\");<br /><br />           writer.append(\"var \").append(jsKey).append(\"=\\\"\").append(resourceBundle.getString(s).replaceAll(\"\\\"\",\"\\\\\\\\\\\"\")).append(\"\\\";\\n\");<br />       }<br />   }catch(Exception e){<br />       StringWriter s = new StringWriter();<br />       e.printStackTrace(new PrintWriter(s));<br />       resp.sendError(404,s.toString());<br />   }<br />}<br />}<br /><br /></pre><br />As you can see there are 2 places where I make adjustments.<br />I escape the keys and replace character '.' and '-' to '_'.<br />I escape the values' quotation marks.<br /><br />This way I don't need to worry. I update my resource file once, and I can use it anywhere.<br /><br /><h2> Other Solutions I Tried Along the Way </h2><br /><br />Until I reached the solution above, I tried other methods.<br />Since I am an Ajax junkie I thought to make an Ajax call from my script.<br /><br />However this is very limiting when you want to expose your Javascript as API.<br />It also requires a lot of code, and IDEs won't support refactoring.<br />So I didn't like this method.<br /><br /><h2> .jsp.js Files </h2><br /><br />Another method I tried still required a lot of code, however it turned out to be useful for other things.<br /><br />I set a filter in tomcat like this :<br /><pre><br /><br />    <jsp-config><br />        <br />        <jsp-property-group><br />            <url-pattern>/jsps/js/*</url-pattern><br />            <url-pattern>*.jsp</url-pattern><br />        </jsp-property-group><br />    </jsp-config><br /></pre><br /><br /><br />So now all my .js fukes will be treated as .jsps so I can inject java code directly to them. <br /><br />It proved helpful when I needed string to be resolved like paths. <br />For example - when you write a login with Ajax, you will probably want to use <br /><pre> document.location = some_path </pre><br />in order to move from that page after validation. <br />So this solution is good for resolving the \"some_path\" value (since it is context dependent).<br /><br /><h1>References</h1> <br /><br />The code for the ResourceServlet is available in <a href=\"http://mograbi.co.il/nexus\">my repository</a>."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1609655125156731298/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/solving-javascript-resources-bridge.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1609655125156731298"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1609655125156731298"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/02/solving-javascript-resources-bridge.html",
                        "_title": "Solving the Javascript - Resources Bridge Problem"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S2hYwMymUvI/AAAAAAAAAH8/hSAGPdrkMgs/s72-c/resource_js_bridge.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6183080004941163716",
                "published": "2010-01-16T01:44:00.000-08:00",
                "updated": "2010-01-16T04:28:02.711-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Understanding Javascript API with Embedding Twitter"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S1GMbFCZQTI/AAAAAAAAAHU/AEtqdT7DAIc/s1600-h/twitter.png\"><img style=\"float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 80px; height: 55px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S1GMbFCZQTI/AAAAAAAAAHU/AEtqdT7DAIc/s320/twitter.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5427273422794735922\" /></a><br /><br />The web is bombarded with APIs, web-services, gadgets, widgets, robots... <br /><br />You can add to your site snippets from : twitter, blogger, google (maps/docs/reader/and what not..), flickr, facebook, and the list goes on and on. Moreover, you should add these to your site. <br /><br /><blockquote>If you're squared, you're there. </blockquote><br /><br />The question I want to answer is - how do you do it? <br />Today, I will show you a little embedding example from twitter, and in the near future I will add more entries dealing with implementations, documentations and so on. <br /><br /><a name='more'></a><br /><h1> Embedding Twitter </h1> <br /><br />Twitter is becoming more important by the second. It's called the fastest growing  social network. They also have a <a href=\"http://blog.twitter.com/\">blog in blogger</a>. So I created an account under guymograbi, followed some people, and twitted a bit, and then got down to business. <br /><br />You can use my username - so you don't have to create a twitter account in order to follow this blog. All the links are available to non-twitter-users. Just type \"guymograbi\" whenever you need a username. <br /><br /><h2> Where to start </h2> <br /><br />If a site is written well, you will probably find a link to \"share\",\"embed me\", \"widgets\",\"api\" and so on close by. You can use ctrl+f to simply search the page. <br /><br />Twitter decided to call this \"goodies\" - just scroll down. <br />Note that this link is also available in the homepage - so you don't need to be logged in. It might seem strange to you now, but actually this is the way to go. <br />It's exactly these type of things that shows how well your code is. <br /><br /><br />Other than the goodies link, there's an API link, which is relevant to us, but not to this article. Maybe the next one.<br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GRaeVFwEI/AAAAAAAAAHc/jIPO_gorExM/s1600-h/twitter-toolbar.jpg\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 83px;\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GRaeVFwEI/AAAAAAAAAHc/jIPO_gorExM/s320/twitter-toolbar.jpg\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5427278909962305602\" /></a><br /><br />Once you click the goodies reach this page <br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GRzisESKI/AAAAAAAAAHk/IiaHPgUiSsU/s1600-h/twitter-goodies.jpg\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 157px;\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GRzisESKI/AAAAAAAAAHk/IiaHPgUiSsU/s320/twitter-goodies.jpg\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5427279340629149858\" /></a><br /><br />You can find 2 useful links there - Buttons and Widgets. The buttons are a quick way to enable people to follow you - which is what most people will probably use. So this is probably the first thing we can learn about APIs. Publish some cool buttons that will activate some small but important feature in your web. <br /><br />The \"follow me\" feature is activated by a link either way.. so giving people a button requires no real effort from twitter, and makes the site much more user friendly to developers - the most important social community :) <br /><br />I would love it if you will comment about the feature you might expose with a button in your site. <br /><br />Once we are done with buttons, lets move to widgets. <br /><br />If a site is written well - a widget will be as effortless as a button. Since twitter seems to be written very well (so far. The real test will be when we examine their APIs). So you should take this into consideration when you implement your site - we will talk about implementations in the next article. <br /><br />So I click widgets. I see \"widgets for my website\" - which is what I want. I click it. If I click \"myspace\" or \"facebook\" I get a boring wizard. <br /><br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GUjs5AY0I/AAAAAAAAAHs/9tGVpRE4o6c/s1600-h/twitter-widgets.jpg\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 317px; height: 320px;\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GUjs5AY0I/AAAAAAAAAHs/9tGVpRE4o6c/s320/twitter-widgets.jpg\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5427282367024751426\" /></a><br /><br />I choose the Profile Widget link, change the username if you want to - you can try \"guymograbi\" if you don't want to create your own account - and click \"finish & grab code\" below. <br /><br />Important to note here that if you're logged in, twitter will automatically fill in your username in the username field. If you're not logged in, it will populate that field with \"twitter\". There is a \"twitter\" user, so you can simply use it. This is yet another example that proves you know how to write excellent code. Make note to yourself that demo parameters are important to the experience, great for developing and even support. <br /><br />A window opens with code snippet to copy, some links, and result section for a preview. <br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GVx6U_JEI/AAAAAAAAAH0/jTAYFxFiYuw/s1600-h/twitter-widget-customize.jpg\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 214px;\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S1GVx6U_JEI/AAAAAAAAAH0/jTAYFxFiYuw/s320/twitter-widget-customize.jpg\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5427283710661567554\" /></a><br /><br />We won't go over the whole page - since its not that interesting. <br />What <b>is</b> interesting is the fact that any other widget other than \"Profile Widget\" would result with a similar outcome, differentiating only by parameters. While the Profile widget requires username, other widgets require other input. <br /><br /><h2> Disecting the code</h2> <br /><br />Ok - so the content of the snippet is what we really want to dig into. <br /><br /><pre><br /><script src=\"http://widgets.twimg.com/j/2/widget.js\"></script><br /><script><br />new TWTR.Widget({<br />  version: 2,<br />  type: 'profile',<br />  rpp: 4,<br />  interval: 6000,<br />  width: 250,<br />  height: 300,<br />  theme: {<br />    shell: {<br />      background: '#333333',<br />      color: '#ffffff'<br />    },<br />    tweets: {<br />      background: '#000000',<br />      color: '#ffffff',<br />      links: '#4aed05'<br />    }<br />  },<br />  features: {<br />    scrollbar: false,<br />    loop: false,<br />    live: false,<br />    hashtags: true,<br />    timestamp: true,<br />    avatars: false,<br />    behavior: 'all'<br />  }<br />}).render().setUser('guymograbi').start();<br /></script><br /></pre><br /><br />I think the most amazing thing is that it is all written in JavaScript. <br /><br />The snippet includes an import to the JavaScript directly from twitter. So if their site is down, the widget won't work. <br /><br />Afterward, we see a new object named TWTR.Widget. They use a namespace here which is good. <br /><br />This object is given 8 variables. Each of which can tell us something important. <br /><ul><br /><li> version - this is probably the most important variable. Versioning is important for backward compatibility. Once you expose an API, you should always consider people who use it when you upgrade. Looking back, we can see this number also appearing in the javascript include statement. Just look at the src path.   </li><br /><li>type - This is the second most important parameter. This parameter differentiates the type of the widget. Changing it will require modifying some other parameters - as we remember the different input parameters used for other widgets. We know that for the profile widget we will need the username.</li><br /><li> rpp,interval,width,height,theme - All of these decide the look and feel of the widget. Personally I would wrap them together, but it doesn't really matter. From this we learn it is important to not leave the style control to the user. This kind of menu might just be useful to any kind of widget. Color selections, Font selections and so on. This might require some serious work before you expose your interface. So make sure to allocate enough time.</li><br /><li> features - uh! We always assume people will want features. However, flagging features on/off is very useful to everyone. Its part of the agile development which is so popular these days. This tells us that twitter is quite stable and modular.</li><br /></ul> <br /><br />It's amazing how much you can learn from usage without actually seeing the underlying implementation. <br />From this alone you can see that twitter is using agile development methods, with clear separation of functionality and appearance. It has backward compatibility, so we can rest assure this widget will continue to function even after they upgrade.<br /><br />GOOD! Way to go twitter!<br /><br /><h2> Underlying Implementation </h2> <br /><br />You might be tempted to go to <a href=\"http://widgets.twimg.com/j/2/widget.js\">http://widgets.twimg.com/j/2/widget.js</a> and start reading. However, what you will find there is a loooooot of unreadable JavaScript. It is unreadable because twitter are doing a great job. (not kidding). <br /><br />You see, JavaScript should be written in components just like packages in Java. Then you get a really complicated hierarchy of components divided to a lot of files. To make life easier on the browser, the best thing you can do is \"compile\" JavaScript to result a smaller file. That file in not readable and contains a lot of infrastructure code you should not care about. <br /><br />However, to save you the trouble, I will write some guesses I have of how they implemented it. In the following article I will try to find out which they actually use. <br /><br /><h3> Easiest </h3> <br /><br />The easiest way I can think of is to send a request to the server with all the parameters given in the function. The result should be an HTML text. Javascript should add this HTML to your page and that's it! <br /><br />Its easy because it requires a small amount of HTML that is used to send a request and add HTML to your page. Both tasks are basically easy and I will show how to do this when the time comes. <br /><br />Moreover, this method is applicable to sites you didn't even write! This is in fact considered to be a security problem with JavaScript but I will talk about it in a special JavaScript article. <br /><br />This method is also good for caching which you probably want.<br /><br /><h3> Pure Javascript </h3> <br /><br />JavaScript can do just about everything you need it. It can construct an entire page. So the JavaScript can basically construct the entire HTML. Sometimes, even I prefer this option - for example populating an entire table will require much less code in JavaScript than any other.<br /><br />However, most of the time, you're better of writing HTML in HTML and leaving JavaScript to do other stuff since the HTML might get complicated. Nonetheless, there are great JavaScript libraries out there that simplify it for you. <a href=\"http://developer.yahoo.com/yui/\">YUI (Yahoo! UI)</a> is a popular example, and <a href=\"http://test.thecodecentral.com/demos/lightboxrev/lightbox.html\">here</a> is a demo for it showing a draggable popup, darkening effect and more. <br /><br /><h2> Next Articles </h2> <br /><br />That's it for today. I know this article is pretty basic stuff but you have to start somewhere. The next article on the topic will be after I wrote some API myself with examples on my site. <br /><br /><h2> A tribute to JavaScript </h2> <br /><br />JavaScript is the most widely used client-side scripting language and by far the most important thing you will learn while writing web applications. It doesn't even matter which language you use to write your site, you will want to know JavaScript.  There are alternatives like <a href=\"http://en.wikipedia.org/wiki/VBScript\">VBScript</a> and <a href=\"http://en.wikipedia.org/wiki/JScript\">JScript</a>, but none of them compare to JavaScript. <br /><br />It is unlikely to find a web-app related article without JavaScript. I will most definitely dedicate entire pages to it. There are some environments that don't support it, but there's a continuing effort to minimize the gap. <br /><br />Examples for environments that don't support it are : <br /><ul><br /><li> Mobile Phone browsers  </li><br /><li> Sometimes people disable it due to some <a href=\"http://en.wikipedia.org/wiki/JavaScript#Security\">security problems</a></li>. These security issues are mostly irrelevant if you don't exaggerate your JavaScript usage.  <br /></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/6183080004941163716/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/understanding-javascript-api-with.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6183080004941163716"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6183080004941163716"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/understanding-javascript-api-with.html",
                        "_title": "Understanding Javascript API with Embedding Twitter"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S1GMbFCZQTI/AAAAAAAAAHU/AEtqdT7DAIc/s72-c/twitter.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7854569072457880308",
                "published": "2010-01-13T06:58:00.006-08:00",
                "updated": "2010-08-18T06:55:42.771-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "webapp"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "maven"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "tomcat"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Setting up an environment for a Webapp"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S1AAfZlwtHI/AAAAAAAAAG0/vOnQsayEyiQ/s1600-h/tomcat_maven_project_logo.png\" onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5426838090426659954\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S1AAfZlwtHI/AAAAAAAAAG0/vOnQsayEyiQ/s320/tomcat_maven_project_logo.png\" style=\"cursor: hand; cursor: pointer; float: left; height: 134px; margin: 0 10px 10px 0; width: 275px;\" /></a><br />It's sometimes easier to dive into an existing project since everything is set up for you and all that is left is the fun part - coding. <br />A lot of developers don't even care about the basics and the infrastructure. <br /><br />In this blog I summarize a few good things you will want to do with a webapp project in Maven, that is running under Tomcat.<br />This article assumes you already downloaded Tomcat, and generate a webapp project with maven. <br /><br /><a name='more'></a><br /><h2>SAX Parser exception </h2><br />When I started my Tomcat, I got an exception (without doing anything). <br />The exception wrote : <br /><pre>Jan 13, 2010 5:03:11 PM org.apache.tomcat.util.digester.Digester fatalError<br />SEVERE: Parse Fatal Error at line 1 column 2: Content is not allowed in prolog.<br />org.xml.sax.SAXParseException: Content is not allowed in prolog.<br />at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)<br /></pre><br /><br />and somewhere below I saw a reference to host-manager.xml. <br />When I opened this file there was no xml inside, but Java code. <br />I couldn't really find solutions online, and decided to simply rename the file to something else than XML suffix. It made the problem go away.<br /><br /><h2>Changing the default welcome page  </h2><br />When you go to http://localhost:8080 you reach a Tomcat homepage. That's not really nice. What you want to do is go to webapps/ROOT and change the index.jsp. <br /><br />I prefer to go into WEB-INF and modify the web.xml, adding to it : <br /><pre><welcome-file-list><br />    <welcome-file><br />        my_homepage.jsp<br />    </welcome-file><br /></welcome-file-list><br /></pre><br /><br />And then I simply write my_hompage. which is always the same for me : <br /><pre>Available locations here are :<br /><br /><div><div><div><%!</div><div></div><div>public String show(String webapp, HttpServletRequest request) {</div><div>String location = request.getRequestURL().toString() + webapp;</div><div>return \"<a href=\\\"\"+ location +\"\\\"/>\"+webapp+\"</a>\";</div><div>}</div><div>%></div><div>Available locations here are :<br></div><div><br></div><div><%=show(\"app1\", request)%><br></div><div><%=show(\"app2\", request)%><br></div><div><%=show(\"app3\", request)%><br></div></div></div></pre><br /><br />All you need to do is change app1,app2,app3 to some real context paths you have in your Tomcat and spice this page with some CSS. <br /><br />If you have only one webapp, you can simply redirect.<br /><br /><br /><h2>Deploying the application </h2><br />When I click install, I want my WAR to reach the local Tomcat. <br />It seems that Tomcat wrote a nice HTTP API for such things.<br />But before you can use it, go to conf/tomcat-users.xml.<br /><br />If there's no user with manager role, add something like the following<br /><pre><user username=\"admin\" password=\"admin\" roles=\"manager\"/><br /></pre><br /><br />And now try the following address : <br /><pre>http://localhost:8080/manager/list<br /></pre><br /><br />When you are prompted for user/pass simply type the <i>admin admin</i>, or whichever name/pass you wrote in tomcat-users.xml file. <br /><br />This will show you a list of all running applications. In my case it showed me the following : <br /><pre>OK - Listed applications for virtual host localhost<br />/:running:0:ROOT<br />/manager:running:0:D:/dev_env/tomcat-5.5/server/webapps/manager<br />/webdav:running:0:webdav<br />/servlets-examples:running:0:servlets-examples<br />/guy_mograbi:running:0:guy_mograbi<br />/tomcat-docs:running:0:tomcat-docs<br />/jsp-examples:running:0:jsp-examples<br />/balancer:running:0:balancer<br /></pre><br /><br />So in just the same way, you can deploy a war. <br /><br />Add the following to your pom.xml <br /><br /><pre><div><div><plugin></div><div>&nbsp;&nbsp; &nbsp;<groupId>org.codehaus.mojo</groupId></div><div>&nbsp;&nbsp; &nbsp;<artifactId>tomcat-maven-plugin</artifactId></div><div>&nbsp;&nbsp; &nbsp;<configuration></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<path>/guy_mograbi<!-- TODO : change this --></path></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<username>admin</username></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<password>admin</password></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<update>true</update></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<charset>UTF-8</charset></div><div>&nbsp;&nbsp; &nbsp;</configuration></div><div>&nbsp;&nbsp; &nbsp;<executions></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<execution></div><div></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<goals></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<goal>deploy-only</goal></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<!--list--></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</goals></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<phase>install</phase></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</execution></div><div>&nbsp;&nbsp; &nbsp;</executions></div><div></plugin></div></div></pre><br /><br /><br />What we see here is : <br /><ul><li>Invocation of maven-tomcat-plugin with goal deploy-only</li><li>path - the context of your application. By default it is the artifactId, in my case I had to override it, however you might want to use the default</li><li> admin/username - like in tomcat-users.xml.  </li><li> charset - just to be on the safe side, I decided to add UTF-8. My site supports many languages. However I did not check if this is really necessary</li><li> execution happens on <i> install </i> phase </li></ul><br /><br />I left the \"list\" goal there for you to try. The output should be the same as when you tried it in the browser. <br /><br /><h2>I18N support  </h2><br />I think it is always wise to have multi-language support, even if you don't use it. <br /><br />I always do the following just to make sure things will go smoothly : <br /><ul><li> In my jsps I make sure the following line is in the header <br /><br /><pre></pre><br /></li><li> In conf/server.xml I make sure that Connector on port 8080 has the attribute <br /><br /><pre>URIEncoding=\"UTF-8\"</pre>. Some of you might prefer <br /><br /><pre>useBodyEncodingURI=\"true\"</pre>although I recommend the first one. </li><li> Put all your resources in property bundles - use the folder src/main/native2ascii. Use the ResourceBundle to read them. - IDEs also have a nice support so it's a good way to go. However, in order to make it work, you will need to use the native2ascii plugin like this : <br /><br /><br /><pre><div><plugin></div><div>&nbsp;&nbsp; &nbsp;<groupId>org.codehaus.mojo</div><div>&nbsp;&nbsp; &nbsp;<artifactId>native2ascii-maven-plugin</div><div>&nbsp;&nbsp; &nbsp;<version>1.0-alpha-1</div><div>&nbsp;&nbsp; &nbsp;<executions></div><div></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<execution></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<goals></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<goal>native2ascii</goal></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</goals></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<!-- specific configurations --></div><div></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<configuration></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<dest>src/main/resources/i18n/Resources</dest></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<!--<includes>*.properties--></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<encoding>UTF8</encoding></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</configuration></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<phase>process-resources</phase></div><div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</execution></div><div>&nbsp;&nbsp; &nbsp;</executions></div><div></div><div></plugin></div></pre><br /></li></ul>The only thing you might want to change is the \"dest\" property.   <br /><h2>That's all </h2><br /><br />Ok, now you're good to go. Have fun coding."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7854569072457880308/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/setting-up-environment-for-webapp.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7854569072457880308"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7854569072457880308"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/setting-up-environment-for-webapp.html",
                        "_title": "Setting up an environment for a Webapp"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://4.bp.blogspot.com/_J3A8WqpdCX0/S1AAfZlwtHI/AAAAAAAAAG0/vOnQsayEyiQ/s72-c/tomcat_maven_project_logo.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1581730602929763453",
                "published": "2010-01-08T14:23:00.000-08:00",
                "updated": "2010-01-14T22:25:08.823-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Setting a classloader in Maven Plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S1AKLo3IXYI/AAAAAAAAAHE/mYyAzR3YObA/s1600-h/class_loader.png\"><img style=\"float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 218px; height: 80px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S1AKLo3IXYI/AAAAAAAAAHE/mYyAzR3YObA/s320/class_loader.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5426848746044939650\" /></a><br />I often find myself in need to load classes that I just compiled when I write a Maven plug-in. Take for example the surefire plug-in - the one that runs your tests - they need all the compiled code accessible in run-time. I find it most useful to discover bugs that otherwise would be discovered at run-time. <br /><br />For example - We have an XML that points to a method in a class. It would be good to load the class and check if the method exists. Maybe that class should implement an interface - we can check that as well. All these plug-ins have one thing in common. They all require manipulations on the class-loader. In this article I will show you my generic ClassLoader suitable for all plug-ins and available at my nexus repository (<a href=\"http://www.mograbi.co.il/nexus\">http://www.mograbi.co.il/nexus</a> at mogi.code.maven:maven-plugins-utils artifact) . <br /><br /><a name='more'></a><br /><br />The interface I provide contains the following methods : <br /><code><br /><br />  /**<br />     * <br />     * @param project - we need the project in order to discover <br />     * all dependencies and build output directory<br />     */<br />    public MavenPluginClassLoaderHandler(MavenProject project);<br /><br />  /**<br />     * Will change {@link Thread#getContextClassLoader()} with a new {@link ClassLoader}<br />     * that contains all dependencies and classes directory<br />     */<br />    public void addAllArtifactsToClassLoader();<br /><br /> /**<br />     * Should return the original classloader before the change<br />     */<br />    public void restoreClassLoader();<br /><br /></code><br /><br />The Idea for the flow is the expressed in the following pseudo-code<br /><br /><code><br /><br />// Maven Plugin execute implementation <br /><br />execute{<br /><br />MavenPluginClassLoaderHandler clHandler = new(); <br />clHandler.addAllArtifactsToClassLoader(); <br /><br />//do what you need to do here. Use Thread.currentThread().getContextClassLoader() <br />// wherever a class loader is needed<br /><br />// when done, need to restore the previous class loader just to be safe<br />clHandler.restoreClassLoader();<br />}<br /><br /></code><br /><br /><h2> Implementation </h2> <br /><br />It's a tricky business handling ClassLoader but since this is a MavenPlugin we will keep it as simple as possible. We will use URLClassLoader for our needs. <br /><br />The implementation will look something like this <br /><br /><b><u> Implementation for addAllArtifactsToClassPath </b></u><br /><code><br /><br /> logger.debug(\"adding all artifacts to classLoader\");<br />        Collection<URL> urls = new ArrayList<URL>();<br /><br />        //noinspection unchecked<br />        for (Artifact artifact  : (Collection<Artifact>) project.getArtifacts()) {<br />            try {<br />                urls.add(artifact.getFile().toURI().toURL());<br />            } catch (MalformedURLException e) {<br />//                logger.error(e);<br />            }<br />        }<br /><br />        try {<br />            urls.add(new File(project.getBuild().getOutputDirectory()).toURI().toURL());<br />        } catch (MalformedURLException e) {<br />            logger.error(e);<br />        }<br /><br />        logger.debug(\"urls = \\n\" + urls.toString().replace(\",\",\"\\n\")) ;<br /><br />        Thread.currentThread().setContextClassLoader(new URLClassLoader(urls.toArray(new URL[urls.size()]),original));<br /><br /></code><br /><br />As you can see we first take all dependencies from project using project.getArtifacts(). This might seem a bit weird at first, because there's also getDependencies() but the difference is Dependencies are XML Entities, while Artifacts are the file representation behind the dependencies. It took me a while to accept that concept. <br /><br />Afterward, I also add the location of the compile output directory \"classes\" by invoking project.getBuild().getOutputDirectory(). Again, might seem a bit odd at first. <br /><br />At the end I create a new ClassLoader containing all the locations I found. <br /><br />The restore implementation is even easier<br /><br /><code><br /><br />ClassLoader cl = Thread.currentThread().getContextClassLoader(); <br /><br /><br /><br />public void restoreClassLoader(){<br />       Thread.currentThread().setContextClassLoader(cl);<br />}<br /><br /></code><br /><br /><br /><br /><br /><h2>References</h2><br /><ul><br /><li><a href=\"http://www.javaworld.com/javaworld/jw-10-1996/jw-10-indepth.html\">About ClassLoader from JavaWorld</a></li><br /><li><a href=\"http://blogs.sun.com/CoreJavaTechTips/entry/closing_a_urlclassloader\"> About URLClassLoader from Core Java Technologies Tech Tip </a><br /><li><a href=\"http://www.mograbi.co.il/nexus\">My nexus repository where you can find the JAR and Sources. </a></li><br /></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1581730602929763453/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/setting-classloader-in-maven-plugin.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1581730602929763453"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1581730602929763453"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/setting-classloader-in-maven-plugin.html",
                        "_title": "Setting a classloader in Maven Plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S1AKLo3IXYI/AAAAAAAAAHE/mYyAzR3YObA/s72-c/class_loader.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5795848826529037137",
                "published": "2010-01-07T13:50:00.001-08:00",
                "updated": "2010-01-08T14:21:51.082-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Intellij - Useful Dynamic Template"
                },
                "content": {
                    "_type": "html",
                    "__text": "The ctrl+j shortcut in <a href=\"http://www.jetbrains.com/idea/\">Intellij IDEA</a> is my best friend.<br /><br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S0ZXugJbiMI/AAAAAAAAAFo/eBE6eSGCgTk/s1600-h/ctrl-j.jpg\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 162px;\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S0ZXugJbiMI/AAAAAAAAAFo/eBE6eSGCgTk/s320/ctrl-j.jpg\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5424119257629427906\" /></a><br /><br /><br />It saves a lot of time and bugs to create one of you own. <br />Since I maintain my own implementation to a logger (see <a href=\"http://www.mograbi.co.il/nexus\">My Nexus Repository</a> under groupId mogi.code.logger) - and all my loggers are generated in the same way - I find it most useful to write a live template for creating new loggers. <br /><br />Let me show you how I do it. <br /><br /><a name='more'></a><br /><br />This blog is targeted on Intellij 9.0 Community Version. <br />First of all go to settings ctrl+alt+s. Write template in the search, and choose \"live templates\" when it is available. Click add. <br /><br />I fill in the details like this :<br /><br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S0cTJ05AE2I/AAAAAAAAAFw/EuCV-K0LHPE/s1600-h/intellij_live_template.png\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 181px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S0cTJ05AE2I/AAAAAAAAAFw/EuCV-K0LHPE/s320/intellij_live_template.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5424325335728526178\" /></a><br /><br />Then I click \"Edit Variable\" and fill it in like this : <br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S0cTT_LdQ8I/AAAAAAAAAF4/LM7dpbtccRM/s1600-h/edit_vairable_live_template.png\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 244px;\" src=\"http://2.bp.blogspot.com/_J3A8WqpdCX0/S0cTT_LdQ8I/AAAAAAAAAF4/LM7dpbtccRM/s320/edit_vairable_live_template.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5424325510288982978\" /></a><br /><br />As you can see the notation $VAR$ defines a variable named VAR. <br /><br />Now I can click \"ok\" on everything and pressing ctrl+j plus typing logger will cause the following behavior<br /><br /><a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S0cUzgL4tXI/AAAAAAAAAGA/9We5Y20XjAc/s1600-h/live_template_usage.png\"><img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 178px;\" src=\"http://4.bp.blogspot.com/_J3A8WqpdCX0/S0cUzgL4tXI/AAAAAAAAAGA/9We5Y20XjAc/s320/live_template_usage.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5424327151236724082\" /></a><br /><br />This was a basic usage of live-templates. I usually don't tend to dwell in them too much because then I feel I miss their purpose. However, I will create a blog for \"advanced live templates\" one day.<br /><br /><h2> My Related YouTubes</h2><br /><br /><object width=\"480\" height=\"295\"><param name=\"movie\" value=\"http://www.youtube.com/v/9onfRSC33Zk&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f&hd=1\"></param><param name=\"allowFullScreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\"http://www.youtube.com/v/9onfRSC33Zk&hl=en_US&fs=1&color1=0xcc2550&color2=0xe87a9f&hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"295\"></embed></object>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5795848826529037137/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/intellij-useful-dynamic-template.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5795848826529037137"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5795848826529037137"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/01/intellij-useful-dynamic-template.html",
                        "_title": "Intellij - Useful Dynamic Template"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://2.bp.blogspot.com/_J3A8WqpdCX0/S0ZXugJbiMI/AAAAAAAAAFo/eBE6eSGCgTk/s72-c/ctrl-j.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1864555643617429394",
                "published": "2009-11-16T03:36:00.000-08:00",
                "updated": "2009-11-16T03:37:08.729-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "VNC Installation and Access"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1864555643617429394"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1864555643617429394"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3468256079564978058",
                "published": "2009-11-15T23:03:00.001-08:00",
                "updated": "2009-11-15T23:03:54.128-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My First ANTLR Experience"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3468256079564978058"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3468256079564978058"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5193713282774217381",
                "published": "2009-11-15T23:02:00.003-08:00",
                "updated": "2009-11-15T23:03:38.322-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Intellij - Did You Know ?"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5193713282774217381"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5193713282774217381"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2876456408406447155",
                "published": "2009-11-15T23:02:00.001-08:00",
                "updated": "2009-11-15T23:02:25.471-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Intellij - Working Backwards Is Faster"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2876456408406447155"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2876456408406447155"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6996471131519865798",
                "published": "2009-11-15T23:00:00.002-08:00",
                "updated": "2009-11-15T23:01:09.934-08:00",
                "control": {
                    "draft": {
                        "__prefix": "app",
                        "__text": "yes"
                    },
                    "_xmlns:app": "http://purl.org/atom/app#",
                    "__prefix": "app"
                },
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "A JAXB Challange"
                },
                "content": {
                    "_type": "html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6996471131519865798"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/6996471131519865798"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8971179011250977266",
                "published": "2009-11-15T23:00:00.001-08:00",
                "updated": "2009-11-25T03:20:42.168-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My First Intellij Plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "During my work at <a href=\"http://www.quest.com/\">Quest Software</a> I worked on a project that required all logging messages in a properties file <b> PER PACKAGE</b>!!!<br /><br />I know it is perfectly reasonable to replace hard-coded strings with properties files, but I always had a single properties file per project, and here, each package had a different file. <br /><br />Our projects were built with Maven, so our folder structure there was well defined. <br />I took advantage of this to write a small Intellij plugin that opens the correct properties file. <br /><br />The use-case is : I am writing some code in a class, and I want to log something, I have a menu with \"Open LogResources.properties\"<br /><br /><a name='more'></a> <br /><br /><br />First I did the tutorial, where you write a hello world plugin and search google. <br /><br />Then I started working on the plugin, starting with the tutorial output, and modified it. <br /><br />The result was the following. <br />The code basically find the \"src/main/java\" combination of folders and opens the appropriate folder in \"src/main/resources\". <br /><h2> The source </h2><br /><pre><br />public class SayHelloAction extends AnAction {<br />    //    Logger logger = Logger.getInstance(SayHelloAction.class.toString());<br />    @NonNls<br />    private static final String SRC = \"src/\";<br /><br /><br />    public void actionPerformed(AnActionEvent e) {<br />        DataContext dataContext = e.getDataContext();<br />        Module data = DataKeys.MODULE.getData(dataContext);<br /><br />        VirtualFile vFile = DataKeys.VIRTUAL_FILE.getData(dataContext);<br />        Project project = DataKeys.PROJECT.getData(dataContext);<br />        FileEditorManager fileEditorManager = FileEditorManager.getInstance(project);<br /><br />        String fileName = vFile.getPath();<br /><br /><br />        Application application = ApplicationManager.getApplication();<br />        HelloWorldApplicationComponent helloWorldComponent =<br />                application.getComponent(HelloWorldApplicationComponent.class);<br /><br /><br />        PsiFile logResourcesFile;<br />        if (fileName.indexOf(\"src/main/\") > 0) {<br />//            logger.info(\"assuming maven project\");<br />            // go to the resource folder .. remember the path<br />            Stack<String> stack = new Stack<String>();<br />            int i = 100;<br /><br />            VirtualFile parent = vFile.getParent();<br />            while (i > 0 && parent != null && (!parent.getName().equals(\"main\") || parent.findChild(\"java\") == null)) {<br />                // I assume this is a good enough condition to determine we reached the turning point<br />                stack.push(parent.getName());<br />                parent = parent.getParent();<br />                i--; // some limit to avoid infinite loop<br />            }<br /><br />            stack.pop(); // removing the \"java\" folder name<br />            // if we are here it means we are in main. we need to create resources<br />            PsiDirectory file = PsiManager.getInstance(project).findDirectory(parent);<br /><br />            PsiDirectory resources = findOrCreateDirectory(file, \"resources\");<br />            while (!stack.isEmpty()) {<br />                String folderName = stack.pop();<br />                resources = findOrCreateDirectory(resources, folderName);<br />            }<br /><br />            logResourcesFile = findOrCreateFile(resources, \"LogResources.properties\");<br /><br /><br />        } else {<br />//            logger.info(\"assuming non maven project\");<br />            PsiFile pFile = PsiManager.getInstance(project).findFile(vFile);<br /><br />            PsiDirectory psiDirectory = pFile.getParent();<br />            if ((logResourcesFile = psiDirectory.findFile(\"LogResources.properties\")) == null) {<br />                psiDirectory.createFile(\"LogResources.properties\");<br />                logResourcesFile = psiDirectory.findFile(\"LogResources.properties\");<br />            }<br />            VirtualFileManager.getInstance().refresh(true);<br />            VirtualFileManager.getInstance().fireReadOnlyModificationAttempt(logResourcesFile.getVirtualFile());<br /><br />        }<br />        fileEditorManager.openFile(logResourcesFile.getVirtualFile(), true);<br /><br />        fileEditorManager.getSelectedTextEditor().getDocument().setReadOnly(false);<br /><br /><br />//        helloWorldComponent.sayHello();<br />    }<br /><br />    private PsiDirectory findOrCreateDirectory(PsiDirectory parent, String s) {<br />        PsiDirectory child = parent.findSubdirectory(s);<br />        if (child == null) {<br />            child = parent.createSubdirectory(s);<br />        }<br /><br />        return child;<br />    }<br /><br />    private PsiFile findOrCreateFile(PsiDirectory parent, String s) {<br />        PsiFile child = parent.findFile(s);<br />        if (child == null) {<br />            child = parent.createFile(s);<br />        }<br /><br />        return child;<br />    }<br />}<br /></pre><br /><br />Note that this won't support tests - however I assumed tests don't need to be supported. <br /><br /><h2> plugin.xml</h2><br /><br />Along with the source you have the plugin.xml. here it is : <br /><pre><br /><!DOCTYPE idea-plugin PUBLIC \"Plugin/DTD\"<br />        \"http://plugins.intellij.net/plugin.dtd\"><br /><idea-plugin><br />    <name>FglamLogResources</name><br />    <description>This plugin do nothing</description><br />    <version>1.0</version><br />    <vendor>JetBrains</vendor><br />    <idea-version since-build=\"4121\" /><br />    <application-components><br />        <component><br />            <implementation-class>com.intellij.tutorial.helloWorld.HelloWorldApplicationComponent</implementation-class><br />        </component><br />    </application-components><br />    <actions><br />        <action id=\"SayHello\" class=\"com.intellij.tutorial.helloWorld.SayHelloAction\" text=\"Open Log Resources\"><br />            <add-to-group group-id=\"WindowMenu\" anchor=\"first\"/><br />        </action><br />    </actions><br /></idea-plugin><br /></pre><br /><br /><h2> Conclusion</h2><br /><br />The plugin was a great help for everyone. <br />I had a lot of hard time to write it and I bet I have a zillion mistakes - it was not easy at all since this area lacks of documentation. I had to learn code samples from forums where people post errors they have. <br /><br />But it was worth the while. :) <br /><br /><h1>References</h1><br /><br /><ul><br /><li><a href=\"http://www.jetbrains.com/idea/training/demos.html\">Plugin Tutorial At Intellij</a><br /><li><a href=\"http://www.mograbi.co.il\">Sources at my site</a><br /></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/8971179011250977266/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-first-intellij-plugin_15.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8971179011250977266"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8971179011250977266"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-first-intellij-plugin_15.html",
                        "_title": "My First Intellij Plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4972963423583114241",
                "published": "2009-11-15T22:55:00.000-08:00",
                "updated": "2010-01-14T23:42:46.758-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My XML Checker Maven Plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S1AcaeWlIXI/AAAAAAAAAHM/S1EAgzwz9_A/s1600-h/xml_validator.png\"><img style=\"float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 147px; height: 152px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/S1AcaeWlIXI/AAAAAAAAAHM/S1EAgzwz9_A/s320/xml_validator.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5426868792131395954\" /></a><br />Every application I used or written so far had an XML reading/writing feature. Why not? It's so easy and useful. <a href=\"http://en.wikipedia.org/wiki/RSS\"> RSS </a>feeds are XMLs, <a href=\"http://jetif.sourceforge.net/index.php\">Jetif</a> uses it, <a href=\"http://maven.apache.org/\">Maven</a>, <a href=\"http://ant.apache.org/\">Ant</a>, <a href=\"https://www.hibernate.org/\">Hibernate</a>, <a href=\"http://www.eclipse.org/\">Eclipse</a>, <a href=\"http://www.jetbrains.com/idea/\">Intellij IDEA</a>, <a href=\"http://tomcat.apache.org/\">Tomcat</a> and the list goes on. <br /><br /><br /><center><div style=\"width:350px; font-size: 13px; text-align:left; padding-left:25px;\"><br /><i>Show me an application that doesn't use XMLs<br /><span style=\"padding-right:75px;\">&nbsp;</span> and I will show you missing features.</i></div></center><br /><br />I like to use JAXB for writing and parsing XMLs. I always add auto-generated XSDs. Even though I have XSDs and appropriate editors, I still don't feel very safe because there is a problem with JAXB - some of the errors are discovered only in runtime. Since I like to be safe, and automated, I found it best to write a generic plugin that checks if JAXB is able to process the XMLs. <br /><br /><a name='more'></a> <br /><br /><br />So I have some JAXB sample code that you can find in <a href=\"http://mograbi.co.il/nexus\">my nexus repository</a> at mogi.code:jaxb-code-sample. I always attach the sources so feel free. <br /><br />This code sample is good for those who want to have multiple namespaces, however I won't linger on that here. <br />Lets focus on mogi.code.samples.store.Store class which is a root for an XML. <br /><br /><h1> Running the plugin </h1> <br /><br />Lets assume I already wrote a small XML like this <br /><pre><br /><mogi:store xmlns:mogi=\"http://mograbi.co.il/xsds/mogi-code-samples/jaxb-code-sample/1.0/store\"<br />  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"<br />  xsi:schemaLocation=\"http://mograbi.co.il/xsds/mogi-code-samples/jaxb-code-sample/1.0/store ../xsds/store.xsd\"><br />    <br />    <products><br />        <book><br />            <catalogueNumber>b35fd39f-e790-4635-9478-cb17fbbb51f5</catalogueNumber><br />            <price currency=\"DOLLAR\">65</price><br />            <name>Gone with the Wind</name><br />            <targetAudeience>ADULTS</targetAudeience><br /><br />        </book><br />    </products><br /></mogi:store><br /></pre><br /><br /><br />This XML is valid and should be loaded by JAXB just fine. <br />To use the plugin I add the following : <br /><pre><br /><plugin><br /> <groupId>mogi.code.maven</groupId><br /> <artifactId>maven-jaxb-verifier-plugin</artifactId><br /> <version>1.0</version><br /> <configuration><br />  <printOutput>true</printOutput><br />  <clzzName>mogi.code.samples.store.Store</clzzName><br />  <files><br />   <file>src/main/resources/xmls/store.xml</file><br />  </files><br /> </configuration><br /> <executions><br />  <execution><br />   <goals><goal>verify</goal></goals><br />   <phase>process-classes</phase><br />  </execution><br /> </executions><br /></plugin><br /></pre><br /><br />As you can see, I tell the plugin which class is the root for the XML, and which files to test. If I set the print to true, the plugin will export the object back to an XML, assign it to a string and print it - so it's a good visual way to see the export works as well. <br /><br /><h2> Implementation </h2><br /><br />The implementation to this plugin requires the basic JAXB handling which I am sure you all know by now, however, it also requires some classloader manipulation. <br />At build-time the class Store is not part of the classpath, and the classloader will not load it. So first we must adjust the classpath by defining a new classloader. <br /><br />I have a special blog for this <a href=\"http://mograblog.blogspot.com/2010/01/setting-classloader-in-maven-plugin.html\">here</a><br /><br />The source of implementation can be found in <a href=\"http://www.mograbi.co.il/nexus\">my nexus repository</a> at mogi.code.maven:maven-jaxb-verifier-plugin. <br /><br /><h2> Source highlight </h2> <br /><br />As you will see in the source, the implementation is quite short and straightforward. <br /><br /><pre><br /> if (files.length > 0){<br />            getLog().info(MessageFormat.format(\"Verifying XMLs in project : {0} with classname : {1}\", Arrays.toString(files), clzzName));<br />        }else{<br />            getLog().info(\"No files specified. Skipping...\");<br />            return;<br />        }<br /><br /><br /><br />        getLog().info(\"Setting classpath\");<br />        MavenPluginClassLoaderHandler classpathHandler = new MavenPluginClassLoaderHandler(project);<br />        classpathHandler.addAllArtifactsToClasspath();<br /><br />        getLog().info(\"Loading class : \" + clzzName);<br />        for (File file : files) {<br />            getLog().info(\"Verifying file : \" + file);<br />            try {<br />                Object o = JaxbHandler.load(file, (Class<Object>) Class.forName(clzzName, true, Thread.currentThread().getContextClassLoader()));<br />                if (isPrintOutput()){<br />                    String result = JaxbHandler.export(o);<br />                    System.out.println(\"result = \" + result);<br />                }<br /><br />            } catch (JAXBException e) {<br />                throw new MojoExecutionException(\"File : [\" + file + \"] is invalid\",e);<br />            } catch (ClassNotFoundException e) {<br />                throw new MojoExecutionException(\"Class not found : \" + clzzName ,e);<br />            }<br /><br />        }<br /><br /><br />        classpathHandler.restoreClassLoader();<br /><br />        getLog().info(\"all files were verified successfully\");<br /></pre><br /><br />The implementation of JaxbHandler should be obvious to you by now, but just in case<br /><br /><pre><br />public class JaxbHandler<br />{<br /><br />    private static Map<Class<?>, LoaderContext> contexts = new HashMap<Class<?>, LoaderContext>();<br />    public static IMogiLogger logger = MogiLogUtils.getLogger(JaxbHandler.class);<br /><br />    public static <T> T load(String filename, Class<T> clzz) throws JAXBException {<br />        File file = new File(filename);<br />        InputStream stream;<br />        if (file.exists()){<br />            return load(file, clzz);<br />        }else if ((stream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename) )!=null){<br />            return (T) getContext(clzz).getUnmarshaller().unmarshal(stream);<br />        }<br />        return null;<br />    }<br /><br />    public static <T> T load(File file, Class<T> clzz) throws JAXBException {<br />        return (T) getContext(clzz).getUnmarshaller().unmarshal(file);<br />    }<br /><br />    public static void export(String filename, Object obj) throws JAXBException {<br />        try {<br />            export(new FileWriter(filename),obj);<br />        } catch (IOException e) {<br />            logger.error(e);<br />        }<br />    }<br /><br />    public static void export(Writer writer, Object obj) throws JAXBException {<br />          try {<br />            getContext(obj.getClass()).getMarshaller().marshal(obj,writer);<br />        } catch (NullPointerException e){<br />            throw new JAXBException(\"no such context available. unexpected\");<br />        }<br />    }<br /><br />    public static String export(Object obj) throws JAXBException {<br />        StringWriter writer = new StringWriter();<br />        export(writer,obj);<br />        return writer.toString();<br />    }<br /><br />    public static LoaderContext getContext(Class<?> clzz) throws JAXBException {<br />        if (!contexts.containsKey(clzz)){<br />            contexts.put(clzz,new LoaderContext(JAXBContext.newInstance(clzz)));<br />        }<br />        return contexts.get(clzz);<br />    }<br />}<br /></pre><br /><br /><br />The variable project is the MavenProject that I got as a parameter from Maven and I use it only to set the classloader. Other than that, everything is simple.  <br /><br /><pre><br />    /**<br />     * @parameter expression=\"${class.name}\"<br />     */<br />    private String clzzName;<br /><br />    /**<br />     * @parameter expression=\"${print.output}\" default-value=\"false\"<br />     */<br />    private boolean printOutput;<br /><br />    /**<br />     * @parameter expression=\"${project}\"<br />     * @required<br />     * @readonly<br />     */<br />    private MavenProject project;<br /><br />    /**<br />     * @parameter expression=\"${xml.files}\"<br />     */<br />    File[] files = new File[0];<br /></pre><br /><br /><br /><h2> Ways to enhance </h2> <br /><br />This plugin, as it is presented here, has a serious fault. There's no data validation. <br /><br />Lets say for example, the XML points to a class, A that should implement some interface - MyInterface. I would like to be able to check that this is indeed the case. <br /><br />Other things that would be nice for some of you to have is \"fix format\" feature. Sometimes we lose the correct indentations, or the correct order of the elements. By loading the XML and exporting it, these things are automatically fixed. <br /><br />And one last useful thing, this plugin can be easily enhanced to perform upgrades to XML schemas. If you add the data validation, you can write a data validator that converts the object to a new object and exports it - giving you an automated XMLs upgrade. <br /><br /><h2> Conclusion </h2> <br /><br />As you can see, this is a very generic, modular and useful plugin that can easily be enhanced to something very productive."
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/4972963423583114241/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-xml-checker-maven-plugin.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4972963423583114241"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4972963423583114241"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-xml-checker-maven-plugin.html",
                        "_title": "My XML Checker Maven Plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/S1AcaeWlIXI/AAAAAAAAAHM/S1EAgzwz9_A/s72-c/xml_validator.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7065200561665569105",
                "published": "2009-11-15T22:54:00.000-08:00",
                "updated": "2009-11-24T09:52:28.701-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "My Application Maven Plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "Maven is a great tool, but I find sometimes it is missing little, very helpful things. <br /><br />Documentation for example, is lacking. However this was improved by version 2.0. <br /><br />However, the thing I find missing most of all is a plugin that takes my jar and all needed dependencies, build a \"run.bat\", zips and deploys. <br /><br />The assembly plugin claims be good for this purpose, but I didn't like it. First of all it has an external XML, and my first experience with it was frustrating. <br />I couldn't find a way to generate my \"run.bat\". (how annoying can it be to maintain classpath in scripts?)<br /><br />So I wrote my own, quite useful, plugin. I call it the application plugin. <br /><br /><br /><a name='more'></a><br /><br /><h2> Goals </h2> <br /><br />My plugin has the following goals : <br /><ul><br /><li>make-app - gathers all jars into folder and generates run.bat<br /><li>zip - zips the generated directory from \"make-app\".<br /><li>attach - attaches the zip as secondary artifact.<br /><li>release - places the zip in a location available to the entire company. I prefer to the Maven Repository since teams like QA don't need to know what the repository (or maven) is. <br /></ul> <br /><br /><h2> Additional Features </h2> <br /><br /><h3> Debug , Pause , Suspend, Bat, KSH</h3><br /><br />How many times did you want to set the properties for remote debug but forgot what they are?<br />How many times did you start running the application but forgot to give the debug properties in the command line ? <br /><br /><br />In my plugin I added boolean flags to add the debug properties for remote debug (you can also decide the port). Suspend allows you to specify if the debug should suspend the application. <br /><br />Pause is very useful when you need to see the entire output before the console closes. I use true as default. It's always good to have one last check in the console that I am ready to close. <br /><br />I also automatically produce scripts to run for windows (.bat) and unix (.ksh). <br />Even though I write in Java, sometimes the QA will need to verify other platforms (verifying other JVMs for example). <br /><br /><h2> Copying Dependencies </h2> <br /><br />How did copy the dependencies ? <br />I used <a href=\"http://code.google.com/p/mojo-executor/\">Google's execution code.</a><br /><br /><br /><h2>  Parameters </h2><br /><br />My \"run\" script supports several types of parameters. <br /><ul><br /><li> <u>Built In </u>- parameters which will always be sent to main<br /><li> <u>Extenral / Manual </u> - parameters that are appended to the run command. \"run.bat a b c\".  <br /></ul><br /><br />To achieve external parameters I had to perform loops in batch and ksh. <br />The output look like this : <br /><h3> Batch </h3><br /><pre><br />set ARGS=<br />:arguments<br />set ARGS=%ARGS% %1<br />shift<br />if not \"%1\"==\"\" goto arguments<br /></pre><br /><br /><h3> Ksh </h3><br />I didn't find a way to perform this in ksh. (I don't have a lot of knowledge on the subject). <br /><br /><h2> Dynamic Output Folder </h2><br /><br />Later I was requested to add a dynamic output folder. <br />The trick I did here was : let the user declare the name of the folder he will write into. This name should be constant. <br />Then, in the \"run\" script, I will append a \"rename\" algorithm to append that folder name the timestamp. <br />The code looks like this <br /><h3> Batch </h3><br /><pre><br />rem RENAME OUTPUT DIRECTORY TO OUTPUT WITH TIME<br /><br />rem SHOULD REPLACE \"place_orig_output_name_here\" WITH OUTPUT FOLDER NAME FROM JETIF.PROPERTIES<br />set orig_output_name=place_orig_output_name_here<br /><br />rem set date to variable CDATE<br />FOR /F \"TOKENS=1* DELIMS= \" %%A IN ('DATE/T') DO SET CDATE=%%B<br />echo CDATE=%CDATE%<br />FOR /F \"TOKENS=1,2 eol=/ DELIMS=/ \" %%A IN ('DATE/T') DO SET mm=%%B<br />FOR /F \"TOKENS=1,2 DELIMS=/ eol=/\" %%A IN ('echo %CDATE%') DO SET dd=%%B<br />FOR /F \"TOKENS=2,3 DELIMS=/ \" %%A IN ('echo %CDATE%') DO SET yyyy=%%B<br /><br />rem set time to a variable CTIME<br />FOR /F %%A IN ('echo %time%') DO SET CTIME=%%A<br />echo CTIME=%CTIME%<br />FOR /F \"DELIMS=':'\" %%A IN ('echo %CTIME%') DO SET hour=%%A<br />echo hour=%hour%<br />FOR /F \"TOKENS=2 DELIMS=':' \" %%A IN ('echo %CTIME%') DO SET minute=%%A<br />echo minute=%minute%<br /><br />FOR /F \"TOKENS=3 DELIMS=':' \" %%A IN ('echo %CTIME%') DO SET littleTime=%%A<br />echo littleTime=%littleTime%<br /><br />FOR /F \"DELIMS='.' \" %%A IN ('echo %littleTime%') DO SET seconds=%%A<br />echo seconds=%seconds%<br />FOR /F \"TOKENS=2 DELIMS='.' \" %%A IN ('echo %littleTime%') DO SET millis=%%A<br />echo millis=%millis%<br /><br /><br />SET my_date=%yyyy%y-%mm%m-%dd%d@%hour%h-%minute%m-%seconds%s-%millis%ms<br /><br />echo %my_date%<br /><br />mv %orig_output_name% output#%my_date%<br /></pre><br /><br /><h3> Unix </h3><br /><pre><br />year=`date +%Y`<br />month=`date +%m`<br />day_of_month=`date +%d`<br />hour=`date +%H`<br />minute=`date +%M`<br />second=`date +%S`<br />new_name=output#${year}-${month}-${day_of_month}@${hour}-${minute}-${second}<br /><br /># should replace \"place_orig_output_name_here\" with original filename<br />mv place_orig_output_name_here $new_name<br /></pre><br /><br />Gotta love Unix's elegance. <br /><br /><h1> Conclusion </h1> <br /><br />Maven lacks a simple plugin to gather your runnables and generate a run script. <br />Writing one is fun and quite simple for experienced plugin developers. <br />I keep getting requirements for this plugin, so I assume it is quite popular. <br /><br /><br /><h1> References </h1><br /><ul><br /><li><a href=\"http://maven.apache.org/plugins/maven-assembly-plugin/\">Assemyl Plugin</a><br /><li><a href=\"http://www.mograbi.co.il\">Application Plugin Documentation in My Site</a><br /><li><a href=\"http://www.mograbi.co.il/nexus\">My Maven Repository for Download and Sources</a><br /><li><a href=\"http://code.google.com/p/mojo-executor/\">Google's Mojo Executor</a><br /></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/7065200561665569105/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-application-maven-plugin.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7065200561665569105"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7065200561665569105"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-application-maven-plugin.html",
                        "_title": "My Application Maven Plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1509309386148084637",
                "published": "2009-11-15T09:59:00.000-08:00",
                "updated": "2009-11-24T09:25:26.141-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#post"
                },
                "title": {
                    "_type": "text",
                    "__text": "Jetif  and My Jetif Maven Plugin"
                },
                "content": {
                    "_type": "html",
                    "__text": "<h1> Small Introduction to Jetif </h1> <br /><br />Over the years, I found myself writing server code for webapps. While having fun not worrying about UI, I came across a problem. The QA couldn't check my code, they had to have a UI. <br /><br />You might suggest the QA write code - but that means integration. <br /><br />What you need in such a case is something similar to JUnit but only with some kind of User Interface. And then came Jetif. <br /><br /><a name='more'></a><br /><br /><h1>JUnit GUI</h1><br />My first thought was to build or find a GUI for JUnit. <br />It seems there was once such a thing, which is now deprecated. <br />Maintaining GUI is hard work. So I searched for something easier to maintain. <br /><br /><h1> Jetif </h1><br />Jetif has a nice take on things. <br />You have an XML (of course) that defines your test cases. <br />Each test case can call methods, and give it parameters. <br /><br />Jetif will read this XML, run these methods with reflection, and build a nice report. <br /><br />There is of course the issue of serializing complex object as method arguments. <br />But you can use Spring to work around that. <br /><br /><h1> Making Life Easier with Maven</h1><br />I couldn't find any existing plugin to Jetif in Maven. So I wrote several plugins.<br /><br /><h3> Jetif archetype </h3><br /><br />First of all - creating the basic layout. <br />Jetif project have at least 5 regular files : <br /><ol><br /><li> A Java class <br /><li> A Unit test<br /><li> XML for test-cases. ( at least one ) <br /><li> pom.xml with Jetif depedency(of course) <br /><li> jetif.properties (optional, but always nice to have)<br /></ol><br /><br />And of course : properties files have predefined keys, and XML have defined XSDs. <br />Lazy developers will copy paste them from one project to another. <br />I am not lazy. <br /><br />5 files are enough for me to decide to have an archetype. <br />So I did one. <br /><br /><h3> Lifecycle </h3><br /><br />There are several things I will always want to do in a Jetif project. <br /><br /><ul> <br /><li> Compile, Test, Jar - of course <br /><li> Gather all the Jar dependencies to a single folder <br /><li> Generate \"bat\" file and \"ksh\" file (for windows and unix). <br /><li> ZIP this folder <br /><li> Deploy it to some location where the QA have access to it. <br /></ul><br /><br />If I do these things automatically, I guarantee that the QA will always be able to test the latest version of my code in an automated environment that they can expand as much as they like. <br /><br />So I wrote the Jetif lifecycle. Now all I have to do in a pom.xml in order to get all of these done is write<br /><pre> <br /><packaging> jetif </packaging><br /></pre> <br />and that's it.  <br /><br /><h2> Conclusion </h2><br /><br />Jetif is an easy to use user interface I like to use when I need to release my code to QA. <br /><br />Integrating it with Maven and Spring makes my life as easy as can be leaving me the fun part of writing the application code and letting the rest happen automatically. <br /><br />The way I see it - everyone benefit from it. <br /><ul><br /><li>The QA don't have to wait to long for something they can test. <br /><li> I don't have to work hard on a user interface - with spring the maintenance goes to zero as well. <br /><li> My boss sees results really fast. <br /><li> QA does not need to write code - however they can... <br /></ul><br /><br /><h2> Technical Details </h2><br /><br />My components.xml for this plugin looks something like this <br /><pre><br /><component-set><br />    <components><br />        <component><br />            <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role><br />            <role-hint>jetif</role-hint><br />            <implementation>org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping</implementation><br />            <configuration><br />                <phases><br />                    <process-resources>org.apache.maven.plugins:maven-resources-plugin:resources</process-resources><br />                    <compile>org.apache.maven.plugins:maven-compiler-plugin:compile</compile><br />                    <process-test-resources>org.apache.maven.plugins:maven-resources-plugin:testResources</process-test-resources><br />                    <test-compile>org.apache.maven.plugins:maven-compiler-plugin:testCompile</test-compile><br />                    <!--<test-compile>org.apache.maven.plugins:maven-compiler-plugin:testCompile</test-compile>--><br />                    <test>org.apache.maven.plugins:maven-surefire-plugin:test</test><br />                    <package><br />                        org.apache.maven.plugins:maven-jar-plugin:jar,<br />                        backend.plugins:backend-application-plugin:1.0.3:make-jetif-app,<br />                        backend.plugins:backend-application-plugin:1.0.3:zip<br />                    </package><br />                    <!-- no need to install --><br />                    <deploy><br />                        backend.plugins:backend-application-plugin:1.0.3:deploy<br />                    </deploy><br />                    <!-- do nothing in deploy--><br />                </phases><br />            </configuration><br />        </component><br />    </components><br /></component-set><br /></pre><br /><br /><br />The \"application-plugin\" is explained in another blog<br /><br /><h2> References </h2><br /><ul><br /><li><a href=\"http://maven.apache.org/plugins/maven-archetype-plugin/\">Maven Archetype Plugin</a></li><br /><li><a href=\"http://jetif.sourceforge.net/\">Jetif Home Site</a></li><br /><li><a href=\"http://www.sonatype.com/books/maven-book/reference/writing-plugins-sect-override-default-lifecycle.html\"> How to write Maven Lifecycle</a></li><br /><li><a href=\"http://mograbi.co.il/nexus\">My Maven Repository for sources and download</a><br /></ul>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/1509309386148084637/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-jetif-maven-plugin.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1509309386148084637"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1509309386148084637"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/11/my-jetif-maven-plugin.html",
                        "_title": "Jetif  and My Jetif Maven Plugin"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5047626207928014575",
                "published": "2009-10-20T08:42:00.000-07:00",
                "updated": "2013-07-21T00:41:59.121-07:00",
                "category": [
                    {
                        "_scheme": "http://schemas.google.com/g/2005#kind",
                        "_term": "http://schemas.google.com/blogger/2008/kind#post"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "cglib"
                    },
                    {
                        "_scheme": "http://www.blogger.com/atom/ns#",
                        "_term": "java"
                    }
                ],
                "title": {
                    "_type": "text",
                    "__text": "Cleaner Java Code with CGLIB"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div class=\"mograblog\"> <h1> Cleaner Code With CGLib </h1> <div>  <p>   <a href=\"http://asm.ow2.org/\">ASM - </a> allows you to generate byte code at runtime.<br />   It might not mean much to you at the moment, but this is a strong ability.<br />   For example - this ability allowed the creation of the <a href=\"http://groovy.codehaus.org/\">Groovy </a>language.<br /><br />   Today I will show how hibernate uses ASM.<br />   <a name='more'></a>  </p>  <h2> If You Use Hibernate, You Use CGLib! - Lazy Load With Hibernate</h2>  <p>   Lets say we have an Office object with One-To-Many relationship to another object called Employees.<br />   The Office object will have a field that looks like this :<br />      </p>    <pre class=\"prettyprint\"><br />class Office { <br /> @Column<br /> String name;<br /> <br /> @Column<br /> String address;<br /><br /> @OneToMany(mappedBy = \"office\")<br /> Collection<Employees> employees = new ... ;<br /><br /> // getters and setters<br /> public Collection<Employees> getEmployees{return employees;}<br />} <br />  </pre>   <p>   I also created a field for Name and Address.<br />   The most important thing in the code above is the getter for employees, note that it does not run any query. <br />  </p>  <h2> Search Feature By Name/Address Does Not Require Employees</h2>  <p>   Now lets assume for a  minute I am writing a \"search office by name or address\" feature<br/>   For this feature, we only need the \"name\" and \"address\" of each Office.<br/>   We do not need the employees field.<br/>     So it will be better for performance that we do not query the database for them.<br />   We can tell hibernate to not query for the empolyees unless we use the getter \"getEmployees\".    To achieve this, lets add \"Lazy\" definition to the \"employees field annotation\"   </p>          <pre><br /> @OneToMany(mappedBy = \"office\", fetch=FetchType.LAZY)<br /> Collection<employees> employees = new ... ;<br />  </pre>     <a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/St8uvOt3LlI/AAAAAAAAACY/Mk3lN1dMZ4w/s1600-h/Temp.jpg\"><img style=\"margin: 0pt 0pt 10px 10px; float: right; cursor: pointer; width: 254px; height: 320px;\" src=\"http://1.bp.blogspot.com/_J3A8WqpdCX0/St8uvOt3LlI/AAAAAAAAACY/Mk3lN1dMZ4w/s320/Temp.jpg\" alt=\"\" id=\"BLOGGER_PHOTO_ID_5395082267552329298\" border=\"0\" /></a><br />  <p>   Hibernate uses two queries to create the object we need, however - when you use lazy loading<br/>   this second query will execute only when we invoke the getter.<br />   The queries will be :    <ol>    <li>Query to fetch the office</li>    <li>Query to fetch the employees when we use the getter</li>   </ol>  </p>  <p>   How does hibernate detect that I invoked the getter ?<br />   The getter is a normal getter, it does not reference hibernate or the database in any way..<br />   To understand the answer, you should stop the application in debug to see the runtime classname of the Office object.<br />   You should see something like this :<br />  </p>    <pre>packageName.Office$EnhancedByCGLIB$<id>@<number></pre>  <p>   The <number> field is standard information for any object and is not relevant in this discussion. <br/>   The ID is some unique identifier generated by CGLIB and is also of no real importance to us.<br />   The important thing to see is that we didn't get Office, but some other class.<br />   This class was obviously not generated in compile time - we can check the contents of the jars to verify - so what happens here ?<br />  </p>  <p>   Hibernate generates a <strong>new class</strong> in <strong>runtime</strong>. <br/>   This new class is called <code>Office$$EnhancedByCGLIB$$</code> and it has the exact same API as my <code>Office</code> class, <br/>   but at runtime, a different code is running. <br/>   This code is the \"enhanced\" class generated by CGLib.<br/>   The enhanced class has a reference to the Database and when it executes the getter for employees another query is executed.   </p>   <h2>When Should I Use CGLib?</h2>  <p>   It's always hard to identify when you should or should not use some technology in your code.<br />   For example - if I need a single connection to the Database for a small query, <br/>   it would be a shame to use Spring in order to initialize a connection pool and run in a different thread.   </p>  <p>   I find CGLIB most useful in configuration objects.<br />   I also used it to <a href=\"/2013/07/extending-selenium-in-java.html\" title=\"Mograblog Selenium Extension\">extend selenium</a>.   </p>  <p>   So for configuration purposes, I want my application to have code like this : <br />  </p>    <pre><br /> class Configuration{<br />   String username; <br />   String password; <br />   // getter and setter ... <br /> }<br /><br /> Configuration myConf = new Configuration(); <br /> // myConf.getUsername() -- will get the username<br /> // myconf.getPassword() -- will get the password<br />  </pre>  <p>   This way I can decouple my configuration fields from the configuration mechanism. <br/>   It does not matter if I use a JSON file, a YAML file, environment variable etc..<br/>   I can actually use them all!<br/>   I actually used this mechanism a couple of times, and it is quite useful.<br/>   It is especially useful when you want well structured objects for configuration and to easily initialize them with default values.<br/>   You can see it in <a href=\"#\" title=\"Mograblog - My Play!Framework2 Essentials\">My Play!Framework 2 Survival Kit!</a>  </p>          <h2> References </h2>  <p>   <ul>    <li><a href=\"http://en.wikipedia.org/wiki/ObjectWeb_ASM\">ASM in Wikipedia</a></li>    <li><a href=\"http://cglib.sourceforge.net/\">CGLIB</a></li>    <li><a href=\"http://docs.jboss.org/hibernate/stable/annotations/reference/en/html_single/#entity-hibspec-singleassoc-fetching\">Hibernate lazy load</a></li>   </ul>  </p> </div></div>"
                },
                "link": [
                    {
                        "_rel": "replies",
                        "_type": "application/atom+xml",
                        "_href": "http://www.mograblog.com/feeds/5047626207928014575/comments/default",
                        "_title": "Post Comments"
                    },
                    {
                        "_rel": "replies",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/10/cleaner-java-code-with-cglib.html#comment-form",
                        "_title": "0 Comments"
                    },
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5047626207928014575"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5047626207928014575"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2009/10/cleaner-java-code-with-cglib.html",
                        "_title": "Cleaner Java Code with CGLIB"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://1.bp.blogspot.com/_J3A8WqpdCX0/St8uvOt3LlI/AAAAAAAAACY/Mk3lN1dMZ4w/s72-c/Temp.jpg",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                },
                "total": {
                    "__prefix": "thr",
                    "__text": "0"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.page-5873276351107109707",
                "published": "2011-11-21T21:26:00.000-08:00",
                "updated": "2011-11-21T21:26:22.593-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#page"
                },
                "title": {
                    "_type": "text",
                    "__text": "Steps Project"
                },
                "content": {
                    "_type": "html",
                    "__text": "<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S-TyHmAeW1I/AAAAAAAAAg8/q14FQRtlO34/s1600/steps-logo_orig.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"109\" src=\"http://3.bp.blogspot.com/_J3A8WqpdCX0/S-TyHmAeW1I/AAAAAAAAAg8/q14FQRtlO34/s320/steps-logo_orig.png\" width=\"320\" /></a></div><br /><br /><span class=\"Apple-style-span\" style=\"font-size: 32px; font-weight: bold;\">How do you tackle a big project? You take baby steps.</span><br /><br />A while ago I searched for a project management application since I have  all these things I want to do and I have to list them down in an  organized manner.<br /><br />I discovered there's no such application that I like. All are simply  schedule based or a task list. And that is not my take on the meaning of  a project.<br /><br />When I think of a project, I don't think of \"resources\" or \"schedule\",  all I care about is \"what needs be done\". As simple a concept this may  sound, I couldn't find a simple and free application to implement it. So  I wrote <a href=\"http://steps.mograbi.info/\" target=\"_blank\">Steps - Project  Manager</a>.</div>"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/pages/default/5873276351107109707"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/pages/default/5873276351107109707"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/p/steps-project.html",
                        "_title": "Steps Project"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "thumbnail": {
                    "_xmlns:media": "http://search.yahoo.com/mrss/",
                    "_url": "http://3.bp.blogspot.com/_J3A8WqpdCX0/S-TyHmAeW1I/AAAAAAAAAg8/q14FQRtlO34/s72-c/steps-logo_orig.png",
                    "_height": "72",
                    "_width": "72",
                    "__prefix": "media"
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.page-7020108222034928229",
                "published": "2011-01-29T04:28:00.000-08:00",
                "updated": "2011-02-05T00:25:27.022-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#page"
                },
                "title": {
                    "_type": "text",
                    "__text": "Test Module for Play!Framework"
                },
                "content": {
                    "_type": "html",
                    "__text": "<p>The Test Module for Play!Framework helps you write tests quicker, is a cleaner and reusable manner.<br /></p><p>Play provides an environment for testing. However that environment is full of hard-coded strings, and the code you write is neither reusable nor maintainable. <br /></p><p>When you start a new Play application, Play generates a sample code for you that looks like this : <br /><pre><code>\n<br />Response response = GET(\"/\");\n<br /> assertIsOk(response);\n<br /> assertContentType(\"text/html\", response);\n<br /> assertCharset(\"utf-8\", response);\n<br /></code></pre></p><p>I have several problems with this code. <br /><br /><li>The path \"/\" is unclear.. In order to know what you are testing, you need to check the \"routes\" file. </li><br /><li> Calling actions with path string makes tests hard to maintain and develop. If you have a signature with many parameters (for example, signup form or survey form) it will be hard to write the path. If I will change an argument's name in the controller's signature I will need to modify all related path strings.</li><br /><li> Why am I specifying \"GET\"? Why am I not specifying the method I want to call, and let Play figure it out by itself? As a developer it's natural to me to call a method instead of constructing a URL.</li><br /><li>It is not Object oriented enough, and hence the code is less reusable. I would probably want to check that the response is OK many times. maybe even on every response. If the code was OO I could override \"GET\" and add a check that the response is ok.</li><br /><li> Strings are hard-coded. For example \"text/html\" and \"utf-8\". This is error prone. </li><br /><li> Play already does all the things I specify. So why not in the tests? </li><br /></p><br /><h1>My Wishes </h1>I wish I could simply call the controller's function. <br /><br />In the example above, the path \"/\" will direct me to controller \"Application\" and action \"index\". I wish I could simply call Application.index() and that's it. However, for someone outside of Play it will be hard to implement if not impossible. <br /><br />The reason for it being so hard lies in the instrumentation technic which is massively used all around Play and the fact that the methods are static. <br /><br />I will not elaborate this topic here, nor will I talk about why Play chose to implement the actions in static methods, which are not OO by nature. I believe that Singletons would've made a much better choice. <br /><br /><br /><br />Due to all these difficulties, I will settle for the following syntax<br /><pre><code>\n<br />ApplicationTestController c = new ApplicationTestController();\n<br />c.index().isOk().is(UTF8).is(HTML);\n<br /></code></pre><p>My module allows you to have similar syntax to this. <br /></p><p>In this syntax I know exactly which function is called. I don't care which Path is used, and definitely not which method (GET/POST). <br /></p><p>I know which arguments to use with a simple \"auto complete\". If I change the signature of the controller I can simply refactor my \"TestApplicationController\" to modify the test easily accordingly. <br /></p><p>Note I am not mentioning Response anywhere.. I have less code, HTML and UTF8 are Enums, so I know exactly what my options are. <br /></p><h1>Getting Started </h1><p>All the info and tutorials you need can be found by code samples, and wiki pages available to you in GitHub (link below). <br /></p><p>Since this little (10 classes.. ) project of mine combines cool technologies like Play and CGLib, I will write a series of posts about how I wrote it. (links below). <br /></p><br /><h1>References </h1><li> <a href=\"https://github.com/GuyMograbi/play_test_module\" class=\"mogi-reference\">Project on GitHub</a> </li><br /><br />"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/pages/default/7020108222034928229"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/pages/default/7020108222034928229"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/p/test-module-for-playframework.html",
                        "_title": "Test Module for Play!Framework"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://plus.google.com/114132575051963212041",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                }
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-224983992740577765",
                "published": "2011-07-06T05:45:54.181-07:00",
                "updated": "2011-07-06T05:45:54.181-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "It&#39;s a reserved word problem. You should look ..."
                },
                "content": {
                    "_type": "html",
                    "__text": "It&#39;s a reserved word problem. You should look at this. I think your answer is there : http://groups.google.com/group/play-framework/browse_thread/thread/20b3ecc0b008a76f"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/3539318218337191961/comments/default/224983992740577765"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/3539318218337191961/comments/default/224983992740577765"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/07/resolving-playframeworks-test-migration.html?showComment=1309956354181#c224983992740577765",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/07/resolving-playframeworks-test-migration.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-3539318218337191961",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/3539318218337191961",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1889657888",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "July 6, 2011 at 5:45 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1933184438173440182",
                "published": "2011-07-31T06:46:36.363-07:00",
                "updated": "2011-07-31T06:46:36.363-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thx."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thx."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7227013278867435273/comments/default/1933184438173440182"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7227013278867435273/comments/default/1933184438173440182"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/10/django-for-windows-in-5-minutes.html?showComment=1312119996363#c1933184438173440182",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/10/django-for-windows-in-5-minutes.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-7227013278867435273",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7227013278867435273",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1328182103",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "July 31, 2011 at 6:46 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4281619392400039792",
                "published": "2011-09-03T09:18:15.802-07:00",
                "updated": "2011-09-03T09:18:15.802-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Hi! for translation I use gTranslate on Firefox:\nh..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Hi! for translation I use gTranslate on Firefox:<br />http://runakay.blogspot.com/2011/09/translating-words-on-firefox-on-fly.html"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2409017476697355656/comments/default/4281619392400039792"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2409017476697355656/comments/default/4281619392400039792"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/google-blooper-translate-bar-requires.html?showComment=1315066695802#c4281619392400039792",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Rony",
                    "uri": "https://www.blogger.com/profile/02151694137050346413",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img2.blogblog.com/img/b16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/08/google-blooper-translate-bar-requires.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2409017476697355656",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2409017476697355656",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-175828233",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "September 3, 2011 at 9:18 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5062699164634455498",
                "published": "2012-01-30T16:09:26.800-08:00",
                "updated": "2012-01-30T16:09:26.800-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thank you.  The anonymous class thing had me stump..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thank you.  The anonymous class thing had me stumped for a while."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5783193993796923459/comments/default/5062699164634455498"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5783193993796923459/comments/default/5062699164634455498"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/play-framework-cannot-access-public.html?showComment=1327968566800#c5062699164634455498",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/08/play-framework-cannot-access-public.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-5783193993796923459",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5783193993796923459",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-395767041",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "January 30, 2012 at 4:09 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4713902016382679640",
                "published": "2012-03-02T03:10:49.849-08:00",
                "updated": "2012-03-02T03:10:49.849-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "excellent blog ! thanks for d info \n!"
                },
                "content": {
                    "_type": "html",
                    "__text": "excellent blog ! thanks for d info <br />!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1057154408255220040/comments/default/4713902016382679640"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1057154408255220040/comments/default/4713902016382679640"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/my-top-3-annoying-bugs-in-blogger.html?showComment=1330686649849#c4713902016382679640",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "family office service",
                    "uri": "http://www.redgranitellc.com/services-for-family-offices/",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/11/my-top-3-annoying-bugs-in-blogger.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1057154408255220040",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1057154408255220040",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-10636920",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "March 2, 2012 at 3:10 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5423855959742174323",
                "published": "2012-03-11T22:44:21.092-07:00",
                "updated": "2012-03-11T22:44:21.092-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thaths not a big thing ! i some days or months u w..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thaths not a big thing ! i some days or months u will earning god ! your blogs are nice ! u will get a good traffic !"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4944782153592012345/comments/default/5423855959742174323"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4944782153592012345/comments/default/5423855959742174323"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/2-years-old-with-10k-page-views-about.html?showComment=1331531061092#c5423855959742174323",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "family office management",
                    "uri": "http://www.redgranitellc.com/",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/11/2-years-old-with-10k-page-views-about.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-4944782153592012345",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4944782153592012345",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-41764669",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "March 11, 2012 at 10:44 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8538121298165134343",
                "published": "2012-03-20T04:08:55.646-07:00",
                "updated": "2012-03-20T04:08:55.646-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Sometimes, you can&#39;t avoid bugs on open source..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Sometimes, you can&#39;t avoid bugs on open source application. And due to updates your old application maybe affected. Make sure you have the latest one."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1057154408255220040/comments/default/8538121298165134343"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1057154408255220040/comments/default/8538121298165134343"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/11/my-top-3-annoying-bugs-in-blogger.html?showComment=1332241735646#c8538121298165134343",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Project Management Course",
                    "uri": "http://www.trainingcenter.com/project-management-online-course-2011.htm",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/11/my-top-3-annoying-bugs-in-blogger.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1057154408255220040",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1057154408255220040",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1759220089",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "March 20, 2012 at 4:08 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8412536325295027025",
                "published": "2012-05-21T07:27:38.425-07:00",
                "updated": "2012-05-21T07:27:38.425-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Actually, intellij also replaces the c icon with a..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Actually, intellij also replaces the c icon with a j if your Java class exceeds the max number of lines for its intellisense. The default is 2500. Look for the property idea.max.intellisense.filesize in your idea.properties and change it to whatever is needed."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8412536325295027025"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8412536325295027025"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html?showComment=1337610458425#c8412536325295027025",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-871497596050537846",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/871497596050537846",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-2008493095",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "May 21, 2012 at 7:27 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5689487004425552067",
                "published": "2012-06-08T04:36:30.399-07:00",
                "updated": "2012-06-08T04:36:30.399-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I LOVE YOU !\nNeed a quick solution and here i am.\n..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I LOVE YOU !<br />Need a quick solution and here i am.<br />Just want to comment:<br /><br />need a comma before this<br />< b >< u >minsizethumb: -1<br /><br />and remove < b >< u ><br /><br />and to use, add the minimum height pixel for the minsizethumb<br /><br />Thank you!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/5689487004425552067"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/5689487004425552067"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html?showComment=1339155390399#c5689487004425552067",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-4044058827417154919",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4044058827417154919",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1872280634",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "June 8, 2012 at 4:36 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7404941653080010169",
                "published": "2012-06-10T21:59:08.441-07:00",
                "updated": "2012-06-10T21:59:08.441-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Oops, i think this solution still needs a tweak. T..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Oops, i think this solution still needs a tweak. The min-height works, but it will limit the tinyscroll view area thus we can&#39;t see the whole content, unless we use mouse scroll, but that will make the scrollbar thumb go overflow.<br />i think you need to change the oScrollbar.ratio too<br /><br />Thanks!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/7404941653080010169"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/7404941653080010169"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html?showComment=1339390748441#c7404941653080010169",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/5689487004425552067"
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-4044058827417154919",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4044058827417154919",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-2064267282",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "June 10, 2012 at 9:59 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4824443377069956955",
                "published": "2012-07-26T20:49:35.825-07:00",
                "updated": "2012-07-26T20:49:35.825-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thanks \"Anonymous\". Setting the idea.max..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thanks \"Anonymous\". Setting the idea.max.intellisense.filesize property helped identifying java file(of size 75K lines generated as stub by Axis) as a class."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/4824443377069956955"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/4824443377069956955"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html?showComment=1343360975825#c4824443377069956955",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8412536325295027025"
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-871497596050537846",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/871497596050537846",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1277983665",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "July 26, 2012 at 8:49 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2250375614457659516",
                "published": "2012-07-30T08:52:31.810-07:00",
                "updated": "2012-07-30T08:52:31.810-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thanks, getting the correct jar combo is a right p..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thanks, getting the correct jar combo is a right pain."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/2250375614457659516"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/2250375614457659516"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html?showComment=1343663551810#c2250375614457659516",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-413393582",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "July 30, 2012 at 8:52 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8709664408993962518",
                "published": "2012-09-12T19:19:06.756-07:00",
                "updated": "2012-09-12T19:19:06.756-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thanks SO, SO, SO, SO much!  I was beginning to th..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thanks SO, SO, SO, SO much!  I was beginning to think it was a bug in IntelliJ.  Like everyone else, I had run the Axis tool `wsdl2java`, and it produced a stub with OVER 150K LINES (it&#39;s FedEx rate services)!  No matter what I tried, code references to the generated class were marked as invalid by IntelliJ, as though the source file didn&#39;t even exist, and it had the \"J\" icon instead of the normal class icon.<br />I just renamed the stub class name a few minutes ago and now it&#39;s going through the entire file trying to analyze it; my CPU cores are pegged right now.  It&#39;s too bad there isn&#39;t a Java IDE that&#39;s just as good but written in C++ instead of Java."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8709664408993962518"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8709664408993962518"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html?showComment=1347502746756#c8709664408993962518",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8412536325295027025"
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-871497596050537846",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/871497596050537846",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-37663904",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "September 12, 2012 at 7:19 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4132222189729041139",
                "published": "2012-09-13T01:33:34.675-07:00",
                "updated": "2012-09-13T01:33:34.675-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thank you for the comment. I modified the post wit..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thank you for the comment. I modified the post with your comment."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/4132222189729041139"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/4132222189729041139"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html?showComment=1347525214675#c4132222189729041139",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/871497596050537846/comments/default/8412536325295027025"
                    }
                ],
                "author": {
                    "name": "Guy Mograbi",
                    "uri": "https://www.blogger.com/profile/06924133171209944748",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "24",
                        "_height": "32",
                        "_src": "//2.bp.blogspot.com/_J3A8WqpdCX0/S3rhZfZwu3I/AAAAAAAAAIo/fXb8MVMShvc/S220-s32/023.JPG",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/05/intellij-j-is-shown-instead-of-c.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-871497596050537846",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/871497596050537846",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-771062549",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "September 13, 2012 at 1:33 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-888001248257749030",
                "published": "2012-10-11T05:47:04.665-07:00",
                "updated": "2012-10-11T05:47:04.665-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Cool!It&#39;s help me! Thank you very much!!!"
                },
                "content": {
                    "_type": "html",
                    "__text": "Cool!It&#39;s help me! Thank you very much!!!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2436568744469649190/comments/default/888001248257749030"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2436568744469649190/comments/default/888001248257749030"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/06/resolving-jqueryselectboxs.html?showComment=1349959624665#c888001248257749030",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/06/resolving-jqueryselectboxs.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2436568744469649190",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2436568744469649190",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-359610811",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "October 11, 2012 at 5:47 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7708839141181815914",
                "published": "2012-11-23T16:14:04.658-08:00",
                "updated": "2012-11-23T16:14:04.658-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thank you so much, I am new to MySQL and this was ..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thank you so much, I am new to MySQL and this was driving me insane."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/8630085625250220431/comments/default/7708839141181815914"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/8630085625250220431/comments/default/7708839141181815914"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/11/mysql-lower-case-on-windows-annoying.html?showComment=1353716044658#c7708839141181815914",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Brandon",
                    "uri": "http://brandonmcculligh.ca",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/11/mysql-lower-case-on-windows-annoying.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-8630085625250220431",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8630085625250220431",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-33098287",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "November 23, 2012 at 4:14 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8531406648599698542",
                "published": "2012-12-25T08:20:18.404-08:00",
                "updated": "2012-12-25T08:20:18.404-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "You should really use SelectBoxIt instead: http://..."
                },
                "content": {
                    "_type": "html",
                    "__text": "You should really use SelectBoxIt instead: http://gregfranko.com/jquery.selectBoxIt.js/"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2436568744469649190/comments/default/8531406648599698542"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2436568744469649190/comments/default/8531406648599698542"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/06/resolving-jqueryselectboxs.html?showComment=1356452418404#c8531406648599698542",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Greg Franko",
                    "uri": "https://www.blogger.com/profile/09579483727850688635",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh5.googleusercontent.com/-0LlEQxfHsUw/AAAAAAAAAAI/AAAAAAAAACM/oJ4AfUE9U-I/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/06/resolving-jqueryselectboxs.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2436568744469649190",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2436568744469649190",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-2046908335",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "December 25, 2012 at 8:20 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4766831594174462111",
                "published": "2013-01-13T23:26:51.428-08:00",
                "updated": "2013-01-13T23:26:51.428-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thank you so much...It helps a lot and now things ..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thank you so much...It helps a lot and now things are working at my end"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1868774185227891058/comments/default/4766831594174462111"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1868774185227891058/comments/default/4766831594174462111"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/setting-up-log4j-in-maven-project.html?showComment=1358148411428#c4766831594174462111",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/08/setting-up-log4j-in-maven-project.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1868774185227891058",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1868774185227891058",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1477294576",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "January 13, 2013 at 11:26 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-919898062449358584",
                "published": "2013-01-15T01:13:59.586-08:00",
                "updated": "2013-01-15T01:13:59.586-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Hi, I am trying to call a web service; generating ..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Hi, I am trying to call a web service; generating the stub code with the maven plugin works fine,<br />but I have missing dependencies when calling the service.<br />I&#39;ve tried a trial and error approach to add the missing dependencies, but that&#39;s painful.<br />http://stackoverflow.com/questions/14333654/axis2-dependencies-for-a-simple-soap-rpc-encoding-call<br /><br />do you have a list of all the dependencies?<br />you mention 62 jars, but you only show 6 dependencies for the pom.xml file.<br />"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/919898062449358584"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/919898062449358584"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html?showComment=1358241239586#c919898062449358584",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "David Portabella",
                    "uri": "https://www.blogger.com/profile/15555838860133322978",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "30",
                        "_src": "//3.bp.blogspot.com/-F4EDiVVbruE/TpMbMjwDcQI/AAAAAAAAFgk/tQh-h-VPwik/s32/DSC_0615_crop_small.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1597448348",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "January 15, 2013 at 1:13 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2272667759527313092",
                "published": "2013-01-15T21:44:55.643-08:00",
                "updated": "2013-01-15T21:44:55.643-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thank you for the comment. \n\nBuilding the dependen..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thank you for the comment. <br /><br />Building the dependencies in Maven for Axis2 is painful - is the point of this article. <br />You could add all 62 dependencies to the POM, but that&#39;s a lot of work. You probably need one or two dependencies to get it working.  <br /><br />What I did in the end is to download the axis2 project. You will see 62 jars there. <br />I manually copied them one by one to the classpath in order to figure out which jar I was missing. Once I had that, I knew which Maven dependency I needed. <br /><br />If you can publish the exception you have right now, the pom file and the a failed sample code, I would love to help you. <br /><br />I also saw the nexus part of the post is out of date. I will update it. Thanks. "
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/2272667759527313092"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/2272667759527313092"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html?showComment=1358315095643#c2272667759527313092",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/919898062449358584"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://www.blogger.com/profile/06924133171209944748",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-771062549",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "January 15, 2013 at 9:44 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8042676364484776467",
                "published": "2013-01-22T01:49:29.459-08:00",
                "updated": "2013-01-22T01:49:29.459-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "perfect! solved my problem, thanks!"
                },
                "content": {
                    "_type": "html",
                    "__text": "perfect! solved my problem, thanks!"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1747586892117119421/comments/default/8042676364484776467"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1747586892117119421/comments/default/8042676364484776467"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/09/javaxpersistencepersistenceexception.html?showComment=1358848169459#c8042676364484776467",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Deniz",
                    "uri": "https://www.blogger.com/profile/17868842925227230977",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img2.blogblog.com/img/b16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/09/javaxpersistencepersistenceexception.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1747586892117119421",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1747586892117119421",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-594653363",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "January 22, 2013 at 1:49 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-1951504708617876934",
                "published": "2013-02-13T05:21:35.407-08:00",
                "updated": "2013-02-13T05:21:35.407-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Do you have a good alternative to Axis2?"
                },
                "content": {
                    "_type": "html",
                    "__text": "Do you have a good alternative to Axis2?"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/1951504708617876934"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/1951504708617876934"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html?showComment=1360761695407#c1951504708617876934",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Torleif",
                    "uri": "http://www.geekality.net",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-761672325",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 13, 2013 at 5:21 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4853275126087143884",
                "published": "2013-02-14T02:07:51.010-08:00",
                "updated": "2013-02-14T02:07:51.010-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I have heard about JAX-WS Metro and Apache CXF, bu..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I have heard about JAX-WS Metro and Apache CXF, but never got the chance to try them out. <br />Please let me know what you decide :) <br />"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/4853275126087143884"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/4853275126087143884"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html?showComment=1360836471010#c4853275126087143884",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/1951504708617876934"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://www.blogger.com/profile/06924133171209944748",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-771062549",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 14, 2013 at 2:07 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6073818986443637924",
                "published": "2013-02-14T14:29:40.053-08:00",
                "updated": "2013-02-14T14:29:40.053-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thanks very much!\n"
                },
                "content": {
                    "_type": "html",
                    "__text": "Thanks very much!<br />"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2075038291801156182/comments/default/6073818986443637924"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2075038291801156182/comments/default/6073818986443637924"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/02/what-to-do-when-apache-shows-your-php.html?showComment=1360880980053#c6073818986443637924",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/02/what-to-do-when-apache-shows-your-php.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2075038291801156182",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2075038291801156182",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1438951716",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 14, 2013 at 2:29 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-428699396637998323",
                "published": "2013-02-16T08:17:27.121-08:00",
                "updated": "2013-02-16T08:17:27.121-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I think you can solve this by setting the followin..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I think you can solve this by setting the following within the if statement mograbi added:<br /><br />options.sizethumb = options.sizethumbmin;<br /><br />This make the next line when oScrollbar.ratio is recalculated to take into account the new min height.<br /><br />Matt"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/428699396637998323"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/428699396637998323"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html?showComment=1361031447121#c428699396637998323",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/5689487004425552067"
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-4044058827417154919",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4044058827417154919",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1997954356",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 16, 2013 at 8:17 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2670681588012491250",
                "published": "2013-02-19T07:29:57.004-08:00",
                "updated": "2013-02-19T07:34:45.458-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text"
                },
                "content": {
                    "_type": "html",
                    "__text": "This comment has been removed by the author."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/2670681588012491250"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/2670681588012491250"
                    }
                ],
                "author": {
                    "name": "Andrius Juodelis",
                    "uri": "https://www.blogger.com/profile/12709267195762929636",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img2.blogblog.com/img/b16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.contentRemoved",
                        "_value": "true",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-611613025",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 19, 2013 at 7:29 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5818509407839358981",
                "published": "2013-02-19T07:35:59.310-08:00",
                "updated": "2013-02-19T07:35:59.310-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "thanks man! this helped a lot !"
                },
                "content": {
                    "_type": "html",
                    "__text": "thanks man! this helped a lot !"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/5818509407839358981"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2598206490603381018/comments/default/5818509407839358981"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html?showComment=1361288159310#c5818509407839358981",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Andrius Juodelis",
                    "uri": "https://www.blogger.com/profile/12709267195762929636",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img2.blogblog.com/img/b16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/12/getting-really-annoyed-with-axis2.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2598206490603381018",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2598206490603381018",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-611613025",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 19, 2013 at 7:35 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4163696819327431580",
                "published": "2013-02-19T11:02:25.601-08:00",
                "updated": "2013-02-19T11:02:25.601-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Hi there!\n\nI wonder if you can help. I&#39;m havin..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Hi there!<br /><br />I wonder if you can help. I&#39;m having an issue where I have a page on my website with several vimeo videos - when you play one and then another, the first one carries on playing and doesn&#39;t pause. I understand that froogaloop can help tell the second and other videos to stop playing when another plays. I&#39;m a bit confused as to where in my script in my wordpress site I am supposed to place this froogaloop though?<br /><br />best<br />Rob"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/4163696819327431580"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/4163696819327431580"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html?showComment=1361300545601#c4163696819327431580",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-7682867387576352569",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7682867387576352569",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1464857546",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 19, 2013 at 11:02 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-2927371753954418037",
                "published": "2013-02-19T11:04:27.333-08:00",
                "updated": "2013-02-19T11:04:27.333-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Hi there!\n\nI wonder if you can help. I&#39;m havin..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Hi there!<br /><br />I wonder if you can help. I&#39;m having an issue where I have a page on my website with several vimeo videos - when you play one and then another, the first one carries on playing and doesn&#39;t pause. I understand that froogaloop can help tell the second and other videos to stop playing when another plays. I&#39;m a bit confused as to where in my script in my wordpress site I am supposed to place this froogaloop though?<br /><br />best<br />Rob"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/2927371753954418037"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/2927371753954418037"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html?showComment=1361300667333#c2927371753954418037",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Rob",
                    "uri": "https://www.blogger.com/profile/09105751784081655395",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img2.blogblog.com/img/b16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-7682867387576352569",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7682867387576352569",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-560517473",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 19, 2013 at 11:04 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8859204593899490397",
                "published": "2013-02-19T12:24:27.426-08:00",
                "updated": "2013-02-19T12:24:27.426-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I don&#39;t know wordpress well enough to give spe..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I don&#39;t know wordpress well enough to give specific intructions, but I would try to modify the template of your blog. <br /><br />Search the header and add a \"script\" tag with froogaloop. <br />If this is not specific enough, let me know, I will open an account in wordpress and try to give more specific instructions. "
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/8859204593899490397"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/8859204593899490397"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html?showComment=1361305467426#c8859204593899490397",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/2927371753954418037"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://www.blogger.com/profile/06924133171209944748",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-7682867387576352569",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7682867387576352569",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-771062549",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 19, 2013 at 12:24 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-553181151754002634",
                "published": "2013-02-19T13:10:00.722-08:00",
                "updated": "2013-02-19T13:10:00.722-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I opened an account in wordpress.\nRead about it a ..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I opened an account in wordpress.<br />Read about it a bit - <br /><br />http://codex.wordpress.org/Using_Javascript<br /><br />But I cannot find \"HTML Editor\" anywhere.. <br />http://wordpress.org/support/topic/unable-to-use-visual-editor-in-posts-options-disappeared<br /><br />Can you get to an HTML editor in wordpress?<br /> "
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/553181151754002634"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/553181151754002634"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html?showComment=1361308200722#c553181151754002634",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7682867387576352569/comments/default/2927371753954418037"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://www.blogger.com/profile/06924133171209944748",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2012/05/vimeo-api-doesnt-work-what-froogaloop.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-7682867387576352569",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7682867387576352569",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-771062549",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 19, 2013 at 1:10 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6994827433408211375",
                "published": "2013-03-29T07:49:09.943-07:00",
                "updated": "2013-03-29T07:49:09.943-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thank you!! Oh so frustrating"
                },
                "content": {
                    "_type": "html",
                    "__text": "Thank you!! Oh so frustrating"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5783193993796923459/comments/default/6994827433408211375"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5783193993796923459/comments/default/6994827433408211375"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2010/08/play-framework-cannot-access-public.html?showComment=1364568549943#c6994827433408211375",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "romka",
                    "uri": "https://www.blogger.com/profile/09229350270601710668",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img2.blogblog.com/img/b16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2010/08/play-framework-cannot-access-public.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-5783193993796923459",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5783193993796923459",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1917066438",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "March 29, 2013 at 7:49 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-3568198820443580718",
                "published": "2013-04-10T17:00:36.384-07:00",
                "updated": "2014-07-13T21:02:20.261-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "This will just fix this part \"unless we use m..."
                },
                "content": {
                    "_type": "html",
                    "__text": "This will just fix this part \"unless we use mouse scroll, but that will make the scrollbar thumb go overflow\"<br />But not that one \"it will limit the tinyscroll view area thus we can&#39;t see the whole content\"<br /><br />Any idea? I&#39;m using tinyscrollbar on an important project.<br />Thanks"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/3568198820443580718"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/3568198820443580718"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html?showComment=1365638436384#c3568198820443580718",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/4044058827417154919/comments/default/5689487004425552067"
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2011/09/adding-min-height-to-tinyscrollbar.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-4044058827417154919",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/4044058827417154919",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-2112379937",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "April 10, 2013 at 5:00 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8176796725783345245",
                "published": "2013-04-11T23:12:09.319-07:00",
                "updated": "2013-04-11T23:12:09.319-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Thanks for the second case. \nClosing related proje..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Thanks for the second case. <br />Closing related projects effectively triggers dependencies downloading from repository !"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/8238256122513220387/comments/default/8176796725783345245"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/8238256122513220387/comments/default/8176796725783345245"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/01/troubleshooting-missing-artifact-in.html?showComment=1365747129319#c8176796725783345245",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2013/01/troubleshooting-missing-artifact-in.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-8238256122513220387",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/8238256122513220387",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1767160243",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "April 11, 2013 at 11:12 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8468596794814474180",
                "published": "2013-04-12T17:46:56.465-07:00",
                "updated": "2013-04-12T17:46:56.465-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Looks interesting. Is there a reason not to use Gi..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Looks interesting. Is there a reason not to use Gimp/Krita Color to Alpha on this?"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2496090817099542145/comments/default/8468596794814474180"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2496090817099542145/comments/default/8468596794814474180"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/removing-background-from-image-with.html?showComment=1365814016465#c8468596794814474180",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "colorathis",
                    "uri": "http://colorathis.wordpress.com/",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/openid16-rounded.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2013/04/removing-background-from-image-with.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2496090817099542145",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2496090817099542145",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1401369554",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "April 12, 2013 at 5:46 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-8868181059264135473",
                "published": "2013-04-14T22:50:31.365-07:00",
                "updated": "2013-04-14T22:50:31.365-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I&#39;ve spent the last couple of hours trying to ..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I&#39;ve spent the last couple of hours trying to answer and failed. :) <br /><br />You make a great point, but it will require at least 2 more posts to answer you properly. <br /><br />The topic of these posts should be: <br /><br />1. Hey, just found out that background removal from images is called \"Color to Alpha\" - a.k.a - google you better shape up. <br />2. 10 reasons why I love imagemagick - a.k.a - why I hate GIMP. <br /><br />:)<br /><br />Krita is definitely worth mentioning. I read about their Color to Alpha algorithm. very professional. <br /><br />Hope to see you soon on my blog - your feedback is exactly the reason why I started blogging in the first place. <br />You, and readers like you, make my stupid blog worthwhile. <br />Thank you. <br />"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2496090817099542145/comments/default/8868181059264135473"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2496090817099542145/comments/default/8868181059264135473"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/04/removing-background-from-image-with.html?showComment=1366005031365#c8868181059264135473",
                        "_title": ""
                    },
                    {
                        "_rel": "related",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/2496090817099542145/comments/default/8468596794814474180"
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "uri": "https://www.blogger.com/profile/06924133171209944748",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "32",
                        "_height": "32",
                        "_src": "//lh4.googleusercontent.com/-bmXPZoQHPBI/AAAAAAAAAAI/AAAAAAAAVOI/Ic8Oam9UKHA/s32-c/photo.jpg",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2013/04/removing-background-from-image-with.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-2496090817099542145",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/2496090817099542145",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-771062549",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "April 14, 2013 at 10:50 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7072398587639743483",
                "published": "2014-08-06T13:03:40.026-07:00",
                "updated": "2014-08-06T13:03:40.037-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "This is a very nice post"
                },
                "content": {
                    "_type": "html",
                    "__text": "This is a very nice post"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7020820942837291158/comments/default/7072398587639743483"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/7020820942837291158/comments/default/7072398587639743483"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2013/11/gruntfilejs-adding-another-html-file-to.html?showComment=1407355420026#c7072398587639743483",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Anonymous",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2013/11/gruntfilejs-adding-another-html-file-to.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-7020820942837291158",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/7020820942837291158",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-92328365",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "August 6, 2014 at 1:03 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6938116760536579652",
                "published": "2014-11-08T12:49:10.850-08:00",
                "updated": "2014-11-08T12:49:10.861-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Still works on 10/8/2014!! ( the file in ubuntu se..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Still works on 10/8/2014!! ( the file in ubuntu server is in /etc/mime.types )."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/6938116760536579652"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/6938116760536579652"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html?showComment=1415479750850#c6938116760536579652",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Moisés Lodeiro Santiago",
                    "uri": "http://www.moiseslodeiro.es",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-5662502287649458300",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5662502287649458300",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1512806719",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "November 8, 2014 at 12:49 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6500278694611175478",
                "published": "2014-11-17T05:08:16.060-08:00",
                "updated": "2014-11-17T05:08:16.070-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Extremely helpful! Thanks"
                },
                "content": {
                    "_type": "html",
                    "__text": "Extremely helpful! Thanks"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/6500278694611175478"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/6500278694611175478"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html?showComment=1416229696060#c6500278694611175478",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Jonathan La'Fey",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-5662502287649458300",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5662502287649458300",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1306543245",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "November 17, 2014 at 5:08 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4904249737678593813",
                "published": "2014-11-17T06:45:40.086-08:00",
                "updated": "2014-11-17T06:45:40.097-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Glad to hear it :)"
                },
                "content": {
                    "_type": "html",
                    "__text": "Glad to hear it :)"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/4904249737678593813"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/4904249737678593813"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html?showComment=1416235540086#c4904249737678593813",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-5662502287649458300",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5662502287649458300",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-92328365",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "November 17, 2014 at 6:45 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4492832377522591610",
                "published": "2015-02-23T06:10:50.023-08:00",
                "updated": "2015-02-23T06:10:50.067-08:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "There are many complex useless explications on the..."
                },
                "content": {
                    "_type": "html",
                    "__text": "There are many complex useless explications on the Net and you explain it very well in some lines...<br />Very helpful, Thanks very much !"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/4492832377522591610"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/5662502287649458300/comments/default/4492832377522591610"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html?showComment=1424700650023#c4492832377522591610",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "BorbagUskada",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/10/json-parse-is-insane.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-5662502287649458300",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/5662502287649458300",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-379086449",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "February 23, 2015 at 6:10 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-5489864930211206833",
                "published": "2015-05-27T23:28:08.808-07:00",
                "updated": "2015-05-27T23:28:08.820-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "is it possible to use angular.js in my google gadg..."
                },
                "content": {
                    "_type": "html",
                    "__text": "is it possible to use angular.js in my google gadget? so far i am failing to make it work..."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/5489864930211206833"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/5489864930211206833"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html?showComment=1432794488808#c5489864930211206833",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Nimrod Fridlin",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1356603989448252720",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1356603989448252720",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-774006337",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "May 27, 2015 at 11:28 PM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-6771634807528002776",
                "published": "2015-05-28T09:10:24.160-07:00",
                "updated": "2015-05-28T09:10:24.171-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "Hi, Have you tried to implement your script into n..."
                },
                "content": {
                    "_type": "html",
                    "__text": "Hi, Have you tried to implement your script into node.js?"
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/6771634807528002776"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/6771634807528002776"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html?showComment=1432829424160#c6771634807528002776",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "Juan Martín Muda",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1356603989448252720",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1356603989448252720",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1306543245",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "May 28, 2015 at 9:10 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-7151011342828935523",
                "published": "2015-05-29T07:27:53.281-07:00",
                "updated": "2015-05-29T07:27:53.291-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "I never tried this. but I guess that if you can us..."
                },
                "content": {
                    "_type": "html",
                    "__text": "I never tried this. but I guess that if you can use jquery (as I showed) you can also use angular."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/7151011342828935523"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/7151011342828935523"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html?showComment=1432909673281#c7151011342828935523",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1356603989448252720",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1356603989448252720",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-774006337",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "May 29, 2015 at 7:27 AM",
                        "__prefix": "gd"
                    }
                ]
            },
            {
                "id": "tag:blogger.com,1999:blog-7135654868651822449.post-4449963965840607098",
                "published": "2015-05-29T07:31:13.981-07:00",
                "updated": "2015-05-29T07:31:13.992-07:00",
                "category": {
                    "_scheme": "http://schemas.google.com/g/2005#kind",
                    "_term": "http://schemas.google.com/blogger/2008/kind#comment"
                },
                "title": {
                    "_type": "text",
                    "__text": "for what purpose? No, I haven&#39;t tried to imple..."
                },
                "content": {
                    "_type": "html",
                    "__text": "for what purpose? No, I haven&#39;t tried to implement in node."
                },
                "link": [
                    {
                        "_rel": "edit",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/4449963965840607098"
                    },
                    {
                        "_rel": "self",
                        "_type": "application/atom+xml",
                        "_href": "https://www.blogger.com/feeds/7135654868651822449/1356603989448252720/comments/default/4449963965840607098"
                    },
                    {
                        "_rel": "alternate",
                        "_type": "text/html",
                        "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html?showComment=1432909873981#c4449963965840607098",
                        "_title": ""
                    }
                ],
                "author": {
                    "name": "guy mograbi",
                    "email": "noreply@blogger.com",
                    "image": {
                        "_rel": "http://schemas.google.com/g/2005#thumbnail",
                        "_width": "16",
                        "_height": "16",
                        "_src": "//img1.blogblog.com/img/blank.gif",
                        "__prefix": "gd"
                    }
                },
                "in-reply-to": {
                    "_href": "http://www.mograblog.com/2014/12/grunt-aws-certuntrusted-quick-fix.html",
                    "_ref": "tag:blogger.com,1999:blog-7135654868651822449.post-1356603989448252720",
                    "_source": "https://www.blogger.com/feeds/7135654868651822449/posts/default/1356603989448252720",
                    "_type": "text/html",
                    "__prefix": "thr"
                },
                "extendedProperty": [
                    {
                        "_name": "blogger.itemClass",
                        "_value": "pid-1446776300",
                        "__prefix": "gd"
                    },
                    {
                        "_name": "blogger.displayTime",
                        "_value": "May 29, 2015 at 7:31 AM",
                        "__prefix": "gd"
                    }
                ]
            }
        ],
        "_xmlns": "http://www.w3.org/2005/Atom",
        "_xmlns:openSearch": "http://a9.com/-/spec/opensearchrss/1.0/",
        "_xmlns:gd": "http://schemas.google.com/g/2005",
        "_xmlns:thr": "http://purl.org/syndication/thread/1.0",
        "_xmlns:georss": "http://www.georss.org/georss"
    }
}